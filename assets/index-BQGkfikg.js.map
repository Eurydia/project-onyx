{"version":3,"file":"index-BQGkfikg.js","sources":["../../src/types/syntax-tree.ts","../../src/core/interpreter/grammar.ts","../../src/core/interpreter/parser.ts","../../src/components/common/LanguageSwitcher.tsx","../../src/components/common/ToolNavDropdown.tsx","../../src/layouts/AppbarLayout.tsx","../../src/views/HomeView.tsx","../../src/assets/blogs/UserManual/en.txt","../../src/assets/blogs/UserManual/th.txt","../../src/components/styled/StyledMarkdown.tsx","../../src/views/TheoremView.tsx","../../src/core/tree/conversion.ts","../../src/core/tree/expr/evaluate.ts","../../src/components/styled/StyledLatex.tsx","../../src/components/math/Editor/EditorRibbon.tsx","../../src/components/math/Editor/Editor.tsx","../../src/components/styled/StyledIconButton.tsx","../../src/components/math/Playground/PlaygroundPlaybackControl.tsx","../../src/components/styled/StyledFAB.tsx","../../src/components/math/Playground/TreeGraph/TreeGraphLink.tsx","../../src/components/math/Playground/TreeGraph/TreeGraphNode.tsx","../../src/components/math/Playground/TreeGraph/TreeGraph.tsx","../../src/components/math/Playground/Playground.tsx","../../src/components/styled/StyledAlert.tsx","../../src/core/eval.ts","../../src/core/tree/expr/latex.ts","../../src/core/tree/flatten.ts","../../src/components/math/TruthTable/TruthTable.tsx","../../src/core/exprTreeFlattenStepByStep.ts","../../src/components/math/Playground/PlaygroundSymbolConfig.tsx","../../src/components/math/StepByStepEvaluation.tsx","../../src/components/math/SolverOutputGroup.tsx","../../src/views/SolverView.tsx","../../src/routes/solver.tsx","../../src/App/thene/palette.ts","../../src/App/thene/theme.ts","../../src/App/App.tsx","../../src/locales/en/translation.ts","../../src/locales/th/translation.ts","../../src/locales/config.ts","../../src/main.tsx"],"sourcesContent":["export enum SyntaxTreeNodeKind {\r\n  CONST = \"CONSTANT\",\r\n  IDEN = \"IDEN\",\r\n  UNARY = \"UNARY\",\r\n  BINARY = \"BINARY\",\r\n}\r\n\r\nexport enum Operator {\r\n  IFF = \"IFF\",\r\n  IMPL = \"IMPL\",\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  NOT = \"NOT\",\r\n}\r\n\r\nexport type SyntaxTreeNodeConst = {\r\n  nodeType: SyntaxTreeNodeKind.CONST;\r\n  value: boolean;\r\n};\r\nexport type SyntaxTreeNodeIden = {\r\n  nodeType: SyntaxTreeNodeKind.IDEN;\r\n  symbol: string;\r\n};\r\nexport type SyntaxTreeNodeBinary = {\r\n  nodeType: SyntaxTreeNodeKind.BINARY;\r\n  operator: Exclude<Operator, Operator.NOT>;\r\n  left: SyntaxTree;\r\n  right: SyntaxTree;\r\n};\r\nexport type SyntaxTreeNodeUnary = {\r\n  nodeType: SyntaxTreeNodeKind.UNARY;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type SyntaxTree =\r\n  | SyntaxTreeNodeBinary\r\n  | SyntaxTreeNodeUnary\r\n  | SyntaxTreeNodeIden\r\n  | SyntaxTreeNodeConst;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n","import {\r\n  Operator,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/syntax-tree\";\r\nimport * as ohm from \"ohm-js\";\r\n\r\nconst collectBinaryNodes = (\r\n  operator: Exclude<Operator, Operator.NOT>,\r\n  left: SyntaxTree,\r\n  right: SyntaxTree[]\r\n) => {\r\n  let node: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator,\r\n    left,\r\n    right: right[0],\r\n  };\r\n  for (let i = 1; i < right.length; i++) {\r\n    node = {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator,\r\n      left: node,\r\n      right: right[i],\r\n    };\r\n  }\r\n  return node;\r\n};\r\n\r\nexport const grammar = ohm.grammar(String.raw`\r\nBooleanExpressions {\r\n  Expression\r\n    = Iff \r\n\r\n  Iff\r\n    = Implies (iff_sym Implies)*\r\n\r\n  Implies\r\n    = Or (implies_sym Or)*\r\n\r\n  Or\r\n    = And (or_sym And)*\r\n\r\n  And\r\n    = Not (and_sym Not)*\r\n\r\n  Not\r\n    = not_sym Not                   --not\r\n    | Primary\r\n\r\n  Primary\r\n    = \"(\" Expression \")\" --group\r\n    | true_sym    --lit_true\r\n    | false_sym   --lit_false\r\n    | identifier  --variable\r\n\r\n  identifier\r\n    = letter+\r\n  \r\n  iff_sym \r\n    = \"iff\"\r\n    | \"⇔\"\r\n  \r\n  implies_sym \r\n    = \"implies\"\r\n    | \"⇒\"\r\n  \r\n  or_sym\r\n    = \"or\"\r\n    | \"∨\"\r\n\r\n  and_sym\r\n    = \"and\"\r\n    | \"∧\"\r\n  \r\n  not_sym\r\n    = \"not\"\r\n    | \"¬\"\r\n\r\n  true_sym\r\n    = \"⊤\"\r\n    | \"T\"\r\n    | \"1\"\r\n\r\n  false_sym\r\n    = \"⊥\"\r\n    | \"F\"\r\n    | \"0\"\r\n}\r\n`);\r\n\r\nexport const semantics = grammar.createSemantics();\r\nsemantics.addOperation(\"buildTree\", {\r\n  Expression(e) {\r\n    return e.buildTree();\r\n  },\r\n\r\n  Iff(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IFF,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Implies(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IMPL,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Or(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.OR,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  And(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.AND,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Not_not(_, expr) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: expr.buildTree(),\r\n    };\r\n  },\r\n\r\n  Primary_group(_open, expr, _close) {\r\n    return expr.buildTree();\r\n  },\r\n\r\n  Primary_lit_true(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.CONST,\r\n      value: true,\r\n    };\r\n  },\r\n\r\n  Primary_lit_false(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.CONST,\r\n      value: false,\r\n    };\r\n  },\r\n\r\n  Primary_variable(id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.IDEN,\r\n      symbol: id.sourceString,\r\n    };\r\n  },\r\n\r\n  identifier(_) {\r\n    return this.sourceString;\r\n  },\r\n\r\n  _iter(...children) {\r\n    return children.map((n) => n.buildTree());\r\n  },\r\n});\r\n","import {\r\n  grammar,\r\n  semantics,\r\n} from \"$core/interpreter/grammar\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport { SyntaxTree } from \"$types/syntax-tree\";\r\n\r\nexport const parse = (\r\n  content: string\r\n): Maybe<SyntaxTree> => {\r\n  const m = grammar.match(content);\r\n  if (m.succeeded()) {\r\n    const tree = semantics(m).buildTree();\r\n    return { ok: true, data: tree };\r\n  } else {\r\n    return {\r\n      ok: false,\r\n    };\r\n  }\r\n};\r\n","import {\r\n  CheckRounded,\r\n  TranslateRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  IconButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst LANGUAGES = [\"en\", \"th\"];\r\n\r\nexport const LanguageSwitcher: FC = () => {\r\n  const { i18n, t } = useTranslation();\r\n  const [anchor, setAnchor] =\r\n    useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClose = () => setAnchor(null);\r\n  return (\r\n    <Fragment>\r\n      <Tooltip\r\n        title={<Typography>{t(\"language\")}</Typography>}\r\n      >\r\n        <IconButton\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          onClick={(e) => setAnchor(e.currentTarget)}\r\n        >\r\n          <TranslateRounded />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={anchor}\r\n        open={anchor !== null}\r\n        onClose={handleClose}\r\n        onClick={handleClose}\r\n        slotProps={{\r\n          paper: {\r\n            sx: {\r\n              borderRadius: ({ shape }) =>\r\n                shape.borderRadius,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        {LANGUAGES.map((lang, index) => {\r\n          const selected = i18n.language === lang;\r\n          return (\r\n            <MenuItem\r\n              onClick={() => i18n.changeLanguage(lang)}\r\n              disableRipple\r\n              key={\"item\" + index}\r\n              selected={selected}\r\n              sx={{\r\n                padding: 2,\r\n              }}\r\n            >\r\n              <ListItemIcon>\r\n                {selected && (\r\n                  <CheckRounded color=\"primary\" />\r\n                )}\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                slotProps={{\r\n                  primary: {\r\n                    fontWeight: 500,\r\n                    textTransform: \"uppercase\",\r\n                  },\r\n                }}\r\n                primary={t(`lang.${lang}`)}\r\n              />\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  CheckRounded,\r\n  KeyboardArrowDownRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, useState } from \"react\";\r\nimport { NavLink } from \"react-router\";\r\n\r\ntype ToolNavDropDownProps = {\r\n  selected: string;\r\n  items: { label: string; href: string }[];\r\n};\r\nexport const ToolNavDropDown: FC<ToolNavDropDownProps> = (\r\n  props\r\n) => {\r\n  const { selected, items } = props;\r\n  const [anchor, setAnchor] = useState<null | HTMLElement>(\r\n    null\r\n  );\r\n  const handleOpen = (\r\n    event: React.MouseEvent<HTMLElement>\r\n  ) => {\r\n    setAnchor(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchor(null);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        disableRipple\r\n        disableElevation\r\n        endIcon={<KeyboardArrowDownRounded />}\r\n        variant=\"text\"\r\n        onClick={handleOpen}\r\n        sx={{\r\n          color: (theme) => theme.palette.text.primary,\r\n        }}\r\n      >\r\n        TOOLS\r\n      </Button>\r\n      <Menu\r\n        anchorEl={anchor}\r\n        open={anchor !== null}\r\n        onClick={handleClose}\r\n        onClose={handleClose}\r\n        slotProps={{\r\n          paper: {\r\n            sx: {\r\n              borderRadius: ({ shape }) =>\r\n                shape.borderRadius,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        {items.map(({ href, label }, index) => {\r\n          const isSelected = selected === href;\r\n          return (\r\n            <MenuItem\r\n              disableRipple\r\n              key={\"item\" + index}\r\n              component={NavLink}\r\n              to={href}\r\n              selected={isSelected}\r\n              sx={{ padding: 2 }}\r\n            >\r\n              <ListItemIcon>\r\n                {isSelected && <CheckRounded />}\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                slotProps={{\r\n                  primary: {\r\n                    fontWeight: 500,\r\n                    textTransform: \"uppercase\",\r\n                  },\r\n                }}\r\n              >\r\n                {label}\r\n              </ListItemText>\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { LanguageSwitcher } from \"$components/common/LanguageSwitcher\";\r\nimport { ToolNavDropDown } from \"$components/common/ToolNavDropdown\";\r\nimport { HomeRounded } from \"@mui/icons-material\";\r\nimport {\r\n  IconButton,\r\n  Paper,\r\n  Stack,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, Outlet, useLocation } from \"react-router\";\r\n\r\nconst NAV_ITEMS: { href: string; label: string }[] = [\r\n  { href: \"/solver\", label: \"nav.solver\" },\r\n  { href: \"/evaluator\", label: \"nav.evaluator\" },\r\n  { href: \"/simplifier\", label: \"nav.simplifier\" },\r\n  { href: \"/checker\", label: \"nav.checker\" },\r\n];\r\n\r\nexport const AppbarLayout: FC = () => {\r\n  const { t } = useTranslation();\r\n  const { pathname } = useLocation();\r\n  return (\r\n    <Fragment>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={{\r\n          maxWidth: \"lg\",\r\n          marginY: 4,\r\n          marginX: {\r\n            xs: 4,\r\n            md: \"auto\",\r\n          },\r\n          paddingY: 1,\r\n          paddingX: 2,\r\n          borderRadius: 4,\r\n          flexDirection: \"row\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Stack\r\n          flexWrap=\"wrap\"\r\n          direction=\"row\"\r\n          useFlexGap\r\n          alignItems=\"center\"\r\n          justifyContent=\"flex-start\"\r\n          spacing={2}\r\n        >\r\n          <Tooltip\r\n            title={<Typography>{t(\"nav.home\")}</Typography>}\r\n          >\r\n            <IconButton\r\n              disableRipple\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              component={Link}\r\n              to=\"/\"\r\n            >\r\n              <HomeRounded />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <ToolNavDropDown\r\n            selected={pathname}\r\n            items={NAV_ITEMS.map(({ href, label }) => ({\r\n              href,\r\n              label: t(label),\r\n            }))}\r\n          />\r\n        </Stack>\r\n        <LanguageSwitcher />\r\n      </Paper>\r\n      <Outlet />\r\n    </Fragment>\r\n  );\r\n};\r\n","import { Masonry } from \"@mui/lab\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router\";\r\n\r\nconst CARDS: {\r\n  title: string;\r\n  desc: string;\r\n  href: string;\r\n}[] = [\r\n  {\r\n    title: \"view.home.card.solver.title\",\r\n    desc: \"view.home.card.solver.desc\",\r\n    href: \"/solver\",\r\n  },\r\n  {\r\n    title: \"view.home.card.evaluator.title\",\r\n    desc: \"view.home.card.evaluator.desc\",\r\n    href: \"/evaluator\",\r\n  },\r\n  {\r\n    title: \"view.home.card.simplifier.title\",\r\n    desc: \"view.home.card.simplifier.desc\",\r\n    href: \"/simplifier\",\r\n  },\r\n  {\r\n    title: \"view.home.card.checker.title\",\r\n    desc: \"view.home.card.checker.desc\",\r\n    href: \"/checker\",\r\n  },\r\n];\r\n\r\nexport const HomeView: FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Stack\r\n      spacing={2}\r\n      maxWidth=\"lg\"\r\n      marginX={{\r\n        md: \"auto\",\r\n        xs: 4,\r\n      }}\r\n    >\r\n      <Typography\r\n        fontSize=\"large\"\r\n        fontWeight={700}\r\n      >\r\n        {t(\"view.home.calculators\")}\r\n      </Typography>\r\n      <Masonry columns={{ xs: 1, md: 2 }}>\r\n        {CARDS.map(({ title, href, desc }, index) => (\r\n          <Link\r\n            to={href}\r\n            key={\"card\" + index}\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Card\r\n              elevation={0}\r\n              sx={{\r\n                \"borderStyle\": \"solid\",\r\n                \"borderRadius\": ({ shape }) =>\r\n                  shape.borderRadius,\r\n                \"borderColor\": ({ palette }) =>\r\n                  palette.divider,\r\n                \"transition\": \"all 0.1s ease\",\r\n                \"&:hover\": {\r\n                  borderColor: ({ palette }) =>\r\n                    palette.primary.main,\r\n                },\r\n              }}\r\n            >\r\n              <CardHeader\r\n                title={t(title)}\r\n                titleTypographyProps={{\r\n                  sx: {\r\n                    fontWeight: 700,\r\n                    whiteSpace: \"break-spaces\",\r\n                  },\r\n                }}\r\n              />\r\n              <CardContent>\r\n                <Typography>{t(desc)}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n        ))}\r\n      </Masonry>\r\n    </Stack>\r\n  );\r\n};\r\n","export default \"data:text/plain;base64,IyBVc2VyIE1hbnVhbA0KDQoqKlF1aWNrIGd1aWRlKio6IA0KMS4gRW50ZXIgYSBCb29sZWFuIGV4cHJlc3Npb24gaW50byB0aGUgaW5wdXQgZmllbGQNCjEuIFByZXNzICJSVU4iDQoxLiBDbGljayBvbiBhIG5vZGUgdG8gbW9kaWZ5IHRoZSB0cnV0aCB2YWx1ZXMNCg0KIyMgU3VwcG9ydGVkIExvZ2ljYWwgQ29ubmVjdGl2ZXMNCg0KVGhlIGFwcGxpY2F0aW9uIHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgbG9naWNhbCBrZXl3b3JkcyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSBtYXRoZW1hdGljYWwgc3ltYm9sczoNCg0KLSBMb2dpY2FsIG5lZ2F0aW9uICAgIChrZXl3b3JkOiBgbm90YCAgICAgLCBzeW1ib2w6ICZub3Q7KSANCi0gTG9naWNhbCBjb25qdW5jdGlvbiAoa2V5d29yZDogYGFuZGAgICAgICwgc3ltYm9sOiAmYW5kOykgDQotIExvZ2ljYWwgZGlzanVuY3Rpb24gKGtleXdvcmQ6IGBvcmAgICAgICAsIHN5bWJvbDogJm9yOykgDQotIExvZ2ljYWwgaW1wbGljYXRpb24gKGtleXdvcmQ6IGBpbXBsaWVzYCAsIHN5bWJvbDogJnJBcnI7KSANCi0gTG9naWNhbCBlcXVpdmFsZW5jZSAoa2V5d29yZDogYGlmZmAgICAgICwgc3ltYm9sOiAmaWZmOykNCg0KVGhlIGtleXdvcmQgYW5kIHRoZSBzeW1ib2wgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWUsIHNvIGNhbiB1c2UgdGhlbSBpbnRlcmNoYW5nZWJseSwgb3IgZXZlbmluZyBtaXggdGhlbSBpbiBhbiBleHByZXNzaW9uLg0KDQpZb3UgY2FuIHVzZSB0aGUgcmliYm9uIHRvIGluc2VydCBhIHN5bWJvbCBpbnRvIHRoZSBpbnB1dC4gV2l0aCB0aGUgaW5wdXQgYXJlYSBhY3RpdmUsIHByZXNzIGBDVFJMYCBhbmQgYEVOVEVSYCB0byBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbg0KDQojIyBGZWF0dXJlcyANCg0KKipFdmFsdWF0aW9uIHBsYXliYWNrKioNCg0KVXNlIHRoZSBwbGF5YmFjayBjb250cm9sIHRvIHNlZSBvcmRlciBvZiBldmFsdWF0aW9uIGZvciB0aGUgZXhwcmVzc2lvbi4gUHJlc3MgZm9yd2FyZCBvciByZXdpbmQgdG8gYSBmaW5lciBwbGF5YmFjayBjb250cm9sIGFuZCB0aGUgc2xpZGVyIHRvIHF1aWNrbHkgbW92ZSBhcm91bmQgdGhlIGV2YWx1YXRpb24uDQoNCioqVGVzdGluZyBkaWZmZXJlbnQgdHJ1dGggdmFsdWVzKioNCg0KUHJvcG9zaXRpb25zIGFyZSBmYWxzZSBpbml0aWFsbHkuIA0KDQpUbyBtb2RpZnkgdGhlIHRydXRoIHZhbHVlIG9mIGEgcHJvcG9zaXRpb24sIHByZXNzIG9uZSBvZiB0aGUgbm9kZSBwcmVzZW50IGluIHRoZSBvdXRwdXQgYXJlYS4NCg0KRG9pbmcgc28gd2lsbCBvcGVuIHVwIGEgd2luZG93LiBJbiB0aGlzIHdpbmRvdywgeW91IGNhbiBtb2RpZnkgdGhlIHRydXRoIHZhbHVlcyBvZiBwcm9wb3NpdGlvbnMgcHJlc2VudCBpbiB0aGUgcGFydGljdWxhciBzdWIgZXhwcmVzc2lvbi4gUHJlc3NpbmcgdGhlIHJvb3Qgd2lsbCBzaG93IHRoZSBlbnRpcmUgdHJlZSwgYWxvbmcgd2l0aCBldmVyeSBwcm9wb3NpdGlvbi4=\"","export default \"data:text/plain;base64,IyDguITguLnguYjguKHguLfguK3guIHguLLguKPguYPguIrguYnguIfguLLguJkNCg0KKirguITguLnguYjguKHguLfguK3guYHguJrguJrguKLguYjguK06KiogIA0KMS4g4Lib4LmJ4Lit4LiZ4LiZ4Li04Lie4LiI4LiZ4LmM4Lil4LiH4LmD4LiZ4LiK4LmI4Lit4LiH4LiC4LmJ4Lit4LiE4Lin4Liy4LihICANCjIuIOC4geC4lCAi4LiE4Liz4LiZ4Lin4LiTIiAgDQozLiDguITguKXguLTguIHguJfguLXguYjguYLguKvguJnguJTguYDguJ7guLfguYjguK3guYHguIHguYnguYTguILguITguYjguLLguITguKfguLLguKHguIjguKPguLTguIfguILguK3guIfguJvguKPguLDguJ7guIjguJnguYwNCg0KIyMg4LiV4Lix4Lin4LmA4LiK4Li34LmI4Lit4Lih4LiX4Li14LmI4Lij4Lit4LiH4Lij4Lix4LiaDQoNCuC4leC4seC4p+C5gOC4iuC4t+C5iOC4reC4l+C4teC5iOC4o+C4reC4h+C4o+C4seC4muC4oeC4teC4lOC4seC4h+C4meC4teC5iToNCg0KLSDguJnguLTguYDguKrguJggKOC4hOC4szogYG5vdGAsIOC4quC4seC4jeC4peC4seC4geC4qeC4k+C5jDogJm5vdDspICANCi0g4LmB4Lil4LiwICjguITguLM6IGBhbmRgLCDguKrguLHguI3guKXguLHguIHguKnguJPguYw6ICZhbmQ7KSAgDQotIOC4q+C4o+C4t+C4rSAo4LiE4LizOiBgb3JgLCDguKrguLHguI3guKXguLHguIHguKnguJPguYw6ICZvcjspICANCi0g4LiW4LmJ4Liy4LmB4Lil4LmJ4LinICjguITguLM6IGBpbXBsaWVzYCwg4Liq4Lix4LiN4Lil4Lix4LiB4Lip4LiT4LmMOiAmckFycjspICANCi0g4LiB4LmH4LiV4LmI4Lit4LmA4Lih4Li34LmI4LitICjguITguLM6IGBpZmZgLCDguKrguLHguI3guKXguLHguIHguKnguJPguYw6ICZpZmY7KSAgDQoNCuC4hOC4s+C5geC4peC4sOC4quC4seC4jeC4peC4seC4geC4qeC4k+C5jOC4quC4suC4oeC4suC4o+C4luC5g+C4iuC5ieC5geC4l+C4meC4geC4seC4meC5hOC4lOC5iSDguYHguKXguLDguKrguLLguKHguLLguKPguJbguYPguIrguYnguJzguKrguKHguIHguLHguJnguJnguLTguJ7guIjguJnguYzguYDguJTguLXguKLguKfguIHguYfguYTguJTguYkNCg0K4Liq4Liy4Lih4Liy4Lij4LiW4LmD4LiK4LmJ4LmB4LiW4Lia4LmA4LiE4Lij4Li34LmI4Lit4LiH4Lih4Li34Lit4LmA4Lie4Li34LmI4Lit4LmB4LiX4Lij4LiB4Liq4Lix4LiN4Lil4Lix4LiB4Lip4LiT4LmM4Lil4LiH4LmD4LiZ4LiK4LmI4Lit4LiH4Lib4LmJ4Lit4LiZ4LiC4LmJ4Lit4Lih4Li54LilIA0KDQrguYPguJnguILguJPguLDguJfguLXguYjguJ7guLTguKHguJ7guYzguJnguLTguJ7guIjguJnguYzguKrguLLguKHguLLguKPguJYg4LiB4LiUIGBDVFJMYCDguYHguKXguLAgYEVOVEVSYCDguYDguJ7guLfguYjguK3guITguLPguJnguKfguJPguJvguKPguLDguJ7guIjguJnguYzguYTguJTguYnguYLguJTguKLguJfguLXguYjguYTguKHguYjguJXguYnguK3guIfguIHguJQgIuC4hOC4s+C4meC4p+C4kyINCg0KIyMg4Lil4Li54LiB4LmA4Lil4LmI4LiZ4Lit4Li34LmI4LiZ4LmGDQoNCioq4Lil4Liz4LiU4Lix4Lia4LiC4Lix4LmJ4LiZ4LiV4Lit4LiZ4LiB4Liy4Lij4LiE4Liz4LiZ4Lin4LiTKioNCg0K4LmD4LiK4LmJ4LiB4Liy4Lij4LiE4Lin4Lia4LiE4Li44Lih4LmA4Lie4Li34LmI4Lit4LiU4Li54Lil4Liz4LiU4Lix4Lia4LiB4Liy4Lij4Lib4Lij4Liw4LmA4Lih4Li04LiZ4Lic4Lil4LiC4Lit4LiH4LiZ4Li04Lie4LiI4LiZ4LmMIA0KDQrguIHguJTguJvguLjguYjguKHguYDguJTguLTguJnguKvguJnguYnguLLguKvguKPguLfguK3guKLguYnguK3guJnguIHguKXguLHguJrguYDguJ7guLfguYjguK3guITguKfguJrguITguLjguKHguK3guKLguYjguLLguIfguKXguLDguYDguK3guLXguKLguJQg4LmB4Lil4Liw4LmD4LiK4LmJ4LmB4LiW4Lia4LmA4Lil4Li34LmI4Lit4LiZ4LmA4Lie4Li34LmI4Lit4LmA4Lil4Li34LmI4Lit4LiZ4LiU4Li54Lil4Liz4LiU4Lix4Lia4LiB4Liy4Lij4LiE4Liz4LiZ4Lin4LiT4Lit4Lii4LmI4Liy4LiH4LiE4Lij4LmI4Liy4LinIOC5hg0KDQoqKuC5geC4geC5ieC5hOC4guC4hOC5iOC4suC4hOC4p+C4suC4oeC4iOC4o+C4tOC4hyoqDQoNCuC5geC4o+C4geC5gOC4o+C4tOC5iOC4oSDguITguYjguLLguITguKfguLLguKHguIjguKPguLTguIfguILguK3guIfguJvguKPguLDguJ7guIjguJnguYzguJbguLnguIHguIHguLPguKvguJnguJTguYPguKvguYnguYDguJvguYfguJnguYDguJfguYfguIggDQoNCuC4quC4suC4oeC4suC4o+C4luC5geC4geC5ieC5hOC4guC4hOC4p+C4suC4oeC4hOC4p+C4suC4oeC4iOC4o+C4tOC4h+C4guC4reC4h+C4m+C4o+C4sOC4nuC4iOC4meC5jOC5hOC4lOC5ieC4lOC5ieC4p+C4ouC4geC4suC4o+C4geC4lOC4l+C4teC5iOC4p+C4h+C4geC4peC4oeC4quC4teC5gOC4guC4teC4ouC4pw0KDQrguYDguKHguLfguYjguK3guIHguJQg4LiI4Liw4Lih4Li14Liq4Liy4Lih4Liy4Lij4LiW4LmB4LiB4LmJ4LmE4LiC4LiE4Lin4Liy4Lih4LiI4Lij4Li04LiH4LiC4Lit4LiH4Lib4Lij4Liw4Lie4LiI4LiZ4LmM4LmE4LiU4LmJ4LmD4LiZ4Lir4LiZ4LmJ4Liy4LiV4LmI4Liy4LiH4LiX4Li14LmI4Lib4Lij4Liy4LiB4LiP\"","import { Divider, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport Markdown, { Components } from \"react-markdown\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport remarkMath from \"remark-math\";\r\n\r\nconst COMPONENTS_OVERRIDE: Partial<Components> = {\r\n  h1: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h3\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h2: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h4\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h3: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h5\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  p: ({ children }) => (\r\n    <Typography gutterBottom>{children}</Typography>\r\n  ),\r\n  hr: () => (\r\n    <Divider\r\n      flexItem\r\n      sx={{ marginY: 4 }}\r\n      variant=\"middle\"\r\n    />\r\n  ),\r\n  a: ({ href, hrefLang, referrerPolicy, children }) => (\r\n    <Typography\r\n      component=\"a\"\r\n      target=\"_blank\"\r\n      href={href}\r\n      hrefLang={hrefLang}\r\n      referrerPolicy={referrerPolicy}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n};\r\n\r\n\r\ntype StyledMarkdownProps = {\r\n  children: string;\r\n};\r\nexport const StyledMarkdown: FC<StyledMarkdownProps> = (\r\n  props\r\n) => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <Markdown\r\n      components={COMPONENTS_OVERRIDE}\r\n      rehypePlugins={[\r\n        rehypeKatex,\r\n        rehypeSlug,\r\n      ]}\r\n      remarkPlugins={[remarkMath, remarkGfm]}\r\n    >\r\n      {children}\r\n    </Markdown>\r\n  );\r\n};\r\n","import UserManualBlogEN from \"$assets/blogs/UserManual/en.txt\";\r\nimport UserManualBlogTH from \"$assets/blogs/UserManual/th.txt\";\r\nimport { StyledMarkdown } from \"$components/styled/StyledMarkdown\";\r\nimport { Container } from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const TheoremView: FC = () => {\r\n  const { i18n } = useTranslation();\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      i18n.language === \"th\"\r\n        ? UserManualBlogTH\r\n        : UserManualBlogEN\r\n    )\r\n      .then((response) => response.text())\r\n      .then((text) => setContent(text));\r\n  }, [i18n.language]);\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <StyledMarkdown>{content}</StyledMarkdown>\r\n    </Container>\r\n  );\r\n};\r\n","import {\r\n  ExprTreeBinary,\r\n  ExprTreeConst,\r\n  ExprTreeIden,\r\n  ExprTreeUnary,\r\n} from \"$types/expression-tree\";\r\nimport {\r\n  Operator,\r\n  SymbolTable,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/syntax-tree\";\r\n\r\nconst OPERATOR_REPR: Record<Operator, string> = {\r\n  [Operator.AND]: `\\\\land`,\r\n  [Operator.OR]: `\\\\lor`,\r\n  [Operator.IFF]: `\\\\iff`,\r\n  [Operator.IMPL]: `\\\\implies`,\r\n  [Operator.NOT]: `\\\\lnot`,\r\n};\r\n\r\ntype EvalFn = (t: SymbolTable) => boolean;\r\nconst OPERATOR_EVAL_FN: Record<\r\n  Exclude<Operator, Operator.NOT>,\r\n  (l: EvalFn, r: EvalFn) => (t: SymbolTable) => boolean\r\n> = {\r\n  [Operator.AND]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) && r(t),\r\n  [Operator.OR]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) || r(t),\r\n  [Operator.IMPL]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      !l(t) || r(t),\r\n  [Operator.IFF]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) === r(t),\r\n};\r\n\r\nconst _syntaxTreeToLatex = (tree: SyntaxTree): string => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    return tree.symbol;\r\n  }\r\n  if (nodeType === SyntaxTreeNodeKind.CONST) {\r\n    return tree.value ? `\\\\top` : `\\\\bot`;\r\n  }\r\n\r\n  if (nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    const { operand } = tree;\r\n    const value = _syntaxTreeToLatex(operand);\r\n    if (\r\n      operand.nodeType === SyntaxTreeNodeKind.IDEN ||\r\n      operand.nodeType === SyntaxTreeNodeKind.CONST\r\n    ) {\r\n      return `\\\\lnot ${value}`;\r\n    }\r\n    return `\\\\lnot (${value})`;\r\n  }\r\n\r\n  const { left, right } = tree;\r\n\r\n  let labelLeft = _syntaxTreeToLatex(left);\r\n  if (left.nodeType === SyntaxTreeNodeKind.BINARY) {\r\n    labelLeft = `( ${labelLeft} )`;\r\n  }\r\n\r\n  let labelRight = _syntaxTreeToLatex(right);\r\n  if (right.nodeType === SyntaxTreeNodeKind.BINARY) {\r\n    labelRight = `( ${labelRight} )`;\r\n  }\r\n\r\n  const repr = OPERATOR_REPR[tree.operator];\r\n  return `${labelLeft} ${repr} ${labelRight}`;\r\n};\r\n\r\nexport const syntaxTreeToLatex = (tree: SyntaxTree) => {\r\n  return _syntaxTreeToLatex(tree);\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  orderStart: number\r\n) => {\r\n  const { nodeType } = tree;\r\n\r\n  switch (nodeType) {\r\n    case SyntaxTreeNodeKind.CONST: {\r\n      const node: ExprTreeConst = {\r\n        eval: () => tree.value,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: tree.value ? \"\\\\top\" : `\\\\bot`,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeKind.IDEN: {\r\n      const node: ExprTreeIden = {\r\n        eval: (t) => t.get(tree.symbol) ?? false,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: tree.symbol,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeKind.UNARY: {\r\n      const child = _syntaxTreetoExprTree(\r\n        tree.operand,\r\n        orderStart\r\n      );\r\n      const node: ExprTreeUnary = {\r\n        repr: OPERATOR_REPR[tree.operator],\r\n        child,\r\n        nodeType,\r\n        eval: (t) => !child.eval(t),\r\n        order: child.order + 1,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeKind.BINARY: {\r\n      const left = _syntaxTreetoExprTree(\r\n        tree.left,\r\n        orderStart\r\n      );\r\n      const right = _syntaxTreetoExprTree(\r\n        tree.right,\r\n        left.order\r\n      );\r\n      const node: ExprTreeBinary = {\r\n        nodeType,\r\n        eval: OPERATOR_EVAL_FN[tree.operator](\r\n          left.eval,\r\n          right.eval\r\n        ),\r\n        left,\r\n        right,\r\n        order: right.order + 1,\r\n        repr: OPERATOR_REPR[tree.operator],\r\n      };\r\n      return node;\r\n    }\r\n  }\r\n};\r\n\r\nexport const syntaxTreetoExprTree = (tree: SyntaxTree) => {\r\n  return _syntaxTreetoExprTree(tree, 0);\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SyntaxTreeNodeKind } from \"$types/syntax-tree\";\r\n\r\nconst _exprTreeCollectSymbols = (\r\n  tree: ExprTree,\r\n  symbols: Set<string>\r\n): void => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      symbols.add(tree.repr);\r\n      return;\r\n    case SyntaxTreeNodeKind.UNARY:\r\n      _exprTreeCollectSymbols(tree.child, symbols);\r\n      return;\r\n    case SyntaxTreeNodeKind.BINARY:\r\n      _exprTreeCollectSymbols(tree.left, symbols);\r\n      _exprTreeCollectSymbols(tree.right, symbols);\r\n      return;\r\n  }\r\n};\r\n\r\nexport const exprTreeCollectSymbols = (\r\n  exprTree: ExprTree\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  _exprTreeCollectSymbols(exprTree, symbols);\r\n  return symbols;\r\n};\r\n","import { SxProps, Typography } from \"@mui/material\";\r\nimport katex, { KatexOptions } from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  options?: KatexOptions;\r\n  sx?: SxProps;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { sx, tex, options } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, options);\r\n    }\r\n  }, [ref, tex, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      component=\"span\"\r\n      sx={sx}\r\n    />\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\nconst OPERATOR: {\r\n  name: string;\r\n  label: string;\r\n  shiftChar: string;\r\n  char: string;\r\n}[] = [\r\n  {\r\n    name: \"negation\",\r\n    label: \"\\\\text{not, $\\\\lnot$}\",\r\n    shiftChar: \"\\u{00AC}\",\r\n    char: \"not\",\r\n  },\r\n  {\r\n    name: \"conjunction\",\r\n    label: \"\\\\text{and, $\\\\land$}\",\r\n    shiftChar: \"\\u{2227}\",\r\n    char: \"and\",\r\n  },\r\n  {\r\n    name: \"disjunction\",\r\n    label: \"\\\\text{or, $\\\\lor$}\",\r\n    shiftChar: \"\\u{2228}\",\r\n    char: \"or\",\r\n  },\r\n  {\r\n    name: \"implication\",\r\n    label: \"\\\\text{implies, $\\\\implies$}\",\r\n    shiftChar: \"\\u{21D2}\",\r\n    char: \"implies\",\r\n  },\r\n  {\r\n    name: \"equivalence\",\r\n    label: \"\\\\text{iff, $\\\\iff$}\",\r\n    shiftChar: \"\\u{21D4}\",\r\n    char: \"iff\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonProps = {\r\n  onInsertChar: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { breakpoints } = useTheme();\r\n\r\n  const { onInsertChar } = props;\r\n  return (\r\n    <ButtonGroup\r\n      disableElevation\r\n      variant=\"outlined\"\r\n      orientation={\r\n        breakpoints.down(\"md\") ? \"vertical\" : \"horizontal\"\r\n      }\r\n    >\r\n      {OPERATOR.map((btn, index) => (\r\n        <Button\r\n          key={\"insert-btn-\" + index}\r\n          sx={{\r\n            textTransform: \"none\",\r\n          }}\r\n          onClick={(e) => {\r\n            onInsertChar(\r\n              e.shiftKey ? btn.shiftChar : btn.char\r\n            );\r\n          }}\r\n        >\r\n          <StyledLatex tex={btn.label} />\r\n        </Button>\r\n      ))}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n","import { Stack, TextField } from \"@mui/material\";\r\nimport { Dispatch, FC, useRef } from \"react\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\n\r\ntype EditorProps = {\r\n  placeholder: string;\r\n  name?: string;\r\n  value: string;\r\n  onChange: Dispatch<string>;\r\n};\r\nexport const Editor: FC<EditorProps> = (props) => {\r\n  const { name, placeholder, value, onChange } = props;\r\n\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    onChange(`${value} ${char} `);\r\n    if (inputRef !== null && inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon onInsertChar={handleInsertChar} />\r\n      <TextField\r\n        inputRef={inputRef}\r\n        fullWidth\r\n        multiline\r\n        rows={5}\r\n        value={value}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        placeholder={placeholder}\r\n        name={name}\r\n        slotProps={{\r\n          input: {\r\n            autoCapitalize: \"off\",\r\n            spellCheck: \"false\",\r\n            sx: {\r\n              fontFamily: \"monospace\",\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n\r\n// <Stack\r\n// useFlexGap\r\n// alignItems=\"center\"\r\n// width=\"100%\"\r\n// spacing={2}\r\n// direction=\"row\"\r\n// flexWrap=\"wrap\"\r\n// >\r\n// <Button\r\n//   type=\"submit\"\r\n//   disableElevation\r\n//   variant=\"contained\"\r\n//   startIcon={<PlayArrowRounded />}\r\n//   onClick={handleExecute}\r\n// >\r\n//   {t(\"component.common.editor.run.label\")}\r\n// </Button>\r\n// <Typography>\r\n//   {t(\"component.common.editor.run.alt\")}\r\n// </Typography>\r\n// </Stack>\r\n","import {\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledIconButtonProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  onKeyPress: (e: KeyboardEvent<HTMLButtonElement>) => void;\r\n};\r\nexport const StyledIconButton: FC<StyledIconButtonProps> = (\r\n  props\r\n) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip\r\n      placement=\"top\"\r\n      title={<Typography>{title}</Typography>}\r\n    >\r\n      <span>\r\n        <IconButton\r\n          disableRipple={disabled}\r\n          color=\"primary\"\r\n          onClick={onClick}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { StyledIconButton } from \"$components/styled/StyledIconButton\";\r\nimport {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype PlaygroundPlaybackControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n};\r\nexport const PlaygroundPlaybackControl: FC<\r\n  PlaygroundPlaybackControlProps\r\n> = (props) => {\r\n  const { maxValue, minValue, onChange, value } = props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"playground.playback\",\r\n  });\r\n\r\n  const handleForward = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  const handleKeyPress = (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      handleForward();\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      handleRewind();\r\n    }\r\n  };\r\n\r\n  // There is a possibility for the ui to fall apart due to overflow\r\n  // **IF** the order is large enough eg 20 digits long\r\n  // in such a case, the label would over and pushes the forward arrow\r\n  // and the slider out of view\r\n  // but let's be real, we run into other problem any way\r\n  // if the evaluation of a tree that large\r\n  const maxLabel = maxValue.toString();\r\n  const valueLabel = value\r\n    .toString()\r\n    .padStart(maxLabel.length, \"0\");\r\n  const label = `${valueLabel}/${maxLabel}`;\r\n\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={1}\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n    >\r\n      <StyledIconButton\r\n        disabled={value <= minValue}\r\n        title={t(\"rewind\")}\r\n        onClick={handleRewind}\r\n        onKeyPress={handleKeyPress}\r\n      >\r\n        <KeyboardArrowLeftRounded />\r\n      </StyledIconButton>\r\n      <Typography fontFamily=\"monospace\">\r\n        {label}\r\n      </Typography>\r\n      <StyledIconButton\r\n        disabled={value >= maxValue}\r\n        title={t(\"forward\")}\r\n        onKeyPress={handleKeyPress}\r\n        onClick={handleForward}\r\n      >\r\n        <KeyboardArrowRightRounded />\r\n      </StyledIconButton>\r\n      <Slider\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Fab, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactElement } from \"react\";\r\n\r\ntype StyledFABProps = {\r\n  title: string;\r\n  onClick: () => void;\r\n  children: ReactElement;\r\n};\r\nexport const StyledFAB: FC<StyledFABProps> = (props) => {\r\n  const { children, onClick, title } = props;\r\n  return (\r\n    <Fab\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: 16,\r\n        bottom: 16,\r\n      }}\r\n    >\r\n      <Tooltip\r\n        placement=\"right\"\r\n        title={<Typography>{title}</Typography>}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    </Fab>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  order: number;\r\n  symbolTable: SymbolTable;\r\n  r: number;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const { r, order, node, symbolTable } = props;\r\n  const { t } = useTranslation();\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.repr)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.repr]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      opacity={isNodeVisibleNow ? 1 : 0.5}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        stroke={palette.primary.light}\r\n        strokeOpacity={0.8}\r\n        r={r}\r\n        fill={palette.secondary.light}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        color={palette.secondary.contrastText}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n      <Group\r\n        visibility={\r\n          data.order < order ? \"visible\" : \"hidden\"\r\n        }\r\n        transform={`translate(${r / 3}, ${r / 3})`}\r\n      >\r\n        <rect\r\n          width={60}\r\n          height={30}\r\n          rx={5}\r\n          ry={5}\r\n          fill={palette.secondary.light}\r\n        />\r\n        <text\r\n          x=\"30\"\r\n          y=\"22\"\r\n          fillOpacity={0.5}\r\n          textAnchor=\"middle\"\r\n          pointerEvents=\"none\"\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          {data.eval(symbolTable)\r\n            ? t(\"common.true\")\r\n            : t(\"common.false\")}\r\n        </text>\r\n      </Group>\r\n    </Group>\r\n  );\r\n};\r\n","import { StyledFAB } from \"$components/styled/StyledFAB\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/syntax-tree\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport { Box } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC, Fragment, KeyboardEvent, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TreeGraphLink } from \"./TreeGraphLink\";\r\nimport { TreeGraphNode } from \"./TreeGraphNode\";\r\n\r\nconst flatten_expr = (d: ExprTree) => {\r\n  switch (d.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return null;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      return null;\r\n    case SyntaxTreeNodeKind.UNARY:\r\n      return [d.child];\r\n    case SyntaxTreeNodeKind.BINARY:\r\n      return [d.left, d.right];\r\n  }\r\n};\r\n\r\ntype TreeGraphProps = {\r\n  symbolTable: SymbolTable;\r\n  tree: ExprTree;\r\n  order: number;\r\n  onKeyDown: (e: KeyboardEvent<SVGSVGElement>) => void;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const { tree, order, onKeyDown, symbolTable } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const viewportRef = useRef<HTMLDivElement | null>(null);\r\n  const data = hierarchy(tree, flatten_expr);\r\n\r\n  const viewportWidth =\r\n    viewportRef.current === null\r\n      ? 0\r\n      : viewportRef.current.getBoundingClientRect().width;\r\n\r\n  const viewportHeight =\r\n    viewportRef.current === null\r\n      ? 0\r\n      : viewportRef.current.getBoundingClientRect().height;\r\n\r\n  const treeWidth = (data.leaves().length + 1) * 150;\r\n  const treeHeight = (data.height + 1) * 100;\r\n  const nodeRadius = 30;\r\n\r\n  return (\r\n    <Box\r\n      ref={viewportRef}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      position=\"relative\"\r\n    >\r\n      <Zoom<SVGSVGElement>\r\n        width={viewportWidth}\r\n        height={viewportHeight}\r\n        scaleXMin={1 / 10}\r\n        scaleXMax={1}\r\n        scaleYMin={1 / 10}\r\n        scaleYMax={1}\r\n      >\r\n        {(zoom) => (\r\n          <Fragment>\r\n            <svg\r\n              tabIndex={0} // Need tabindex otherwise svg will not send keyboard event\r\n              width={viewportWidth}\r\n              height={viewportHeight}\r\n              ref={zoom.containerRef}\r\n              onKeyDown={onKeyDown}\r\n              style={{\r\n                touchAction: \"none\",\r\n                cursor: zoom.isDragging\r\n                  ? \"grabbing\"\r\n                  : \"grab\",\r\n              }}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={zoom.dragEnd}\r\n              onMouseLeave={zoom.dragEnd}\r\n            >\r\n              <Group transform={zoom.toString()}>\r\n                <Tree\r\n                  root={data}\r\n                  size={[treeWidth, -treeHeight]}\r\n                >\r\n                  {(treeHeir) => (\r\n                    <Group\r\n                      top={treeHeight + nodeRadius * 1.5}\r\n                    >\r\n                      {treeHeir.links().map((link, i) => (\r\n                        <TreeGraphLink\r\n                          key={`link-${i}`}\r\n                          order={order}\r\n                          link={link}\r\n                        />\r\n                      ))}\r\n                      {treeHeir\r\n                        .descendants()\r\n                        .map((node, i) => (\r\n                          <TreeGraphNode\r\n                            key={`node-${i}`}\r\n                            order={order}\r\n                            node={node}\r\n                            symbolTable={symbolTable}\r\n                            r={nodeRadius}\r\n                          />\r\n                        ))}\r\n                    </Group>\r\n                  )}\r\n                </Tree>\r\n              </Group>\r\n            </svg>\r\n            <StyledFAB\r\n              onClick={zoom.center}\r\n              title={t(\"playground.graph.center\")}\r\n            >\r\n              <ControlCameraRounded />\r\n            </StyledFAB>\r\n          </Fragment>\r\n        )}\r\n      </Zoom>\r\n    </Box>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { Paper, Stack } from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  KeyboardEvent,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { PlaygroundPlaybackControl } from \"./PlaygroundPlaybackControl\";\r\nimport { TreeGraph } from \"./TreeGraph/TreeGraph\";\r\n\r\ntype PlaygroundProps = {\r\n  exprTree: ExprTree;\r\n  symbolTable: SymbolTable;\r\n};\r\nexport const Playground: FC<PlaygroundProps> = (props) => {\r\n  const { exprTree, symbolTable } = props;\r\n  const [step, setStep] = useState(1);\r\n  const [maxStep, setMaxStep] = useState(1);\r\n\r\n  useEffect(() => {\r\n    setStep(1);\r\n    setMaxStep(exprTree.order + 1);\r\n  }, [exprTree]);\r\n\r\n  const handleGraphKeyPress = (\r\n    e: KeyboardEvent<SVGSVGElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      setStep((prev) => Math.min(maxStep, prev + 1));\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      setStep((prev) => Math.max(1, prev - 1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={{\r\n          height: \"75vh\",\r\n          width: \"100%\",\r\n          borderRadius: ({ shape }) => shape.borderRadius,\r\n        }}\r\n      >\r\n        <TreeGraph\r\n          order={step}\r\n          tree={exprTree}\r\n          onKeyDown={handleGraphKeyPress}\r\n          symbolTable={symbolTable}\r\n        />\r\n      </Paper>\r\n      <PlaygroundPlaybackControl\r\n        maxValue={maxStep}\r\n        minValue={1}\r\n        value={step}\r\n        onChange={setStep}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Alert, AlertProps, useTheme } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\nexport const StyledAlert: FC<AlertProps> = (props) => {\r\n  const { sx, ...rest } = props;\r\n  const { shape } = useTheme();\r\n  return (\r\n    <Alert\r\n      icon={false}\r\n      {...rest}\r\n      sx={{\r\n        borderRadius: shape.borderRadius,\r\n        padding: 4,\r\n        ...sx,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { SymbolTable } from \"$types/syntax-tree\";\r\n\r\nexport const getPermutation = (\r\n  size: number,\r\n  symbols: string[]\r\n) => {\r\n  const perm: SymbolTable[] = [];\r\n  const permSize = 1 << size;\r\n  for (let i = 0; i < permSize; i++) {\r\n    const repr = i.toString(2).padStart(size, \"0\");\r\n    const p = new Map<string, boolean>();\r\n    for (let j = 0; j < size; j++) {\r\n      p.set(symbols[j], repr[j] === \"1\");\r\n    }\r\n    perm.push(p);\r\n  }\r\n  return perm;\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SyntaxTreeNodeKind } from \"$types/syntax-tree\";\r\n\r\nconst _exprTreeToLatex = (tree: ExprTree): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return tree.repr;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      return tree.repr;\r\n    case SyntaxTreeNodeKind.UNARY: {\r\n      const child = _exprTreeToLatex(tree.child);\r\n      if (\r\n        tree.child.nodeType === SyntaxTreeNodeKind.BINARY\r\n      ) {\r\n        return `${tree.repr} ( ${child} )`;\r\n      }\r\n      return `${tree.repr} ${child}`;\r\n    }\r\n    case SyntaxTreeNodeKind.BINARY: {\r\n      let left = _exprTreeToLatex(tree.left);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeKind.BINARY\r\n      ) {\r\n        left = `( ${left} )`;\r\n      }\r\n\r\n      let right = _exprTreeToLatex(tree.right);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeKind.BINARY\r\n      ) {\r\n        right = `( ${right} )`;\r\n      }\r\n\r\n      return `${left} ${tree.repr} ${right}`;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeToLatex = (exprTree: ExprTree) => {\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/syntax-tree\";\r\nimport { exprTreeToLatex } from \"./expr/latex\";\r\n\r\ntype MinifiedSyntaxTree = {\r\n  repr: string;\r\n  eval: (t: SymbolTable) => boolean;\r\n};\r\nconst traversePostOrder = (\r\n  tree: ExprTree,\r\n  accum: MinifiedSyntaxTree[],\r\n  seen: Set<string>\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      return;\r\n    case SyntaxTreeNodeKind.UNARY: {\r\n      const repr = exprTreeToLatex(tree);\r\n      if (seen.has(repr)) {\r\n        return;\r\n      }\r\n      seen.add(repr);\r\n      traversePostOrder(tree.child, accum, seen);\r\n      const minified: MinifiedSyntaxTree = {\r\n        eval: tree.eval,\r\n        repr,\r\n      };\r\n      accum.push(minified);\r\n      return;\r\n    }\r\n    case SyntaxTreeNodeKind.BINARY: {\r\n      const repr = exprTreeToLatex(tree);\r\n      if (seen.has(repr)) {\r\n        return;\r\n      }\r\n      seen.add(repr);\r\n      traversePostOrder(tree.left, accum, seen);\r\n      traversePostOrder(tree.right, accum, seen);\r\n\r\n      const minified: MinifiedSyntaxTree = {\r\n        eval: tree.eval,\r\n        repr,\r\n      };\r\n      accum.push(minified);\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeFlattenPostOrder = (\r\n  tree: ExprTree\r\n) => {\r\n  const accum: MinifiedSyntaxTree[] = [];\r\n  const seen = new Set<string>();\r\n  traversePostOrder(tree, accum, seen);\r\n  return accum;\r\n};\r\n","import { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { getPermutation } from \"$core/eval\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeFlattenPostOrder } from \"$core/tree/flatten\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  alpha,\r\n  Button,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype StyledTableCellProps = { value: boolean };\r\nconst StyledTableCell: FC<StyledTableCellProps> = (\r\n  props\r\n) => {\r\n  const { value } = props;\r\n  const { t } = useTranslation();\r\n  const { palette } = useTheme();\r\n\r\n  return (\r\n    <TableCell\r\n      align=\"center\"\r\n      sx={{\r\n        backgroundColor: value\r\n          ? alpha(palette.secondary.light, 0.8)\r\n          : alpha(palette.secondary.main, 0.2),\r\n      }}\r\n    >\r\n      <Typography>\r\n        {value ? t(\"common.true\") : t(\"common.false\")}\r\n      </Typography>\r\n    </TableCell>\r\n  );\r\n};\r\n\r\ntype TruthTableProps = {\r\n  exprTree: ExprTree;\r\n};\r\nexport const TruthTable: FC<TruthTableProps> = (props) => {\r\n  const { exprTree } = props;\r\n  const { t } = useTranslation();\r\n  const [userConfirmed, setUserConfirmed] = useState(false);\r\n  const { columns, symbols } = useMemo(() => {\r\n    const _columns = exprTreeFlattenPostOrder(exprTree);\r\n    const _symbols = [...exprTreeCollectSymbols(exprTree)];\r\n    _symbols.sort();\r\n    return { columns: _columns, symbols: _symbols };\r\n  }, [exprTree]);\r\n\r\n  const perm = useMemo(() => {\r\n    if (symbols.length > 3 && !userConfirmed) {\r\n      return [];\r\n    }\r\n    return getPermutation(symbols.length, symbols);\r\n  }, [symbols, userConfirmed]);\r\n\r\n  if (symbols.length > 3 && !userConfirmed) {\r\n    return (\r\n      <Stack spacing={1}>\r\n        <StyledAlert severity=\"warning\">\r\n          <Typography>\r\n            {t(\"common.truthTable.warning\")}\r\n          </Typography>\r\n        </StyledAlert>\r\n        <Button\r\n          sx={{\r\n            width: \"fit-content\",\r\n          }}\r\n          disableElevation\r\n          disableRipple\r\n          variant=\"contained\"\r\n          onClick={() => setUserConfirmed(true)}\r\n        >\r\n          {t(\"common.truthTable.confirm\")}\r\n        </Button>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TableContainer\r\n      sx={{\r\n        maxHeight: 600,\r\n        overflowY: \"auto\",\r\n      }}\r\n    >\r\n      <Table stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            {symbols.map((sym, index) => (\r\n              <TableCell\r\n                key={\"sym\" + index}\r\n                align=\"center\"\r\n                sx={{\r\n                  backgroundColor: ({ palette }) =>\r\n                    palette.background.paper,\r\n                }}\r\n              >\r\n                <StyledLatex tex={sym} />\r\n              </TableCell>\r\n            ))}\r\n            {columns.map((col, index) => (\r\n              <TableCell\r\n                key={\"subexpr\" + index}\r\n                align=\"center\"\r\n                sx={{\r\n                  backgroundColor: ({ palette }) =>\r\n                    palette.background.paper,\r\n                }}\r\n              >\r\n                <StyledLatex tex={col.repr} />\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {perm.map((p, index) => (\r\n            <TableRow key={\"perm\" + index}>\r\n              {symbols.map((sym, index) => (\r\n                <StyledTableCell\r\n                  key={\"sym\" + index}\r\n                  value={p.get(sym) || false}\r\n                />\r\n              ))}\r\n              {columns.map((subExpr, colIndex) => (\r\n                <StyledTableCell\r\n                  key={\"col\" + colIndex}\r\n                  value={subExpr.eval(p)}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/syntax-tree\";\r\nimport { exprTreeToLatex } from \"./tree/expr/latex\";\r\n\r\nexport type EvaluationStep = {\r\n  repr: string;\r\n  substitutions: {\r\n    substituted: string;\r\n    repr: string;\r\n    step: number;\r\n    evaluated: boolean;\r\n  }[];\r\n  evaluated: boolean;\r\n};\r\n\r\n// const substitute = (\r\n//   tree: ExprTree,\r\n//   table: SymbolTable\r\n// ): string => {\r\n//   switch (tree.nodeType) {\r\n//     case SyntaxTreeNodeKind.CONST:\r\n//     case SyntaxTreeNodeKind.IDEN:\r\n//       return tree.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n//     case SyntaxTreeNodeKind.UNARY: {\r\n//       const { child } = tree;\r\n//       let repr = child.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n\r\n//       if (\r\n//         child.nodeType === SyntaxTreeNodeKind.UNARY ||\r\n//         child.nodeType === SyntaxTreeNodeKind.BINARY\r\n//       ) {\r\n//         repr = `\\\\lnot ( ${repr} )`;\r\n//       } else {\r\n//         repr = `\\\\lnot ${repr} `;\r\n//       }\r\n//       return repr;\r\n//     }\r\n//     case SyntaxTreeNodeKind.BINARY: {\r\n//       const { right, left } = tree;\r\n\r\n//       let leftRepr = left.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n//       switch (left.nodeType) {\r\n//         case SyntaxTreeNodeKind.UNARY:\r\n//         case SyntaxTreeNodeKind.BINARY:\r\n//           leftRepr = `( ${leftRepr} )`;\r\n//       }\r\n\r\n//       let rightRepr = right.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n//       switch (right.nodeType) {\r\n//         case SyntaxTreeNodeKind.UNARY:\r\n//         case SyntaxTreeNodeKind.BINARY:\r\n//           rightRepr = `( ${rightRepr} )`;\r\n//       }\r\n\r\n//       return `${leftRepr} ${tree.repr} ${rightRepr}`;\r\n//     }\r\n//   }\r\n// };\r\n\r\nconst traverse = (\r\n  tree: ExprTree,\r\n  table: SymbolTable,\r\n  steps: EvaluationStep[]\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      return;\r\n    case SyntaxTreeNodeKind.UNARY: {\r\n      const { child } = tree;\r\n\r\n      const childEval = child.eval(table);\r\n      let childStep = 0;\r\n      let childRepr = `\r\n      \\\\text{${childEval ? \"True\" : \"False\"}}\r\n      `;\r\n      if (\r\n        child.nodeType !== SyntaxTreeNodeKind.CONST &&\r\n        child.nodeType !== SyntaxTreeNodeKind.IDEN\r\n      ) {\r\n        traverse(child, table, steps);\r\n        childStep = steps.length;\r\n        childRepr = `( ${childRepr} )`;\r\n      }\r\n\r\n      // not (x and y)\r\n      // From (9), x and y === True\r\n      // not True\r\n      // False\r\n\r\n      steps.push({\r\n        repr: exprTreeToLatex(tree),\r\n        substitutions: [\r\n          {\r\n            repr: exprTreeToLatex(child),\r\n            evaluated: childEval,\r\n            step: childStep,\r\n            substituted: `\\\\lnot ${childRepr}`,\r\n          },\r\n        ],\r\n        evaluated: tree.eval(table),\r\n      });\r\n      break;\r\n    }\r\n    case SyntaxTreeNodeKind.BINARY: {\r\n      const { right, left } = tree;\r\n\r\n      const leftEval = left.eval(table);\r\n      const leftSubstituted = `\r\n      \\\\text{${leftEval ? \"True\" : \"False\"}}\r\n      `;\r\n      let leftStep: number = 0;\r\n      if (\r\n        left.nodeType !== SyntaxTreeNodeKind.CONST &&\r\n        left.nodeType !== SyntaxTreeNodeKind.IDEN\r\n      ) {\r\n        traverse(left, table, steps);\r\n        leftStep = steps.length;\r\n        // leftSubstituted = ` ( ${leftSubstituted} )`;\r\n      }\r\n\r\n      const rightEval = right.eval(table);\r\n      const rightRawRepr = exprTreeToLatex(right);\r\n      let rightRepr = rightRawRepr;\r\n      const rightSubstituted = `\r\n      \\\\text{${rightEval ? \"True\" : \"False\"}}`;\r\n      let rightStep: number = 0;\r\n      if (\r\n        right.nodeType !== SyntaxTreeNodeKind.CONST &&\r\n        right.nodeType !== SyntaxTreeNodeKind.IDEN\r\n      ) {\r\n        traverse(right, table, steps);\r\n        rightStep = steps.length;\r\n        rightRepr = `( ${rightRepr} )`;\r\n        // rightSubstituted = `( ${rightSubstituted} )`;\r\n      }\r\n\r\n      // (x and y) and (y and z)\r\n      // From (9), x and y === True\r\n      // True and (y and z)\r\n      // From (10), y and z === True\r\n      // True and True\r\n      // True\r\n\r\n      steps.push({\r\n        repr: exprTreeToLatex(tree),\r\n        evaluated: tree.eval(table),\r\n        substitutions: [\r\n          {\r\n            repr: exprTreeToLatex(left),\r\n            evaluated: leftEval,\r\n            step: leftStep,\r\n            substituted: `${leftSubstituted} ${tree.repr} ${rightRepr}`,\r\n          },\r\n          {\r\n            repr: rightRawRepr,\r\n            evaluated: rightEval,\r\n            step: rightStep,\r\n            substituted: `${leftSubstituted} ${tree.repr} ${rightSubstituted}`,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeFlattenStepByStep = (\r\n  tree: ExprTree,\r\n  symbolTable: SymbolTable\r\n) => {\r\n  const steps: EvaluationStep[] = [];\r\n  traverse(tree, symbolTable, steps);\r\n  return steps;\r\n};\r\n","import { SymbolTable } from \"$types/syntax-tree\";\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid2,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"../../styled/StyledLatex\";\r\n\r\ntype PlaygroundSymbolConfig = {\r\n  symbolTable: SymbolTable;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const PlaygroundSymbolConfig: FC<\r\n  PlaygroundSymbolConfig\r\n> = (props) => {\r\n  const { symbolTable, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"translation\");\r\n\r\n  const symbols = [...symbolTable.keys()];\r\n  symbols.sort();\r\n\r\n  return (\r\n    <Grid2\r\n      container\r\n      width=\"100%\"\r\n      spacing={2}\r\n      sx={{\r\n        maxHeight: 400,\r\n        overflowY: \"auto\",\r\n      }}\r\n    >\r\n      {symbols.map((sym) => (\r\n        <Grid2\r\n          key={\"symbol-\" + sym}\r\n          size={{ xs: 12, md: 6 }}\r\n        >\r\n          <FormControl fullWidth>\r\n            <FormLabel\r\n              sx={{\r\n                overflowX: \"auto\",\r\n                scrollbarGutter: \"stable\",\r\n                scrollbarWidth: \"thin\",\r\n              }}\r\n            >\r\n              <StyledLatex tex={sym} />\r\n            </FormLabel>\r\n            <RadioGroup\r\n              row\r\n              value={symbolTable.get(sym) ? \"1\" : \"0\"}\r\n              onChange={(e) =>\r\n                onChange(sym, e.target.value === \"1\")\r\n              }\r\n            >\r\n              <FormControlLabel\r\n                control={<Radio disableRipple />}\r\n                value=\"1\"\r\n                label={t(\r\n                  \"component.playground.config.true\"\r\n                )}\r\n              />\r\n              <FormControlLabel\r\n                control={<Radio disableRipple />}\r\n                value=\"0\"\r\n                label={t(\r\n                  \"component.playground.config.false\"\r\n                )}\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Grid2>\r\n      ))}\r\n    </Grid2>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { EvaluationStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { Divider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\n\r\ntype StepByStepEvaluationProps = {\r\n  steps: EvaluationStep[];\r\n};\r\nexport const StepByStepEvaluation: FC<\r\n  StepByStepEvaluationProps\r\n> = (props) => {\r\n  const { steps } = props;\r\n\r\n  if (steps.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Stack>\r\n      <Stack\r\n        spacing={1}\r\n        divider={<Divider />}\r\n      >\r\n        {steps.map((step, index) => (\r\n          <Stack\r\n            key={\"step\" + index}\r\n            spacing={2}\r\n          >\r\n            <Typography fontWeight=\"bold\">\r\n              Step {index + 1}\r\n            </Typography>\r\n            <Stack direction=\"row\">\r\n              <StyledLatex\r\n                tex={step.repr}\r\n                sx={{\r\n                  overflowX: \"auto\",\r\n                  scrollbarGutter: \"stable\",\r\n                  scrollbarWidth: \"thin\",\r\n                  whiteSpace: \"nowrap\",\r\n                  flexGrow: 1,\r\n                  textAlign: \"center\",\r\n                }}\r\n              />\r\n              <StyledLatex tex={`(${index + 1}.a)`} />\r\n            </Stack>\r\n            {step.substitutions.length > 0 && (\r\n              <Fragment>\r\n                {step.substitutions.map(\r\n                  (substitution, subIndex) => (\r\n                    <Stack\r\n                      key={\"sub-step\" + index + subIndex}\r\n                    >\r\n                      <StyledLatex\r\n                        tex={`\r\n                            \\\\text{${\r\n                              substitution.step === 0\r\n                                ? `Given`\r\n                                : `From $(${substitution.step})$`\r\n                            } $${\r\n                          substitution.repr\r\n                        } \\\\equiv$ ${\r\n                          substitution.evaluated\r\n                            ? \"True\"\r\n                            : \"False\"\r\n                        }},`}\r\n                        sx={{\r\n                          overflowX: \"auto\",\r\n                          scrollbarGutter: \"stable\",\r\n                          scrollbarWidth: \"thin\",\r\n                          whiteSpace: \"nowrap\",\r\n                          flexGrow: 1,\r\n                          paddingBottom: 1,\r\n                        }}\r\n                      />\r\n                      <Stack direction=\"row\">\r\n                        <StyledLatex\r\n                          tex={`${substitution.substituted}.`}\r\n                          sx={{\r\n                            overflowX: \"auto\",\r\n                            scrollbarGutter: \"stable\",\r\n                            scrollbarWidth: \"thin\",\r\n                            whiteSpace: \"nowrap\",\r\n                            flexGrow: 1,\r\n                            textAlign: \"center\",\r\n                            paddingBottom: 1,\r\n                          }}\r\n                        />\r\n                        <StyledLatex\r\n                          tex={`(${\r\n                            index + 1\r\n                          }.${String.fromCharCode(\r\n                            97 + subIndex + 1\r\n                          )})`}\r\n                        />\r\n                      </Stack>\r\n                    </Stack>\r\n                  )\r\n                )}\r\n              </Fragment>\r\n            )}\r\n            <StyledLatex tex=\"\\text{So}\" />\r\n            <Stack\r\n              direction=\"row\"\r\n              spacing={1}\r\n            >\r\n              <StyledLatex\r\n                tex={`${step.repr} \\\\equiv \\\\text{${\r\n                  step.evaluated ? \"True\" : \"False\"\r\n                }}.`}\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  textAlign: \"center\",\r\n                  whiteSpace: \"nowrap\",\r\n                  overflow: \"auto\",\r\n                  scrollbarWidth: \"thin\",\r\n                  scrollbarGutter: \"stable\",\r\n                  paddingBottom: 1,\r\n                }}\r\n              />\r\n              <StyledLatex tex={`(${index + 1})`} />\r\n            </Stack>\r\n          </Stack>\r\n        ))}\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","import { Playground } from \"$components/math/Playground/Playground\";\r\nimport { TruthTable } from \"$components/math/TruthTable/TruthTable\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport {\r\n  EvaluationStep,\r\n  exprTreeFlattenStepByStep,\r\n} from \"$core/exprTreeFlattenStepByStep\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  memo,\r\n  ReactNode,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { PlaygroundSymbolConfig } from \"./Playground/PlaygroundSymbolConfig\";\r\nimport { StepByStepEvaluation } from \"./StepByStepEvaluation\";\r\n\r\ntype StyledCardProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n};\r\nconst StyledCard: FC<StyledCardProps> = (props) => {\r\n  const { children, title } = props;\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      sx={{\r\n        padding: 2,\r\n        borderRadius: ({ shape }) => shape.borderRadius,\r\n      }}\r\n    >\r\n      <CardHeader\r\n        title={title}\r\n        titleTypographyProps={{\r\n          fontWeight: 900,\r\n        }}\r\n      />\r\n      <CardContent>{children}</CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\ntype SolverOutputGroupProps = {\r\n  exprTree: ExprTree;\r\n  symbolSet: Set<string>;\r\n};\r\nconst SolverOutputGroup_: FC<SolverOutputGroupProps> = (\r\n  props\r\n) => {\r\n  const { exprTree, symbolSet } = props;\r\n\r\n  const [symbolTable, setSymbolTable] = useState(() => {\r\n    const next = new Map<string, boolean>();\r\n    for (const symbol of symbolSet) {\r\n      next.set(symbol, true);\r\n    }\r\n    return next;\r\n  });\r\n  const [steps, setSteps] = useState<EvaluationStep[]>(\r\n    exprTreeFlattenStepByStep(exprTree, symbolTable)\r\n  );\r\n\r\n  const handleSymbolChange = (k: string, v: boolean) => {\r\n    setSymbolTable((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n    setSteps(\r\n      exprTreeFlattenStepByStep(exprTree, symbolTable)\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const next = new Map<string, boolean>();\r\n    for (const symbol of symbolSet) {\r\n      next.set(symbol, true);\r\n    }\r\n    setSymbolTable(next);\r\n  }, [symbolSet]);\r\n\r\n  useEffect(() => {\r\n    setSteps(\r\n      exprTreeFlattenStepByStep(exprTree, symbolTable)\r\n    );\r\n  }, [exprTree, symbolTable]);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      <StyledCard title=\"Input\">\r\n        <Box\r\n          sx={{\r\n            scrollbarWidth: \"thin\",\r\n            scrollbarGutter: \"stable\",\r\n            textAlign: \"center\",\r\n            whiteSpace: \"nowrap\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <StyledLatex\r\n            tex={steps.at(-1)!.repr}\r\n            options={{ displayMode: true }}\r\n          />\r\n        </Box>\r\n      </StyledCard>\r\n      <StyledCard title=\"Output\">\r\n        <StyledLatex\r\n          tex={`\r\n            \\\\textbf{${\r\n              steps.at(-1)!.evaluated ? \"True\" : \"False\"\r\n            }}`}\r\n          options={{ displayMode: true }}\r\n        />\r\n        <PlaygroundSymbolConfig\r\n          symbolTable={symbolTable}\r\n          onChange={handleSymbolChange}\r\n        />\r\n      </StyledCard>\r\n      <StyledCard title=\"Step-by-step Evaluation\">\r\n        <StepByStepEvaluation steps={steps} />\r\n      </StyledCard>\r\n      <StyledCard title=\"Graph\">\r\n        <Playground\r\n          exprTree={exprTree}\r\n          symbolTable={symbolTable}\r\n        />\r\n      </StyledCard>\r\n      <StyledCard title=\"Truth Table\">\r\n        <TruthTable exprTree={exprTree} />\r\n      </StyledCard>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport const SolverOutputGroup = memo(\r\n  SolverOutputGroup_,\r\n  (prev, next) =>\r\n    exprTreeToLatex(prev.exprTree) ===\r\n    exprTreeToLatex(next.exprTree)\r\n);\r\n","import { Editor } from \"$components/math/Editor/Editor\";\r\nimport { SolverOutputGroup } from \"$components/math/SolverOutputGroup\";\r\nimport { SolverRouteLoaderData } from \"$types/loader-data\";\r\nimport { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  AlertTitle,\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const SolverView: FC = () => {\r\n  const { data, userInput: defaultUserInput } =\r\n    useLoaderData() as SolverRouteLoaderData;\r\n  const submit = useSubmit();\r\n  const [userInput, setUserInput] = useState(\r\n    defaultUserInput\r\n  );\r\n\r\n  useEffect(() => {\r\n    setUserInput(defaultUserInput);\r\n  }, [defaultUserInput]);\r\n\r\n  const handleSubmit = () => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/solver\",\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"lg\"\r\n      marginX={{ xs: 4, md: \"auto\" }}\r\n    >\r\n      <Stack spacing={2}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"not (p and q) iff (not p or not q)\"\r\n          name=\"content\"\r\n        />\r\n        <Button\r\n          disabled={userInput.trim().length === 0}\r\n          disableElevation\r\n          disableRipple\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          sx={{\r\n            maxWidth: \"fit-content\",\r\n          }}\r\n          onClick={handleSubmit}\r\n        >\r\n          RUN\r\n        </Button>\r\n        {data.ok && (\r\n          <SolverOutputGroup\r\n            exprTree={data.data.exprTree}\r\n            symbolSet={data.data.symbols}\r\n          />\r\n        )}\r\n        {!data.ok && defaultUserInput.trim().length > 0 && (\r\n          <Alert\r\n            severity=\"warning\"\r\n            variant=\"outlined\"\r\n          >\r\n            <AlertTitle>\r\n              <Typography>\r\n                The solver cannot understand your input.\r\n              </Typography>\r\n            </AlertTitle>\r\n            <Typography>\r\n              It seems like something is wrong with the\r\n              expression.\r\n            </Typography>\r\n          </Alert>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreetoExprTree } from \"$core/tree/conversion\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { SolverRouteLoaderData } from \"$types/loader-data\";\r\nimport { SolverView } from \"$views/SolverView\";\r\nimport { RouteObject } from \"react-router\";\r\n\r\nexport const SOLVER_ROUTE: RouteObject = {\r\n  path: \"/solver\",\r\n  element: <SolverView />,\r\n  loader: ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const userInputRaw = url.searchParams.get(\"input\");\r\n\r\n    if (\r\n      userInputRaw === null ||\r\n      userInputRaw.toString().trim().length === 0\r\n    ) {\r\n      const loaderData: SolverRouteLoaderData = {\r\n        userInput: \"\",\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const userInput = userInputRaw.toString();\r\n    const result = parse(userInput);\r\n\r\n    if (!result.ok) {\r\n      const loaderData: SolverRouteLoaderData = {\r\n        userInput,\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const { data: syntaxTree } = result;\r\n    const exprTree = syntaxTreetoExprTree(syntaxTree);\r\n    const symbols = exprTreeCollectSymbols(exprTree);\r\n    const loaderData: SolverRouteLoaderData = {\r\n      userInput,\r\n      data: {\r\n        ok: true,\r\n        data: {\r\n          exprTree,\r\n          symbols,\r\n        },\r\n      },\r\n    };\r\n    return loaderData;\r\n  },\r\n};\r\n","import { amber, brown, green } from \"@mui/material/colors\";\r\nimport {\r\n  alpha,\r\n  PaletteOptions,\r\n} from \"@mui/material/styles\";\r\n\r\nexport const PALETTE_OPTIONS: PaletteOptions = {\r\n  mode: \"light\",\r\n  primary: { main: brown[\"700\"] },\r\n  secondary: { main: green[\"100\"] },\r\n  background: { default: alpha(amber[\"50\"], 0.6) },\r\n};\r\n","import { createTheme } from \"@mui/material\";\r\nimport { PALETTE_OPTIONS } from \"./palette\";\r\n\r\nexport const THEME = createTheme({\r\n  palette: PALETTE_OPTIONS,\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: t.palette.primary.dark,\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: t.palette.primary.dark,\r\n        }),\r\n      },\r\n    },\r\n    MuiDialogActions: {\r\n      defaultProps: {\r\n        sx: { justifyContent: \"flex-start\" },\r\n      },\r\n    },\r\n  },\r\n});\r\n","import \"$core/interpreter/parser\";\r\nimport { AppbarLayout } from \"$layouts/AppbarLayout\";\r\nimport { HomeView } from \"$views/HomeView\";\r\nimport { TheoremView } from \"$views/TheoremView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  createHashRouter,\r\n  RouterProvider,\r\n} from \"react-router\";\r\nimport { SOLVER_ROUTE } from \"src/routes/solver\";\r\nimport { THEME } from \"./thene/theme\";\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nconst router = createHashRouter(\r\n  [\r\n    {\r\n      path: \"/\",\r\n      element: <AppbarLayout />,\r\n      children: [\r\n        { index: true, element: <HomeView /> },\r\n        SOLVER_ROUTE,\r\n        {\r\n          path: \"/evaluator\",\r\n          element: \"Hi\",\r\n        },\r\n        {\r\n          path: \"/theorem\",\r\n          element: <TheoremView />,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  {\r\n    basename: \"/\",\r\n  }\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={THEME}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <RouterProvider router={router} />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","export const en = {\r\n  translation: {\r\n    component: {\r\n      playground: {\r\n        config: {\r\n          true: \"True\",\r\n          false: \"False\",\r\n          editTruthValue: \"Modify propositions\",\r\n        },\r\n      },\r\n      common: {\r\n        editor: {\r\n          run: {\r\n            label: \"Run\",\r\n            alt: \"CTRL + ENTER\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    nav: {\r\n      home: \"Home\",\r\n      solver: \"Solver\",\r\n      evaluator: \"Evaluator\",\r\n      simplifier: \"Simplifier\",\r\n      checker: \"Tautology checker\",\r\n    },\r\n    view: {\r\n      home: {\r\n        launch: \"Open\",\r\n        read: \"Read\",\r\n        calculators: \"Tools\",\r\n        resources: \"Resources\",\r\n        card: {\r\n          solver: {\r\n            title: \"Solver\",\r\n            desc: \"Solve an expression with truth table, expression tree, and step-by-step calculation.\",\r\n          },\r\n          evaluator: {\r\n            title: \"Evaluator\",\r\n            desc: \"Evaluate expressions according to given truth values.\",\r\n          },\r\n          simplifier: {\r\n            title: \"Simplifier\",\r\n            desc: \"Transform an expression into an equivalent, reduced form.\",\r\n          },\r\n          checker: {\r\n            title: \"Tautology checker\",\r\n            desc: \"Check if an expression is always true.\",\r\n          },\r\n          theorem: {\r\n            title: \"Useful theorems\",\r\n            desc: \"A collection of theorems on zeroth-order logic.\",\r\n          },\r\n          about: {\r\n            title: \"Documentation\",\r\n            desc: \"Learn more about the project's implementation and design.\",\r\n          },\r\n        },\r\n      },\r\n      solver: {\r\n        truthTable: {\r\n          title: \"Truth Table\",\r\n        },\r\n        stepByStep: {\r\n          title: \"Step-by-step Evaluation\",\r\n        },\r\n        graph: {\r\n          title: \"Step-by-step\",\r\n        },\r\n        feedback: {\r\n          noExpression:\r\n            \"No expression to display. Evaluate one to see how it's interpreted!\",\r\n        },\r\n        howToUse: {\r\n          title: \"Not sure where to begin?\",\r\n          link: \"Read the Manual\",\r\n        },\r\n      },\r\n    },\r\n    common: {\r\n      truthTable: {\r\n        confirm: \"I understand\",\r\n        warning:\r\n          \"The truth table for this expression is automatically hidden due to its size. You can press the button below to show the table, but this process can take a long time to complete or even crash the application. For expressions with many propositions, truth table is not the recommemnded way to visualize them.\",\r\n      },\r\n      proposition: \"Proposition\",\r\n      truthValue: \"Truth value\",\r\n      true: \"True\",\r\n      false: \"False\",\r\n      close: \"Close\",\r\n      connectives: {\r\n        negation: \"Negation\",\r\n        conjunction: \"Conjunction\",\r\n        disjunction: \"Disjunction\",\r\n        implication: \"Implication\",\r\n        equivalence: \"Equivalence\",\r\n      },\r\n    },\r\n    editor: {\r\n      originalPanel: \"Original\",\r\n      simplifiedPanel: \"Simplified\",\r\n      howToUse: \"How to use?\",\r\n      run: \"Run\",\r\n      allowedOperatorLabel: \"Connectives to keep\",\r\n    },\r\n    playground: {\r\n      feedback: {\r\n        dialogInfo:\r\n          \"Tap on a circle to modify the truth value of the expression.\",\r\n      },\r\n      graph: {\r\n        noEvaluationToDisplay:\r\n          \"No evaluation step to display. Evaluate an expression to see steps here.\",\r\n        cannotDisplayEvaluation:\r\n          \"Cannot display evaluation step. Please check the expression and try again.\",\r\n        center: \"Center Graph\",\r\n      },\r\n      playback: {\r\n        forward: \"Forward\",\r\n        rewind: \"Rewind\",\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const th = {\r\n  translation: {\r\n    common: {\r\n      proposition: \"ประพจน์\",\r\n      truthValue: \"ค่าความจริง\",\r\n      close: \"ปิด\",\r\n      true: \"จริง\",\r\n      false: \"เท็จ\",\r\n      connectives: {\r\n        negation: \"นิเสธ\",\r\n        conjunction: \"และ\",\r\n        disjunction: \"หรือ\",\r\n        implication: \"ถ้า แล้ว\",\r\n        equivalence: \"ก็ต่อเมื่อ\",\r\n      },\r\n    },\r\n    editor: {\r\n      originalPanel: \"รูปเดิม\",\r\n      simplifiedPanel: \"รูปอย่างง่าย\",\r\n      howToUse: \"คู่มือการใช้งาน\",\r\n      run: \"คำนวณ\",\r\n      allowedOperatorLabel: \"ตัวเชื่อมที่คงไว้\",\r\n    },\r\n    playground: {\r\n      feedback: {\r\n        dialogInfo:\r\n          \"แตะที่วงลมสีเขียวเพื่อแก้ไขค่าความจริงของนิพจน์\",\r\n        empty:\r\n          \"ไม่มีประพจน์ให้แสดงในขณะนี้ คำนวณประพจน์เพื่อตรวจสอบว่าโปรแกรมตีความถูกต้องหรือไม่\",\r\n      },\r\n      graph: {\r\n        noEvaluationToDisplay:\r\n          \"ไม่มีขั้นตอนการคำนวณให้แสดงในขณะนี้ คำนวณประพจน์เพื่อแสดงขั้นตอน\",\r\n        cannotDisplayEvaluation:\r\n          \"เกิดข้อผิดพลาด ไม่สามารถแสดงขั้นตอนการคำนวณได้ กรุณาตรวจสอบประพจน์และลองคำนวณอีกครั้ง\",\r\n        center: \"กลับสู่ศูนย์กลาง\",\r\n      },\r\n\r\n      playback: {\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n        forward: \"เดินหน้า\",\r\n        rewind: \"ถอยหลัง\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","import i18next from \"i18next\";\r\nimport {\r\n  default as Backend,\r\n  default as LangDectector,\r\n} from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { en } from \"./en/translation\";\r\nimport { th } from \"./th/translation\";\r\n\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    // debug: true,\r\n    resources: {\r\n      en,\r\n      th,\r\n    },\r\n  });\r\n\r\nexport default i18next;\r\n","import { App } from \"$App/App\";\nimport \"$locales/config\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport \"$core/interpreter/grammar\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["SyntaxTreeNodeKind","Operator","collectBinaryNodes","operator","left","right","node","i","grammar","ohm.grammar","semantics","leftExpr","_","rightExpr","leftTree","rightTree","expr","_open","_close","_id","id","children","n","parse","content","m","LANGUAGES","LanguageSwitcher","i18n","t","useTranslation","anchor","setAnchor","useState","handleClose","Fragment","jsx","Tooltip","Typography","IconButton","e","TranslateRounded","Menu","shape","lang","index","selected","jsxs","MenuItem","ListItemIcon","CheckRounded","ListItemText","ToolNavDropDown","props","items","handleOpen","event","Button","KeyboardArrowDownRounded","theme","href","label","isSelected","NavLink","NAV_ITEMS","AppbarLayout","pathname","useLocation","Paper","Stack","Link","HomeRounded","Outlet","CARDS","HomeView","Masonry","title","desc","Card","palette","CardHeader","CardContent","UserManualBlogEN","COMPONENTS_OVERRIDE","Divider","hrefLang","referrerPolicy","StyledMarkdown","Markdown","rehypeKatex","rehypeSlug","remarkMath","remarkGfm","TheoremView","setContent","useEffect","UserManualBlogTH","response","text","Container","OPERATOR_REPR","OPERATOR_EVAL_FN","l","_syntaxTreetoExprTree","tree","orderStart","nodeType","child","syntaxTreetoExprTree","_exprTreeCollectSymbols","symbols","exprTreeCollectSymbols","exprTree","StyledLatex","sx","tex","options","ref","useRef","katex","OPERATOR","EditorRibbon","breakpoints","useTheme","onInsertChar","ButtonGroup","btn","Editor","name","placeholder","value","onChange","inputRef","handleInsertChar","char","TextField","StyledIconButton","onKeyPress","onClick","disabled","PlaygroundPlaybackControl","maxValue","minValue","handleForward","handleRewind","handleKeyPress","key","maxLabel","KeyboardArrowLeftRounded","KeyboardArrowRightRounded","Slider","v","StyledFAB","Fab","TreeGraphLink","link","order","source","target","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","symbolTable","x","y","data","typography","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","Group","flatten_expr","d","TreeGraph","onKeyDown","viewportRef","hierarchy","viewportWidth","viewportHeight","treeWidth","treeHeight","nodeRadius","Box","Zoom","zoom","Tree","treeHeir","ControlCameraRounded","Playground","step","setStep","maxStep","setMaxStep","handleGraphKeyPress","prev","StyledAlert","rest","Alert","getPermutation","size","perm","permSize","repr","p","j","_exprTreeToLatex","exprTreeToLatex","traversePostOrder","accum","seen","minified","exprTreeFlattenPostOrder","StyledTableCell","TableCell","alpha","TruthTable","userConfirmed","setUserConfirmed","columns","useMemo","_columns","_symbols","TableContainer","Table","TableHead","TableRow","sym","col","TableBody","subExpr","colIndex","traverse","table","steps","childEval","childStep","childRepr","leftEval","leftSubstituted","leftStep","rightEval","rightRawRepr","rightRepr","rightSubstituted","rightStep","exprTreeFlattenStepByStep","PlaygroundSymbolConfig","Grid2","FormControl","FormLabel","RadioGroup","FormControlLabel","Radio","StepByStepEvaluation","substitution","subIndex","StyledCard","SolverOutputGroup_","symbolSet","setSymbolTable","next","symbol","setSteps","handleSymbolChange","k","SolverOutputGroup","memo","SolverView","defaultUserInput","useLoaderData","submit","useSubmit","userInput","setUserInput","handleSubmit","PlayArrowRounded","AlertTitle","SOLVER_ROUTE","request","userInputRaw","loaderData","result","syntaxTree","PALETTE_OPTIONS","brown","green","amber","THEME","createTheme","globalStyles","GlobalStyles","router","createHashRouter","App","ThemeProvider","CssBaseline","RouterProvider","en","th","i18next","Backend","LangDectector","initReactI18next","createRoot","StrictMode"],"mappings":"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"}