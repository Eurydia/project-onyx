{"version":3,"file":"index-Ctq1CgHQ.js","sources":["../../src/types/operators.ts","../../src/types/syntax-tree.ts","../../src/core/interpreter/grammar.ts","../../src/core/interpreter/parser.ts","../../src/components/common/LanguageSwitcher.tsx","../../src/components/common/ToolNavDropdown.tsx","../../src/layouts/MainLayout.tsx","../../src/views/HomeView.tsx","../../src/core/syntax-tree/to-string.ts","../../src/core/syntax-tree/normalize.ts","../../src/core/tree/conversion.ts","../../src/core/tree/expr/evaluate.ts","../../src/core/tree/expr/latex.ts","../../src/components/styled/StyledLatex.tsx","../../src/components/math/Editor/EditorRibbonButton.tsx","../../src/components/math/Editor/EditorRibbon.tsx","../../src/components/math/Editor/Editor.tsx","../../src/components/styled/StyledOutputCard.tsx","../../src/views/CheckerView.tsx","../../src/routes/checker.tsx","../../src/components/math/PropositionConfig.tsx","../../src/views/EvaluatorView.tsx","../../src/routes/evaluator.tsx","../../src/core/syntax-tree/node.ts","../../src/core/syntax-tree/rewrite-rules.ts","../../src/core/syntax-tree/rewrite.ts","../../src/views/RewriteView.tsx","../../src/routes/rewriter.tsx","../../src/components/styled/StyledAlert.tsx","../../src/core/eval.ts","../../src/core/tree/flatten.ts","../../src/components/math/TruthTable/TruthTableCell.tsx","../../src/components/math/TruthTable/TruthTable.tsx","../../src/components/styled/StyledIconButton.tsx","../../src/components/math/Graph/GraphControl.tsx","../../src/components/styled/StyledFAB.tsx","../../src/components/math/Graph/TreeGraph/TreeGraphLink.tsx","../../src/components/math/Graph/TreeGraph/TreeGraphNode.tsx","../../src/components/math/Graph/TreeGraph/TreeGraph.tsx","../../src/components/math/Graph/Graph.tsx","../../src/core/exprTreeFlattenStepByStep.ts","../../src/components/math/StepByStepEvaluation/StepByStepEvaluationControl.tsx","../../src/components/math/StepByStepEvaluation/SubstitutionStepDisplay.tsx","../../src/components/math/StepByStepEvaluation/StepDisplay.tsx","../../src/components/math/StepByStepEvaluation/StepByStepEvaluation.tsx","../../src/components/math/SolverOutputGroup.tsx","../../src/views/SolverView.tsx","../../src/routes/solver.tsx","../../src/App/theme.ts","../../src/App/App.tsx","../../src/locales/en/component.ts","../../src/locales/en/translation.ts","../../src/locales/th/translation.ts","../../src/locales/config.ts","../../src/main.tsx"],"sourcesContent":["export enum Operator {\r\n  IFF = \"IFF\",\r\n  IMPL = \"IMPL\",\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  NOT = \"NOT\",\r\n}\r\n","import { Operator } from \"./operators\";\r\n\r\nexport enum SyntaxTreeNodeType {\r\n  CONST = \"CONSTANT\",\r\n  IDEN = \"IDEN\",\r\n  UNARY = \"UNARY\",\r\n  BINARY = \"BINARY\",\r\n}\r\n\r\nexport type SyntaxTreeNodeConst = {\r\n  nodeType: SyntaxTreeNodeType.CONST;\r\n  value: boolean;\r\n};\r\n\r\nexport type SyntaxTreeNodeIden = {\r\n  nodeType: SyntaxTreeNodeType.IDEN;\r\n  symbol: string;\r\n};\r\n\r\nexport type SyntaxTreeNodeBinary = {\r\n  nodeType: SyntaxTreeNodeType.BINARY;\r\n  operator:\r\n    | Operator.AND\r\n    | Operator.OR\r\n    | Operator.IMPL\r\n    | Operator.IFF;\r\n  left: SyntaxTree;\r\n  right: SyntaxTree;\r\n};\r\nexport type SyntaxTreeNodeUnary = {\r\n  nodeType: SyntaxTreeNodeType.UNARY;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type SyntaxTree =\r\n  | SyntaxTreeNodeBinary\r\n  | SyntaxTreeNodeUnary\r\n  | SyntaxTreeNodeIden\r\n  | SyntaxTreeNodeConst;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport * as ohm from \"ohm-js\";\r\n\r\nconst collectBinaryNodes = (\r\n  operator: Exclude<Operator, Operator.NOT>,\r\n  left: SyntaxTree,\r\n  right: SyntaxTree[]\r\n) => {\r\n  let node: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator,\r\n    left,\r\n    right: right[0],\r\n  };\r\n  for (let i = 1; i < right.length; i++) {\r\n    node = {\r\n      nodeType: SyntaxTreeNodeType.BINARY,\r\n      operator,\r\n      left: node,\r\n      right: right[i],\r\n    };\r\n  }\r\n  return node;\r\n};\r\n\r\nexport const grammar = ohm.grammar(String.raw`\r\nBooleanExpressions {\r\n  Expression\r\n    = Iff \r\n\r\n  Iff\r\n    = Implies (iff_sym Implies)*\r\n\r\n  Implies\r\n    = Or (implies_sym Or)*\r\n\r\n  Or\r\n    = And (or_sym And)*\r\n\r\n  And\r\n    = Not (and_sym Not)*\r\n\r\n  Not\r\n    = not_sym Not                   --not\r\n    | Primary\r\n\r\n  Primary\r\n    = \"(\" Expression \")\" --group\r\n    | true_sym    --lit_true\r\n    | false_sym   --lit_false\r\n    | identifier  --variable\r\n\r\n  identifier\r\n    = letter\r\n  \r\n  iff_sym \r\n    = \"iff\"\r\n    | \"⇔\"\r\n  \r\n  implies_sym \r\n    = \"implies\"\r\n    | \"⇒\"\r\n  \r\n  or_sym\r\n    = \"or\"\r\n    | \"∨\"\r\n\r\n  and_sym\r\n    = \"and\"\r\n    | \"∧\"\r\n  \r\n  not_sym\r\n    = \"not\"\r\n    | \"¬\"\r\n\r\n  true_sym\r\n    = \"⊤\"\r\n    | \"T\"\r\n    | \"1\"\r\n\r\n  false_sym\r\n    = \"⊥\"\r\n    | \"F\"\r\n    | \"0\"\r\n}\r\n`);\r\n\r\nexport const semantics = grammar.createSemantics();\r\nsemantics.addOperation(\"buildTree\", {\r\n  Expression(e) {\r\n    return e.buildTree();\r\n  },\r\n\r\n  Iff(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IFF,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Implies(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IMPL,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Or(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.OR,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  And(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.AND,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Not_not(_, expr) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: expr.buildTree(),\r\n    };\r\n  },\r\n\r\n  Primary_group(_open, expr, _close) {\r\n    return expr.buildTree();\r\n  },\r\n\r\n  Primary_lit_true(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.CONST,\r\n      value: true,\r\n    };\r\n  },\r\n\r\n  Primary_lit_false(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.CONST,\r\n      value: false,\r\n    };\r\n  },\r\n\r\n  Primary_variable(id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.IDEN,\r\n      symbol: id.sourceString,\r\n    };\r\n  },\r\n\r\n  identifier(_) {\r\n    return this.sourceString;\r\n  },\r\n\r\n  _iter(...children) {\r\n    return children.map((n) => n.buildTree());\r\n  },\r\n});\r\n","import {\r\n  grammar,\r\n  semantics,\r\n} from \"$core/interpreter/grammar\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport { SyntaxTree } from \"$types/syntax-tree\";\r\n\r\nexport const parse = (content: string) => {\r\n  const m = grammar.match(content);\r\n  if (m.succeeded()) {\r\n    const tree = semantics(m).buildTree();\r\n    return { ok: true, data: tree } as Maybe<SyntaxTree>;\r\n  }\r\n  return {\r\n    ok: false,\r\n  } as Maybe<SyntaxTree>;\r\n};\r\n","import {\r\n  CheckRounded,\r\n  TranslateRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  IconButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst LANGUAGES = [\"en\", \"th\"];\r\n\r\nexport const LanguageSwitcher: FC = () => {\r\n  const { i18n, t } = useTranslation();\r\n  const [anchor, setAnchor] =\r\n    useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClose = () => setAnchor(null);\r\n  return (\r\n    <Fragment>\r\n      <Tooltip\r\n        title={<Typography>{t(\"language\")}</Typography>}\r\n      >\r\n        <IconButton\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          onClick={(e) => setAnchor(e.currentTarget)}\r\n        >\r\n          <TranslateRounded />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={anchor}\r\n        open={anchor !== null}\r\n        onClose={handleClose}\r\n        onClick={handleClose}\r\n        slotProps={{\r\n          paper: {\r\n            sx: {\r\n              borderRadius: ({ shape }) =>\r\n                shape.borderRadius,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        {LANGUAGES.map((lang, index) => {\r\n          const selected = i18n.language === lang;\r\n          return (\r\n            <MenuItem\r\n              onClick={() => i18n.changeLanguage(lang)}\r\n              disableRipple\r\n              key={\"item\" + index}\r\n              selected={selected}\r\n              sx={{\r\n                padding: 2,\r\n              }}\r\n            >\r\n              <ListItemIcon>\r\n                {selected && (\r\n                  <CheckRounded color=\"primary\" />\r\n                )}\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                slotProps={{\r\n                  primary: {\r\n                    fontWeight: 500,\r\n                    textTransform: \"uppercase\",\r\n                  },\r\n                }}\r\n                primary={t(`lang.${lang}`)}\r\n              />\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  CheckRounded,\r\n  KeyboardArrowDownRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, useState } from \"react\";\r\nimport { NavLink } from \"react-router\";\r\n\r\ntype ToolNavDropDownProps = {\r\n  selected: string;\r\n  items: { label: string; href: string }[];\r\n};\r\nexport const ToolNavDropDown: FC<ToolNavDropDownProps> = (\r\n  props\r\n) => {\r\n  const { selected, items } = props;\r\n  const [anchor, setAnchor] = useState<null | HTMLElement>(\r\n    null\r\n  );\r\n  const handleOpen = (\r\n    event: React.MouseEvent<HTMLElement>\r\n  ) => {\r\n    setAnchor(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchor(null);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        disableRipple\r\n        disableElevation\r\n        endIcon={<KeyboardArrowDownRounded />}\r\n        variant=\"text\"\r\n        onClick={handleOpen}\r\n        sx={{\r\n          color: (theme) => theme.palette.text.primary,\r\n        }}\r\n      >\r\n        TOOLS\r\n      </Button>\r\n      <Menu\r\n        anchorEl={anchor}\r\n        open={anchor !== null}\r\n        onClick={handleClose}\r\n        onClose={handleClose}\r\n        slotProps={{\r\n          paper: {\r\n            sx: {\r\n              borderRadius: ({ shape }) =>\r\n                shape.borderRadius,\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        {items.map(({ href, label }, index) => {\r\n          const isSelected = selected === href;\r\n          return (\r\n            <MenuItem\r\n              disableRipple\r\n              key={\"item\" + index}\r\n              component={NavLink}\r\n              to={href}\r\n              selected={isSelected}\r\n              sx={{ padding: 2 }}\r\n            >\r\n              <ListItemIcon>\r\n                {isSelected && <CheckRounded />}\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                slotProps={{\r\n                  primary: {\r\n                    fontWeight: 500,\r\n                    textTransform: \"uppercase\",\r\n                  },\r\n                }}\r\n              >\r\n                {label}\r\n              </ListItemText>\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { LanguageSwitcher } from \"$components/common/LanguageSwitcher\";\r\nimport { ToolNavDropDown } from \"$components/common/ToolNavDropdown\";\r\nimport { HomeRounded } from \"@mui/icons-material\";\r\nimport {\r\n  IconButton,\r\n  Paper,\r\n  Stack,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, Outlet, useLocation } from \"react-router\";\r\n\r\nconst NAV_ITEMS: { href: string; label: string }[] = [\r\n  { href: \"/solver\", label: \"nav.solver\" },\r\n  { href: \"/evaluator\", label: \"nav.evaluator\" },\r\n  { href: \"/rewriter\", label: \"nav.rewriter\" },\r\n  { href: \"/checker\", label: \"nav.checker\" },\r\n];\r\n\r\nexport const MainLayout: FC = () => {\r\n  const { t } = useTranslation();\r\n  const { pathname } = useLocation();\r\n  return (\r\n    <Fragment>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={{\r\n          maxWidth: \"lg\",\r\n          marginY: 4,\r\n          marginX: {\r\n            xs: 4,\r\n            md: \"auto\",\r\n          },\r\n        }}\r\n      >\r\n        <Stack\r\n          direction=\"row\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Stack\r\n            flexWrap=\"wrap\"\r\n            direction=\"row\"\r\n            useFlexGap\r\n            alignItems=\"center\"\r\n            justifyContent=\"flex-start\"\r\n            spacing={2}\r\n          >\r\n            <Tooltip\r\n              title={\r\n                <Typography>{t(\"nav.home\")}</Typography>\r\n              }\r\n            >\r\n              <IconButton\r\n                disableRipple\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                component={Link}\r\n                to=\"/\"\r\n              >\r\n                <HomeRounded />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <ToolNavDropDown\r\n              selected={pathname}\r\n              items={NAV_ITEMS.map(({ href, label }) => ({\r\n                href,\r\n                label: t(label),\r\n              }))}\r\n            />\r\n          </Stack>\r\n          <LanguageSwitcher />\r\n        </Stack>\r\n      </Paper>\r\n      <Outlet />\r\n    </Fragment>\r\n  );\r\n};\r\n","import { Masonry } from \"@mui/lab\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router\";\r\n\r\nconst CARDS: {\r\n  title: string;\r\n  desc: string;\r\n  href: string;\r\n}[] = [\r\n  {\r\n    title: \"view.home.card.solver.title\",\r\n    desc: \"view.home.card.solver.desc\",\r\n    href: \"/solver\",\r\n  },\r\n  {\r\n    title: \"view.home.card.evaluator.title\",\r\n    desc: \"view.home.card.evaluator.desc\",\r\n    href: \"/evaluator\",\r\n  },\r\n  {\r\n    title: \"view.home.card.rewriter.title\",\r\n    desc: \"view.home.card.rewriter.desc\",\r\n    href: \"/rewriter\",\r\n  },\r\n  {\r\n    title: \"view.home.card.checker.title\",\r\n    desc: \"view.home.card.checker.desc\",\r\n    href: \"/checker\",\r\n  },\r\n];\r\n\r\nexport const HomeView: FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"lg\"\r\n      marginX={{\r\n        md: \"auto\",\r\n        xs: 4,\r\n      }}\r\n    >\r\n      <Masonry columns={{ xs: 1, md: 2 }}>\r\n        {CARDS.map(({ title, href, desc }, index) => (\r\n          <Link\r\n            key={\"card\" + index}\r\n            to={href}\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Card\r\n              variant=\"outlined\"\r\n              sx={{\r\n                \"transition\": \"all 0.1s ease\",\r\n                \"&:hover\": {\r\n                  borderColor: ({ palette }) =>\r\n                    palette.secondary.light,\r\n                },\r\n              }}\r\n            >\r\n              <CardHeader\r\n                title={t(title)}\r\n                slotProps={{\r\n                  title: {\r\n                    sx: {\r\n                      fontWeight: 700,\r\n                      whiteSpace: \"break-spaces\",\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n              <CardContent>\r\n                <Typography>{t(desc)}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Link>\r\n        ))}\r\n      </Masonry>\r\n    </Box>\r\n  );\r\n};\r\n","import {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\n\r\nexport const syntaxTreeToString = (\r\n  tree: SyntaxTree\r\n): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return String(tree.value);\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree.symbol;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      let operandRepr = syntaxTreeToString(tree.operand);\r\n      if (\r\n        tree.operand.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        operandRepr = `( ${operandRepr} )`;\r\n      }\r\n      return `${tree.operator} ${operandRepr}`;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      let leftRepr = syntaxTreeToString(tree.left);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        leftRepr = `( ${leftRepr} )`;\r\n      }\r\n      let rightRepr = syntaxTreeToString(tree.right);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        rightRepr = `( ${rightRepr} )`;\r\n      }\r\n\r\n      return `${leftRepr} ${tree.operator} ${rightRepr}`;\r\n    }\r\n  }\r\n};\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeBinary,\r\n  SyntaxTreeNodeConst,\r\n  SyntaxTreeNodeIden,\r\n  SyntaxTreeNodeType,\r\n  SyntaxTreeNodeUnary,\r\n} from \"$types/syntax-tree\";\r\nimport { syntaxTreeToString } from \"./to-string\";\r\n\r\nconst rewriteEquivalence = (\r\n  p: SyntaxTree,\r\n  q: SyntaxTree\r\n) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator: Operator.AND,\r\n    left: {\r\n      nodeType: SyntaxTreeNodeType.BINARY,\r\n      operator: Operator.OR,\r\n      left: {\r\n        nodeType: SyntaxTreeNodeType.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: p,\r\n      } as SyntaxTreeNodeUnary,\r\n      right: q,\r\n    } as SyntaxTreeNodeBinary,\r\n    right: {\r\n      nodeType: SyntaxTreeNodeType.BINARY,\r\n      operator: Operator.OR,\r\n      left: {\r\n        nodeType: SyntaxTreeNodeType.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: q,\r\n      } as SyntaxTreeNodeUnary,\r\n      right: p,\r\n    } as SyntaxTreeNodeBinary,\r\n  } as SyntaxTreeNodeBinary;\r\n};\r\n\r\nconst rewriteImplication = (\r\n  p: SyntaxTree,\r\n  q: SyntaxTree\r\n) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator: Operator.OR,\r\n    left: {\r\n      nodeType: SyntaxTreeNodeType.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: p,\r\n    } as SyntaxTreeNodeUnary,\r\n    right: q,\r\n  } as SyntaxTreeNodeBinary;\r\n};\r\n\r\nconst rewriteTree = (tree: SyntaxTree): SyntaxTree => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree;\r\n    case SyntaxTreeNodeType.UNARY:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: rewriteTree(tree.operand),\r\n      } as SyntaxTreeNodeUnary;\r\n\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = rewriteTree(tree.left);\r\n      const right = rewriteTree(tree.right);\r\n      switch (tree.operator) {\r\n        case Operator.IFF:\r\n          return rewriteEquivalence(left, right);\r\n        case Operator.IMPL:\r\n          return rewriteImplication(left, right);\r\n        case Operator.AND:\r\n          return {\r\n            nodeType: SyntaxTreeNodeType.BINARY,\r\n            operator: Operator.AND,\r\n            left,\r\n            right,\r\n          } as SyntaxTreeNodeBinary;\r\n        case Operator.OR:\r\n          return {\r\n            nodeType: SyntaxTreeNodeType.BINARY,\r\n            operator: Operator.OR,\r\n            left,\r\n            right,\r\n          } as SyntaxTreeNodeBinary;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst expandInward = (tree: SyntaxTree): SyntaxTree => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return tree;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree;\r\n    case SyntaxTreeNodeType.UNARY:\r\n      if (\r\n        tree.operand.nodeType === SyntaxTreeNodeType.UNARY\r\n      ) {\r\n        return expandInward(tree.operand.operand);\r\n      }\r\n\r\n      if (\r\n        tree.operand.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        const left = expandInward({\r\n          nodeType: SyntaxTreeNodeType.UNARY,\r\n          operand: tree.operand.left,\r\n          operator: Operator.NOT,\r\n        } as SyntaxTreeNodeUnary);\r\n        const right = expandInward({\r\n          nodeType: SyntaxTreeNodeType.UNARY,\r\n          operand: tree.operand.right,\r\n          operator: Operator.NOT,\r\n        } as SyntaxTreeNodeUnary);\r\n        const operator =\r\n          tree.operand.operator === Operator.AND\r\n            ? Operator.OR\r\n            : Operator.AND;\r\n        return {\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator,\r\n          left,\r\n          right,\r\n        } as SyntaxTreeNodeBinary;\r\n      }\r\n\r\n      if (\r\n        tree.operand.nodeType === SyntaxTreeNodeType.CONST\r\n      ) {\r\n        return {\r\n          nodeType: SyntaxTreeNodeType.CONST,\r\n          value: !tree.operand.value,\r\n        } as SyntaxTreeNodeConst;\r\n      }\r\n\r\n      return tree;\r\n\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = expandInward(tree.left);\r\n      const right = expandInward(tree.right);\r\n      if (tree.operator === Operator.AND) {\r\n        return {\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.AND,\r\n          left,\r\n          right,\r\n        } as SyntaxTreeNodeBinary;\r\n      }\r\n\r\n      // tree.operator === Operator.OR\r\n      if (\r\n        right.nodeType === SyntaxTreeNodeType.BINARY &&\r\n        right.operator === Operator.AND\r\n      ) {\r\n        const leftExp = expandInward({\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.OR,\r\n          left,\r\n          right: right.left,\r\n        } as SyntaxTreeNodeBinary);\r\n        const rightExp = expandInward({\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.OR,\r\n          left,\r\n          right: right.right,\r\n        } as SyntaxTreeNodeBinary);\r\n        return {\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.AND,\r\n          left: leftExp,\r\n          right: rightExp,\r\n        } as SyntaxTreeNodeBinary;\r\n      }\r\n\r\n      if (\r\n        left.nodeType === SyntaxTreeNodeType.BINARY &&\r\n        left.operator === Operator.AND\r\n      ) {\r\n        const leftExp = expandInward({\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.OR,\r\n          left: left.left,\r\n          right,\r\n        } as SyntaxTreeNodeBinary);\r\n        const rightExp = expandInward({\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.OR,\r\n          left: left.right,\r\n          right,\r\n        } as SyntaxTreeNodeBinary);\r\n\r\n        return {\r\n          nodeType: SyntaxTreeNodeType.BINARY,\r\n          operator: Operator.AND,\r\n          left: leftExp,\r\n          right: rightExp,\r\n        } as SyntaxTreeNodeBinary;\r\n      }\r\n\r\n      // neither left or right sub tree contains an AND operator\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.BINARY,\r\n        operator: Operator.OR,\r\n        left,\r\n        right,\r\n      } as SyntaxTreeNodeBinary;\r\n    }\r\n  }\r\n};\r\n\r\nconst simplifyDisjunctionClause = (\r\n  clause: Set<SyntaxTree>\r\n) => {\r\n  const nodes = [...clause];\r\n  if (\r\n    nodes.every(\r\n      (node) =>\r\n        node.nodeType === SyntaxTreeNodeType.CONST &&\r\n        !node.value\r\n    )\r\n  ) {\r\n    return new Set([\r\n      {\r\n        nodeType: SyntaxTreeNodeType.CONST,\r\n        value: false,\r\n      } as SyntaxTreeNodeConst,\r\n    ]);\r\n  }\r\n\r\n  const simplified = new Set<SyntaxTree>();\r\n  const seen = new Set<string>();\r\n\r\n  for (const node of nodes) {\r\n    switch (node.nodeType) {\r\n      case SyntaxTreeNodeType.CONST:\r\n        if (node.value) {\r\n          return new Set<SyntaxTree>([node]);\r\n        }\r\n        break;\r\n      case SyntaxTreeNodeType.IDEN:\r\n        if (\r\n          seen.has(\r\n            syntaxTreeToString({\r\n              nodeType: SyntaxTreeNodeType.UNARY,\r\n              operand: node,\r\n              operator: Operator.NOT,\r\n            } as SyntaxTreeNodeUnary)\r\n          )\r\n        ) {\r\n          return new Set<SyntaxTree>([\r\n            {\r\n              nodeType: SyntaxTreeNodeType.CONST,\r\n              value: true,\r\n            } as SyntaxTreeNodeConst,\r\n          ]);\r\n        }\r\n        if (!seen.has(syntaxTreeToString(node))) {\r\n          seen.add(syntaxTreeToString(node));\r\n          simplified.add(node);\r\n        }\r\n        break;\r\n      case SyntaxTreeNodeType.UNARY: {\r\n        const symbol = (node.operand as SyntaxTreeNodeIden)\r\n          .symbol;\r\n        if (seen.has(symbol)) {\r\n          return new Set<SyntaxTree>([\r\n            {\r\n              nodeType: SyntaxTreeNodeType.CONST,\r\n              value: true,\r\n            } as SyntaxTreeNodeConst,\r\n          ]);\r\n        }\r\n        if (!seen.has(syntaxTreeToString(node))) {\r\n          seen.add(syntaxTreeToString(node));\r\n          simplified.add(node);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return simplified;\r\n};\r\n\r\nconst collectClause = (\r\n  tree: SyntaxTree,\r\n  clause: Set<Set<SyntaxTree>>\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n    case SyntaxTreeNodeType.UNARY:\r\n      clause.add(new Set([tree]));\r\n      break;\r\n    case SyntaxTreeNodeType.BINARY:\r\n      if (tree.operator === Operator.OR) {\r\n        const subClause = new Set<Set<SyntaxTree>>();\r\n        collectClause(tree.left, subClause);\r\n        collectClause(tree.right, subClause);\r\n\r\n        const flattened = new Set<SyntaxTree>();\r\n        subClause.forEach((group) =>\r\n          group.forEach((element) => flattened.add(element))\r\n        );\r\n        const simplified =\r\n          simplifyDisjunctionClause(flattened);\r\n        if (simplified.size > 0) {\r\n          clause.add(simplified);\r\n        }\r\n        return;\r\n      }\r\n\r\n      collectClause(tree.left, clause);\r\n      collectClause(tree.right, clause);\r\n      break;\r\n  }\r\n};\r\n\r\nconst syntaxTreeFromClause = (clause: Set<SyntaxTree>) => {\r\n  if (clause.size === 0) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.CONST,\r\n      value: true,\r\n    } as SyntaxTree;\r\n  }\r\n\r\n  const nodes = [...clause];\r\n  if (clause.size === 1) {\r\n    return nodes[0];\r\n  }\r\n\r\n  if (\r\n    nodes.every(\r\n      (node) =>\r\n        node.nodeType === SyntaxTreeNodeType.CONST &&\r\n        !node.value\r\n    )\r\n  ) {\r\n    return {\r\n      value: false,\r\n      nodeType: SyntaxTreeNodeType.CONST,\r\n    } as SyntaxTreeNodeConst;\r\n  }\r\n\r\n  let tree: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator: Operator.OR,\r\n    left: nodes[0],\r\n    right: nodes[1],\r\n  };\r\n  for (const node of nodes.slice(2)) {\r\n    tree = {\r\n      nodeType: SyntaxTreeNodeType.BINARY,\r\n      operator: Operator.OR,\r\n      left: tree,\r\n      right: node,\r\n    } as SyntaxTree;\r\n  }\r\n  return tree;\r\n};\r\n\r\nexport const syntaxTreeNormalize = (tree: SyntaxTree) => {\r\n  const expr = new Set<Set<SyntaxTree>>();\r\n  collectClause(expandInward(rewriteTree(tree)), expr);\r\n\r\n  const simplified = [...expr].filter(\r\n    (clause) =>\r\n      clause.size > 0 &&\r\n      [...clause].every(\r\n        (node) =>\r\n          node.nodeType !== SyntaxTreeNodeType.CONST ||\r\n          !node.value\r\n      )\r\n  );\r\n\r\n  if (simplified.length > 0) {\r\n    let tree = syntaxTreeFromClause(simplified[0]);\r\n    const seen = new Set<string>();\r\n    for (const clause of simplified.slice(1)) {\r\n      const next = syntaxTreeFromClause(clause);\r\n\r\n      if (next.nodeType === SyntaxTreeNodeType.CONST) {\r\n        if (next.value) {\r\n          continue;\r\n        }\r\n        return {\r\n          nodeType: SyntaxTreeNodeType.CONST,\r\n          value: false,\r\n        } as SyntaxTreeNodeConst;\r\n      }\r\n\r\n      if (next.nodeType === SyntaxTreeNodeType.IDEN) {\r\n        seen.add(syntaxTreeToString(next));\r\n        if (\r\n          seen.has(\r\n            syntaxTreeToString({\r\n              nodeType: SyntaxTreeNodeType.UNARY,\r\n              operand: next,\r\n              operator: Operator.NOT,\r\n            } as SyntaxTreeNodeUnary)\r\n          )\r\n        ) {\r\n          return {\r\n            nodeType: SyntaxTreeNodeType.CONST,\r\n            value: false,\r\n          } as SyntaxTreeNodeConst;\r\n        }\r\n      }\r\n\r\n      if (next.nodeType === SyntaxTreeNodeType.UNARY) {\r\n        seen.add(syntaxTreeToString(next));\r\n        if (\r\n          seen.has(\r\n            (next.operand as SyntaxTreeNodeIden).symbol\r\n          )\r\n        ) {\r\n          return {\r\n            nodeType: SyntaxTreeNodeType.CONST,\r\n            value: false,\r\n          } as SyntaxTreeNodeConst;\r\n        }\r\n      }\r\n\r\n      tree = {\r\n        nodeType: SyntaxTreeNodeType.BINARY,\r\n        operator: Operator.AND,\r\n        left: tree,\r\n        right: next,\r\n      } as SyntaxTree;\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.CONST,\r\n    value: true,\r\n  } as SyntaxTreeNodeConst;\r\n};\r\n","import {\r\n  ExprTreeBinary,\r\n  ExprTreeConst,\r\n  ExprTreeIden,\r\n  ExprTreeUnary,\r\n} from \"$types/expression-tree\";\r\nimport { Operator } from \"$types/operators\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\n\r\nconst OPERATOR_REPR: Record<Operator, string> = {\r\n  [Operator.AND]: `\\\\land`,\r\n  [Operator.OR]: `\\\\lor`,\r\n  [Operator.IFF]: `\\\\iff`,\r\n  [Operator.IMPL]: `\\\\implies`,\r\n  [Operator.NOT]: `\\\\lnot`,\r\n};\r\n\r\ntype EvalFn = (t: SymbolTable) => boolean;\r\nconst OPERATOR_EVAL_FN: Record<\r\n  Exclude<Operator, Operator.NOT>,\r\n  (l: EvalFn, r: EvalFn) => (t: SymbolTable) => boolean\r\n> = {\r\n  [Operator.AND]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) && r(t),\r\n  [Operator.OR]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) || r(t),\r\n  [Operator.IMPL]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      !l(t) || r(t),\r\n  [Operator.IFF]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) === r(t),\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  orderStart: number\r\n) => {\r\n  const { nodeType } = tree;\r\n\r\n  switch (nodeType) {\r\n    case SyntaxTreeNodeType.CONST: {\r\n      const node: ExprTreeConst = {\r\n        eval: () => tree.value,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: String(tree.value),\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeType.IDEN: {\r\n      const node: ExprTreeIden = {\r\n        eval: (t) => t.get(tree.symbol) ?? false,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: tree.symbol,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const child = _syntaxTreetoExprTree(\r\n        tree.operand,\r\n        orderStart\r\n      );\r\n      const node: ExprTreeUnary = {\r\n        repr: OPERATOR_REPR[tree.operator],\r\n        child,\r\n        nodeType,\r\n        eval: (t) => !child.eval(t),\r\n        order: child.order + 1,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = _syntaxTreetoExprTree(\r\n        tree.left,\r\n        orderStart\r\n      );\r\n      const right = _syntaxTreetoExprTree(\r\n        tree.right,\r\n        left.order\r\n      );\r\n      const node: ExprTreeBinary = {\r\n        nodeType,\r\n        eval: OPERATOR_EVAL_FN[tree.operator](\r\n          left.eval,\r\n          right.eval\r\n        ),\r\n        left,\r\n        right,\r\n        order: right.order + 1,\r\n        repr: OPERATOR_REPR[tree.operator],\r\n      };\r\n      return node;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeFromSyntaxTree = (\r\n  tree: SyntaxTree\r\n) => {\r\n  return _syntaxTreetoExprTree(tree, 0);\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SyntaxTreeNodeType } from \"$types/syntax-tree\";\r\n\r\nconst _exprTreeCollectSymbols = (\r\n  tree: ExprTree,\r\n  symbols: Set<string>\r\n): void => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      symbols.add(tree.repr);\r\n      return;\r\n    case SyntaxTreeNodeType.UNARY:\r\n      _exprTreeCollectSymbols(tree.child, symbols);\r\n      return;\r\n    case SyntaxTreeNodeType.BINARY:\r\n      _exprTreeCollectSymbols(tree.left, symbols);\r\n      _exprTreeCollectSymbols(tree.right, symbols);\r\n      return;\r\n  }\r\n};\r\n\r\nexport const exprTreeCollectSymbols = (\r\n  exprTree: ExprTree\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  _exprTreeCollectSymbols(exprTree, symbols);\r\n  return symbols;\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SyntaxTreeNodeType } from \"$types/syntax-tree\";\r\n\r\nconst _exprTreeToLatex = (\r\n  tree: ExprTree,\r\n  table: Map<string, string> | null = null\r\n): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return `\\\\textbf{${tree.repr}}`;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      if (table !== null && table.has(tree.repr)) {\r\n        return table.get(tree.repr)!;\r\n      }\r\n      return tree.repr;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const child = _exprTreeToLatex(tree.child, table);\r\n      if (\r\n        tree.child.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        return `${tree.repr} ( ${child} )`;\r\n      }\r\n      return `${tree.repr} ${child}`;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      let left = _exprTreeToLatex(tree.left, table);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        left = `( ${left} )`;\r\n      }\r\n\r\n      let right = _exprTreeToLatex(tree.right, table);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        right = `( ${right} )`;\r\n      }\r\n\r\n      return `${left} ${tree.repr} ${right}`;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeToLatex = (exprTree: ExprTree) => {\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n\r\nexport const exprTreeToLatexSubstitute = (\r\n  exprTree: ExprTree,\r\n  symbolMap: Map<string, string>\r\n) => {\r\n  return _exprTreeToLatex(exprTree, symbolMap);\r\n};\r\n","import { SxProps, Typography } from \"@mui/material\";\r\nimport katex from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  displayMode?: boolean;\r\n  sx?: SxProps;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { sx, tex, displayMode } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, {\r\n        displayMode,\r\n        output: \"html\",\r\n      });\r\n    }\r\n  }, [ref, tex, displayMode]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      component=\"span\"\r\n      sx={{\r\n        ...sx,\r\n        \"& .katex-html .base\": !displayMode\r\n          ? {\r\n              \"display\": \"inline-block\",\r\n              \"maxWidth\": \"100%\",\r\n              \" & .mord.text\": {\r\n                display: \"inline-block\",\r\n                maxWidth: \"100%\",\r\n                wordWrap: \"break-word\",\r\n                textWrap: \"balance\",\r\n              },\r\n            }\r\n          : {},\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport {\r\n  CheckRounded,\r\n  KeyboardArrowDownRounded,\r\n  KeyboardArrowUpRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport {\r\n  Dispatch,\r\n  FC,\r\n  Fragment,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\ntype EditorRibbonButtonProps = {\r\n  options: { label: string; value: string }[];\r\n  onClick: Dispatch<string>;\r\n};\r\nexport const EditorRibbonButton: FC<\r\n  EditorRibbonButtonProps\r\n> = (props) => {\r\n  const { options, onClick } = props;\r\n  const [open, setOpen] = useState(false);\r\n  const [selected, setSelected] = useState(options[0]);\r\n  const anchorRef = useRef<HTMLDivElement | null>(null);\r\n  return (\r\n    <Fragment>\r\n      <ButtonGroup\r\n        ref={anchorRef}\r\n        disableElevation\r\n        variant=\"outlined\"\r\n      >\r\n        <Button\r\n          onClick={() => onClick(selected.value)}\r\n          sx={{\r\n            textTransform: \"none\",\r\n          }}\r\n        >\r\n          <StyledLatex tex={selected.label} />\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          onClick={() => setOpen(true)}\r\n        >\r\n          {!open && (\r\n            <KeyboardArrowDownRounded fontSize=\"small\" />\r\n          )}\r\n          {open && (\r\n            <KeyboardArrowUpRounded fontSize=\"small\" />\r\n          )}\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Menu\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        onClose={() => setOpen(false)}\r\n        onClick={() => setOpen(false)}\r\n      >\r\n        {options.map((option, index) => {\r\n          const isSelected =\r\n            option.label === selected.label;\r\n          return (\r\n            <MenuItem\r\n              key={\"option\" + index}\r\n              disableRipple\r\n              selected={isSelected}\r\n              onClick={() => setSelected(option)}\r\n              sx={{ padding: 2 }}\r\n            >\r\n              <ListItemIcon>\r\n                {isSelected && <CheckRounded />}\r\n              </ListItemIcon>\r\n              <ListItemText>\r\n                <StyledLatex tex={option.label} />\r\n              </ListItemText>\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { Stack } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { EditorRibbonButton } from \"./EditorRibbonButton\";\r\n\r\nconst OPERATOR_TEXT: {\r\n  label: string;\r\n  value: string;\r\n}[] = [\r\n  {\r\n    label: \"\\\\text{not}\",\r\n    value: \"not\",\r\n  },\r\n  {\r\n    label: \"\\\\text{and}\",\r\n    value: \"and\",\r\n  },\r\n  {\r\n    label: \"\\\\text{or}\",\r\n    value: \"or\",\r\n  },\r\n  {\r\n    label: \"\\\\text{implies}\",\r\n    value: \"implies\",\r\n  },\r\n  {\r\n    label: \"\\\\text{iff}\",\r\n    value: \"iff\",\r\n  },\r\n];\r\n\r\nconst OPERATOR_SYMBOL: {\r\n  label: string;\r\n  value: string;\r\n}[] = [\r\n  {\r\n    label: \"\\\\lnot\",\r\n    value: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    label: \"\\\\land\",\r\n    value: \"\\u{2227}\",\r\n  },\r\n  {\r\n    label: \"\\\\lor\",\r\n    value: \"\\u{2228}\",\r\n  },\r\n  {\r\n    label: \"\\\\implies\",\r\n    value: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    label: \"\\\\iff\",\r\n    value: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonProps = {\r\n  onClick: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { onClick } = props;\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={2}\r\n      flexWrap=\"wrap\"\r\n      direction=\"row\"\r\n    >\r\n      <Stack\r\n        direction=\"row\"\r\n        flexWrap=\"wrap\"\r\n        spacing={0.5}\r\n        useFlexGap\r\n      >\r\n        {OPERATOR_TEXT.map((option, index) => (\r\n          <EditorRibbonButton\r\n            key={\"insert-btn-text\" + index}\r\n            onClick={(value) => onClick(value)}\r\n            options={[option, OPERATOR_SYMBOL[index]]}\r\n          />\r\n        ))}\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","import { Stack, TextField } from \"@mui/material\";\r\nimport { Dispatch, FC, useRef } from \"react\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\n\r\ntype EditorProps = {\r\n  placeholder: string;\r\n  value: string;\r\n  onChange: Dispatch<string>;\r\n};\r\nexport const Editor: FC<EditorProps> = (props) => {\r\n  const { placeholder, value, onChange } = props;\r\n\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    onChange(`${value} ${char} `);\r\n    if (inputRef !== null && inputRef.current !== null) {\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon onClick={handleInsertChar} />\r\n      <TextField\r\n        inputRef={inputRef}\r\n        fullWidth\r\n        multiline\r\n        rows={5}\r\n        value={value}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        placeholder={placeholder}\r\n        slotProps={{\r\n          input: {\r\n            sx: {\r\n              fontFamily: \"monospace\",\r\n            },\r\n          },\r\n          htmlInput: {\r\n            autoCapitalize: \"off\",\r\n            spellCheck: \"false\",\r\n          },\r\n        }}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\n\r\ntype StyledOutputCardProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n};\r\nexport const StyledOutputCard: FC<StyledOutputCardProps> = (\r\n  props\r\n) => {\r\n  const { children, title } = props;\r\n  return (\r\n    <Card variant=\"outlined\">\r\n      <CardHeader\r\n        title={title}\r\n        slotProps={{\r\n          title: {\r\n            fontWeight: 900,\r\n          },\r\n        }}\r\n      />\r\n      <CardContent>{children}</CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import { Editor } from \"$components/math/Editor/Editor\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { StyledOutputCard } from \"$components/styled/StyledOutputCard\";\r\nimport { CheckerRouteLoaderData } from \"$types/loader-data\";\r\nimport { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  AlertTitle,\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const CheckerView: FC = () => {\r\n  const { data, userInput: defaultUserInput } =\r\n    useLoaderData() as CheckerRouteLoaderData;\r\n  const submit = useSubmit();\r\n  const [userInput, setUserInput] = useState(\r\n    defaultUserInput\r\n  );\r\n\r\n  useEffect(() => {\r\n    setUserInput(defaultUserInput);\r\n  }, [defaultUserInput]);\r\n\r\n  const handleSubmit = () => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/checker\",\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"lg\"\r\n      marginX={{ xs: 2, md: \"auto\" }}\r\n      paddingY={2}\r\n    >\r\n      <Stack spacing={2}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"not (p and q) iff (not p or not q)\"\r\n        />\r\n        <Button\r\n          disabled={userInput.trim().length === 0}\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={handleSubmit}\r\n        >\r\n          RUN\r\n        </Button>\r\n        {data.ok && (\r\n          <>\r\n            <StyledOutputCard title=\"Input\">\r\n              <StyledLatex\r\n                tex={data.data.input}\r\n                displayMode\r\n              />\r\n            </StyledOutputCard>\r\n            <StyledOutputCard title=\"Output\">\r\n              <StyledLatex tex=\"\\text{The expression}\" />\r\n              <StyledLatex\r\n                tex={data.data.input}\r\n                displayMode\r\n              />\r\n              {data.data.verdict.constant ? (\r\n                <StyledLatex\r\n                  tex={\r\n                    data.data.verdict.value\r\n                      ? `\\\\text{is a tautology.}`\r\n                      : `\\\\text{is a contradiction.}`\r\n                  }\r\n                />\r\n              ) : (\r\n                <>\r\n                  <StyledLatex\r\n                    tex={`\\\\text{is not a tautology. Its truth value depends on \r\n                      $${[...data.data.verdict.dependencies]\r\n                        .toSorted()\r\n                        .join(\",\")}\r\n                        $.}`}\r\n                  />\r\n                </>\r\n              )}\r\n            </StyledOutputCard>\r\n          </>\r\n        )}\r\n        {!data.ok && defaultUserInput.trim().length > 0 && (\r\n          <Alert\r\n            severity=\"warning\"\r\n            variant=\"outlined\"\r\n          >\r\n            <AlertTitle>\r\n              <Typography>\r\n                The application cannot understand your\r\n                input.\r\n              </Typography>\r\n            </AlertTitle>\r\n            <Typography>\r\n              It seems like something is wrong with the\r\n              expression.\r\n            </Typography>\r\n          </Alert>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeNormalize } from \"$core/syntax-tree/normalize\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { CheckerRouteLoaderData } from \"$types/loader-data\";\r\nimport { SyntaxTreeNodeType } from \"$types/syntax-tree\";\r\nimport { CheckerView } from \"$views/CheckerView\";\r\nimport { RouteObject } from \"react-router\";\r\n\r\nexport const CHECKER_ROUTE: RouteObject = {\r\n  path: \"/checker\",\r\n  element: <CheckerView />,\r\n  loader: ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const userInputRaw = url.searchParams.get(\"input\");\r\n\r\n    if (\r\n      userInputRaw === null ||\r\n      userInputRaw.toString().trim().length === 0\r\n    ) {\r\n      const loaderData: CheckerRouteLoaderData = {\r\n        userInput: \"\",\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const userInput = userInputRaw.toString();\r\n    const result = parse(userInput);\r\n\r\n    if (!result.ok) {\r\n      const loaderData: CheckerRouteLoaderData = {\r\n        userInput,\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const { data: syntaxTree } = result;\r\n    const normalSyntaxTree =\r\n      syntaxTreeNormalize(syntaxTree);\r\n\r\n    const loaderData: CheckerRouteLoaderData = {\r\n      userInput,\r\n      data: {\r\n        ok: true,\r\n        data: {\r\n          input: exprTreeToLatex(\r\n            exprTreeFromSyntaxTree(syntaxTree)\r\n          ),\r\n          verdict:\r\n            normalSyntaxTree.nodeType ===\r\n            SyntaxTreeNodeType.CONST\r\n              ? {\r\n                  constant: true,\r\n                  value: normalSyntaxTree.value,\r\n                }\r\n              : {\r\n                  constant: false,\r\n                  dependencies: exprTreeCollectSymbols(\r\n                    exprTreeFromSyntaxTree(normalSyntaxTree)\r\n                  ),\r\n                },\r\n        },\r\n      },\r\n    };\r\n    return loaderData;\r\n  },\r\n};\r\n","import { SymbolTable } from \"$types/syntax-tree\";\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid2,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"../styled/StyledLatex\";\r\n\r\ntype PropositionConfigProps = {\r\n  value: SymbolTable;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const PropositionConfig: FC<\r\n  PropositionConfigProps\r\n> = (props) => {\r\n  const { value, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"translation\");\r\n\r\n  const symbols = [...value.keys()];\r\n  symbols.sort();\r\n\r\n  return (\r\n    <Grid2\r\n      container\r\n      width=\"100%\"\r\n      spacing={2}\r\n      sx={{\r\n        maxHeight: 400,\r\n        overflowY: \"auto\",\r\n      }}\r\n    >\r\n      {symbols.map((sym) => (\r\n        <Grid2\r\n          key={\"symbol-\" + sym}\r\n          size={{ xs: 12, md: 6 }}\r\n        >\r\n          <FormControl fullWidth>\r\n            <FormLabel>\r\n              <StyledLatex tex={sym} />\r\n            </FormLabel>\r\n            <RadioGroup\r\n              row\r\n              value={value.get(sym) ? \"1\" : \"0\"}\r\n              onChange={(_, value) =>\r\n                onChange(sym, value === \"1\")\r\n              }\r\n            >\r\n              <FormControlLabel\r\n                control={<Radio disableRipple />}\r\n                value=\"1\"\r\n                label={t(\r\n                  \"component.playground.config.true\"\r\n                )}\r\n              />\r\n              <FormControlLabel\r\n                control={<Radio disableRipple />}\r\n                value=\"0\"\r\n                label={t(\r\n                  \"component.playground.config.false\"\r\n                )}\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Grid2>\r\n      ))}\r\n    </Grid2>\r\n  );\r\n};\r\n","import { Editor } from \"$components/math/Editor/Editor\";\r\nimport { PropositionConfig } from \"$components/math/PropositionConfig\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { StyledOutputCard } from \"$components/styled/StyledOutputCard\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { EvaluatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const EvaluatorView: FC = () => {\r\n  const {\r\n    symbols,\r\n    data: data,\r\n    userInput: defaultUserInput,\r\n  } = useLoaderData() as EvaluatorRouteLoaderData;\r\n\r\n  const submit = useSubmit();\r\n\r\n  const [symbolTable, setSymbolTable] = useState(\r\n    new Map<string, boolean>()\r\n  );\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setUserInput(defaultUserInput);\r\n  }, [defaultUserInput]);\r\n\r\n  useEffect(() => {\r\n    const table = new Map<string, boolean>();\r\n    for (const symbol of symbols) {\r\n      table.set(symbol, true);\r\n    }\r\n    setSymbolTable(table);\r\n  }, [symbols]);\r\n\r\n  const handleSubmit = () => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/evaluator\",\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"lg\"\r\n      marginX={{ xs: 2, md: \"auto\" }}\r\n      paddingY={2}\r\n    >\r\n      <Stack spacing={2}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"p and q; p or q; p implies q; p iff q\"\r\n        />\r\n        <Button\r\n          disabled={userInput.trim().length === 0}\r\n          disableElevation\r\n          disableRipple\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          sx={{\r\n            maxWidth: \"fit-content\",\r\n          }}\r\n          onClick={handleSubmit}\r\n        >\r\n          RUN\r\n        </Button>\r\n        {data.length > 0 && data.some(({ ok }) => ok) && (\r\n          <>\r\n            <StyledOutputCard title=\"Input\">\r\n              <Stack\r\n                spacing={2}\r\n                divider={<Divider flexItem />}\r\n              >\r\n                {data.map((expr, index) => (\r\n                  <Stack key={\"expr\" + index}>\r\n                    <StyledLatex\r\n                      tex={`\\\\text{\\\\textbf{Equation} \r\n                      $\\\\mathbf{${index + 1}}$:\r\n                      }`}\r\n                    />\r\n                    {!expr.ok && (\r\n                      <StyledLatex\r\n                        tex=\"\\text{The evaluator could not understand this expression.}\"\r\n                        sx={{\r\n                          textAlign: \"center\",\r\n                        }}\r\n                      />\r\n                    )}\r\n                    {expr.ok && (\r\n                      <StyledLatex\r\n                        displayMode\r\n                        tex={exprTreeToLatex(expr.data)}\r\n                      />\r\n                    )}\r\n                  </Stack>\r\n                ))}\r\n              </Stack>\r\n            </StyledOutputCard>\r\n\r\n            <StyledOutputCard title=\"Propositions\">\r\n              {symbolTable.size === 0 && (\r\n                <Typography fontStyle=\"italic\">\r\n                  No proposition to display.\r\n                </Typography>\r\n              )}\r\n              {symbolTable.size > 0 && (\r\n                <PropositionConfig\r\n                  value={symbolTable}\r\n                  onChange={(k, v) =>\r\n                    setSymbolTable((prev) => {\r\n                      const next = new Map(prev);\r\n                      next.set(k, v);\r\n                      return next;\r\n                    })\r\n                  }\r\n                />\r\n              )}\r\n            </StyledOutputCard>\r\n            <StyledOutputCard title=\"Output\">\r\n              <Stack\r\n                spacing={2}\r\n                divider={<Divider flexItem />}\r\n              >\r\n                {data.map((expr, index) => (\r\n                  <Stack key={\"expr\" + index}>\r\n                    <StyledLatex\r\n                      tex={`\\\\text{\\\\textbf{Equation} \r\n                      $\\\\mathbf{${index + 1}}$:\r\n                      }`}\r\n                    />\r\n                    {!expr.ok && (\r\n                      <StyledLatex\r\n                        tex=\"\\text{The evaluator could not understand this expression.}\"\r\n                        sx={{\r\n                          textAlign: \"center\",\r\n                        }}\r\n                      />\r\n                    )}\r\n                    {expr.ok && (\r\n                      <>\r\n                        <StyledLatex\r\n                          displayMode\r\n                          tex={exprTreeToLatex(expr.data)}\r\n                        />\r\n                        <StyledLatex\r\n                          tex={`\\\\text{is ${expr.data.eval(\r\n                            symbolTable\r\n                          )}.}`}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </Stack>\r\n                ))}\r\n              </Stack>\r\n            </StyledOutputCard>\r\n          </>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport { EvaluatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { EvaluatorView } from \"$views/EvaluatorView\";\r\nimport { RouteObject } from \"react-router\";\r\n\r\nexport const EVALUATOR_ROUTE: RouteObject = {\r\n  path: \"/evaluator\",\r\n  element: <EvaluatorView />,\r\n  loader: ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const userInput = url.searchParams.get(\"input\");\r\n\r\n    if (\r\n      userInput === null ||\r\n      userInput.trim().length === 0\r\n    ) {\r\n      const loaderData: EvaluatorRouteLoaderData = {\r\n        userInput: \"\",\r\n        data: [],\r\n        symbols: new Set(),\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const symbols = new Set<string>();\r\n    const data: Maybe<ExprTree>[] = [];\r\n    for (const expr of userInput.split(\";\")) {\r\n      if (expr.trim().length === 0) {\r\n        continue;\r\n      }\r\n      const result = parse(expr);\r\n      if (!result.ok) {\r\n        data.push({ ok: false });\r\n        continue;\r\n      }\r\n      const exprTree = exprTreeFromSyntaxTree(result.data);\r\n      for (const symbol of exprTreeCollectSymbols(\r\n        exprTree\r\n      )) {\r\n        symbols.add(symbol);\r\n      }\r\n\r\n      data.push({\r\n        ok: true,\r\n        data: exprTree,\r\n      });\r\n    }\r\n\r\n    const loaderData: EvaluatorRouteLoaderData = {\r\n      userInput,\r\n      data: data,\r\n      symbols,\r\n    };\r\n    return loaderData;\r\n  },\r\n};\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeBinary,\r\n  SyntaxTreeNodeType,\r\n  SyntaxTreeNodeUnary,\r\n} from \"$types/syntax-tree\";\r\n\r\nexport const NOT = (operand: SyntaxTree) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.UNARY,\r\n    operator: Operator.NOT,\r\n    operand,\r\n  } as SyntaxTreeNodeUnary;\r\n};\r\n\r\nexport const BINARY = (\r\n  operator: Exclude<Operator, Operator.NOT>,\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator,\r\n    left,\r\n    right,\r\n  } as SyntaxTreeNodeBinary;\r\n};\r\n\r\nexport const AND = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return BINARY(Operator.AND, left, right);\r\n};\r\n\r\nexport const OR = (left: SyntaxTree, right: SyntaxTree) => {\r\n  return BINARY(Operator.OR, left, right);\r\n};\r\n\r\nexport const IMPLIES = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return BINARY(Operator.IMPL, left, right);\r\n};\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeBinary,\r\n} from \"$types/syntax-tree\";\r\nimport { AND, IMPLIES, NOT, OR } from \"./node\";\r\n\r\ntype RewriteRule = {\r\n  rewrite: (tree: SyntaxTree) => SyntaxTree;\r\n  basis: Operator[];\r\n};\r\nconst REWRITE_REGISTRY = new Map<Operator, RewriteRule[]>();\r\n\r\nconst registerRewriteRule = (\r\n  trigger: Operator,\r\n  basis: Operator[],\r\n  rewrite: (tree: SyntaxTree) => SyntaxTree\r\n) => {\r\n  if (!REWRITE_REGISTRY.has(trigger)) {\r\n    REWRITE_REGISTRY.set(trigger, []);\r\n  }\r\n  REWRITE_REGISTRY.get(trigger)!.push({\r\n    basis,\r\n    rewrite,\r\n  });\r\n};\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  [Operator.NOT, Operator.AND, Operator.OR],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return OR(AND(p, q), AND(NOT(p), NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  [Operator.NOT, Operator.OR, Operator.IMPL],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(OR(NOT(IMPLIES(p, q)), NOT(IMPLIES(q, p))));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  [Operator.AND, Operator.NOT],\r\n  (tree) => {\r\n    const { left, right } = tree as SyntaxTreeNodeBinary;\r\n    return NOT(\r\n      AND(\r\n        NOT(AND(left, right)),\r\n        NOT(AND(NOT(left), NOT(right)))\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  [Operator.NOT, Operator.OR],\r\n  (tree) => {\r\n    const { left, right } = tree as SyntaxTreeNodeBinary;\r\n    return OR(\r\n      NOT(OR(NOT(left), NOT(right))),\r\n      NOT(OR(left, right))\r\n    );\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  [Operator.NOT, Operator.IMPL],\r\n  (tree) => {\r\n    const { left, right } = tree as SyntaxTreeNodeBinary;\r\n    return NOT(\r\n      IMPLIES(\r\n        IMPLIES(left, right),\r\n        NOT(IMPLIES(left, right))\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IMPL,\r\n  [Operator.NOT, Operator.AND],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(AND(p, NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IMPL,\r\n  [Operator.NOT, Operator.OR],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return OR(NOT(p), q);\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.AND,\r\n  [Operator.NOT, Operator.OR],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(OR(NOT(p), NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.AND,\r\n  [Operator.NOT, Operator.IMPL],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(IMPLIES(p, NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.OR,\r\n  [Operator.NOT, Operator.AND],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(AND(NOT(p), NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.OR,\r\n  [Operator.NOT, Operator.IMPL],\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return IMPLIES(NOT(p), q);\r\n  }\r\n);\r\n\r\nexport const getRewriteRulesFor = (trigger: Operator) => {\r\n  return REWRITE_REGISTRY.get(trigger) ?? [];\r\n};\r\n","import { Maybe } from \"$types/generic\";\r\nimport { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { BINARY, NOT } from \"./node\";\r\nimport { syntaxTreeNormalize } from \"./normalize\";\r\nimport { getRewriteRulesFor } from \"./rewrite-rules\";\r\n\r\nconst rewrite = (\r\n  tree: SyntaxTree,\r\n  basis: Set<Operator>\r\n): SyntaxTree | null => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      if (\r\n        tree.operand.nodeType ===\r\n          SyntaxTreeNodeType.UNARY &&\r\n        tree.operand.operator === Operator.NOT\r\n      ) {\r\n        return rewrite(tree.operand.operand, basis);\r\n      }\r\n      if (!basis.has(Operator.NOT)) {\r\n        return null;\r\n      }\r\n      const operand = rewrite(tree.operand, basis);\r\n      if (operand === null) {\r\n        return null;\r\n      }\r\n      return NOT(operand);\r\n    }\r\n\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = rewrite(tree.left, basis);\r\n      if (left === null) {\r\n        return null;\r\n      }\r\n      const right = rewrite(tree.right, basis);\r\n      if (right === null) {\r\n        return null;\r\n      }\r\n\r\n      if (basis.has(tree.operator)) {\r\n        return BINARY(tree.operator, left, right);\r\n      }\r\n\r\n      const rules = getRewriteRulesFor(tree.operator);\r\n      for (const rule of rules) {\r\n        if (rule.basis.every((op) => basis.has(op))) {\r\n          return rule.rewrite(\r\n            BINARY(tree.operator, left, right)\r\n          );\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport const syntaxTreeRewrite = (\r\n  tree: SyntaxTree,\r\n  basis: Set<Operator>\r\n) => {\r\n  const normalTree = syntaxTreeNormalize(tree);\r\n  if (\r\n    normalTree.nodeType === SyntaxTreeNodeType.CONST ||\r\n    normalTree.nodeType === SyntaxTreeNodeType.IDEN\r\n  ) {\r\n    return {\r\n      ok: true,\r\n      data: normalTree,\r\n    } as Maybe<SyntaxTree>;\r\n  }\r\n\r\n  const rewrittenTree = rewrite(tree, basis);\r\n  if (rewrittenTree === null) {\r\n    return { ok: false } as Maybe<SyntaxTree>;\r\n  }\r\n  return {\r\n    ok: true,\r\n    data: rewrittenTree,\r\n  } as Maybe<SyntaxTree>;\r\n};\r\n","import { Editor } from \"$components/math/Editor/Editor\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { StyledOutputCard } from \"$components/styled/StyledOutputCard\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { RewriterRouteLoaderData } from \"$types/loader-data\";\r\nimport { Operator } from \"$types/operators\";\r\nimport { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const RewriteView: FC = () => {\r\n  const { data, userInput: defaultUserInput } =\r\n    useLoaderData() as RewriterRouteLoaderData;\r\n  const [basis, setBasis] = useState(() => {\r\n    const next = new Map<Operator, boolean>();\r\n    for (const operator of Object.values(Operator)) {\r\n      next.set(operator, true);\r\n    }\r\n    return next;\r\n  });\r\n  const submit = useSubmit();\r\n  const [userInput, setUserInput] = useState(\r\n    defaultUserInput\r\n  );\r\n\r\n  useEffect(() => {\r\n    setUserInput(defaultUserInput);\r\n  }, [defaultUserInput]);\r\n\r\n  const handleSubmit = () => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n        basis: [...basis.entries()]\r\n          .filter(([, v]) => v)\r\n          .map(([k]) => k),\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/rewriter\",\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"lg\"\r\n      marginX={{ xs: 2, md: \"auto\" }}\r\n      paddingY={2}\r\n    >\r\n      <Stack spacing={2}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"not (p and q) iff (not p or not q)\"\r\n        />\r\n\r\n        <FormGroup row>\r\n          {Object.values(Operator).map(\r\n            (operator, index) => (\r\n              <FormControlLabel\r\n                key={\"operator\" + index}\r\n                checked={basis.get(operator)}\r\n                onChange={(_, value) =>\r\n                  setBasis((prev) => {\r\n                    const next = new Map(prev);\r\n                    next.set(operator, value);\r\n                    return next;\r\n                  })\r\n                }\r\n                control={<Checkbox />}\r\n                label={\r\n                  <StyledLatex\r\n                    tex={`\\\\text{${operator}}`}\r\n                  />\r\n                }\r\n              />\r\n            )\r\n          )}\r\n        </FormGroup>\r\n\r\n        <Button\r\n          disabled={userInput.trim().length === 0}\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={handleSubmit}\r\n        >\r\n          RUN\r\n        </Button>\r\n        {data.ok && (\r\n          <>\r\n            <StyledOutputCard title=\"Input\">\r\n              <StyledLatex tex={data.data.inputLatex} />\r\n            </StyledOutputCard>\r\n            <StyledOutputCard title=\"Output\">\r\n              {!data.data.rewritten.ok && (\r\n                <StyledLatex tex=\"\\text{The application could not rewrite the expression into the desired basis.}\" />\r\n              )}\r\n              {data.data.rewritten.ok && (\r\n                <>\r\n                  <StyledLatex\r\n                    tex={`\\\\text{The expression is rewritten to}`}\r\n                  />\r\n                  <StyledLatex\r\n                    displayMode\r\n                    tex={\r\n                      exprTreeToLatex(\r\n                        data.data.rewritten.data\r\n                      ) + \".\"\r\n                    }\r\n                  />\r\n                </>\r\n              )}\r\n            </StyledOutputCard>\r\n          </>\r\n        )}\r\n        {!data.ok && defaultUserInput.trim().length > 0 && (\r\n          <Alert\r\n            severity=\"warning\"\r\n            variant=\"outlined\"\r\n          >\r\n            <Typography>Uhhhh</Typography>\r\n          </Alert>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeRewrite } from \"$core/syntax-tree/rewrite\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { RewriterRouteLoaderData } from \"$types/loader-data\";\r\nimport { Operator } from \"$types/operators\";\r\nimport { RewriteView } from \"$views/RewriteView\";\r\nimport { RouteObject } from \"react-router\";\r\n\r\nexport const REWRITER_ROUTE: RouteObject = {\r\n  path: \"/rewriter\",\r\n  element: <RewriteView />,\r\n  loader: ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const userInputRaw = url.searchParams.get(\"input\");\r\n    if (\r\n      userInputRaw === null ||\r\n      userInputRaw.toString().trim().length === 0\r\n    ) {\r\n      return {\r\n        userInput: \"\",\r\n        data: { ok: false },\r\n      } as RewriterRouteLoaderData;\r\n    }\r\n\r\n    const userInput = userInputRaw.toString();\r\n    const basisRaw = url.searchParams.get(\"basis\");\r\n    if (basisRaw === null) {\r\n      return {\r\n        userInput,\r\n        data: { ok: false },\r\n      } as RewriterRouteLoaderData;\r\n    }\r\n\r\n    const result = parse(userInput);\r\n\r\n    if (!result.ok) {\r\n      const loaderData: RewriterRouteLoaderData = {\r\n        userInput,\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const { data: syntaxTree } = result;\r\n    const basis = new Set(\r\n      basisRaw.split(\",\") as Operator[]\r\n    );\r\n    const rewriteResult = syntaxTreeRewrite(\r\n      syntaxTree,\r\n      basis\r\n    );\r\n\r\n    const loaderData: RewriterRouteLoaderData = {\r\n      userInput,\r\n      data: {\r\n        ok: true,\r\n        data: {\r\n          inputLatex: exprTreeToLatex(\r\n            exprTreeFromSyntaxTree(syntaxTree)\r\n          ),\r\n          rewritten: rewriteResult.ok\r\n            ? {\r\n                ok: true,\r\n                data: exprTreeFromSyntaxTree(\r\n                  rewriteResult.data\r\n                ),\r\n              }\r\n            : { ok: false },\r\n        },\r\n      },\r\n    };\r\n    return loaderData;\r\n  },\r\n};\r\n","import { Alert, AlertProps, useTheme } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\nexport const StyledAlert: FC<AlertProps> = (props) => {\r\n  const { sx, ...rest } = props;\r\n  const { shape } = useTheme();\r\n  return (\r\n    <Alert\r\n      icon={false}\r\n      {...rest}\r\n      sx={{\r\n        borderRadius: shape.borderRadius,\r\n        padding: 4,\r\n        ...sx,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { SymbolTable } from \"$types/syntax-tree\";\r\n\r\nexport const getPermutation = (\r\n  size: number,\r\n  symbols: string[]\r\n) => {\r\n  const perm: SymbolTable[] = [];\r\n  const permSize = 1 << size;\r\n  for (let i = 0; i < permSize; i++) {\r\n    const repr = i.toString(2).padStart(size, \"0\");\r\n    const p = new Map<string, boolean>();\r\n    for (let j = 0; j < size; j++) {\r\n      p.set(symbols[j], repr[j] === \"1\");\r\n    }\r\n    perm.push(p);\r\n  }\r\n  return perm;\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { exprTreeCollectSymbols } from \"./expr/evaluate\";\r\nimport { exprTreeToLatexSubstitute } from \"./expr/latex\";\r\n\r\ntype MinifiedSyntaxTree = {\r\n  label: string;\r\n  eval: (t: SymbolTable) => boolean;\r\n};\r\nconst traverse = (\r\n  tree: ExprTree,\r\n  accum: MinifiedSyntaxTree[],\r\n  seen: Set<string>,\r\n  symbolMap: Map<string, string>\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const repr = exprTreeToLatexSubstitute(\r\n        tree,\r\n        symbolMap\r\n      );\r\n      if (seen.has(repr)) {\r\n        return;\r\n      }\r\n      seen.add(repr);\r\n      traverse(tree.child, accum, seen, symbolMap);\r\n      const minified: MinifiedSyntaxTree = {\r\n        eval: tree.eval,\r\n        label: repr,\r\n      };\r\n      accum.push(minified);\r\n      return;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const repr = exprTreeToLatexSubstitute(\r\n        tree,\r\n        symbolMap\r\n      );\r\n      if (seen.has(repr)) {\r\n        return;\r\n      }\r\n      seen.add(repr);\r\n      traverse(tree.left, accum, seen, symbolMap);\r\n      traverse(tree.right, accum, seen, symbolMap);\r\n\r\n      const minified: MinifiedSyntaxTree = {\r\n        eval: tree.eval,\r\n        label: repr,\r\n      };\r\n      accum.push(minified);\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeFlattenPostOrder = (\r\n  tree: ExprTree\r\n) => {\r\n  const accum: MinifiedSyntaxTree[] = [];\r\n  const seen = new Set<string>();\r\n  const symbolMap = new Map<string, string>();\r\n  for (const symbol of exprTreeCollectSymbols(tree)) {\r\n    symbolMap.set(\r\n      symbol,\r\n      symbol.length >= 5\r\n        ? `${symbol.slice(0, 5)}\\\\ldots`\r\n        : symbol\r\n    );\r\n  }\r\n  traverse(tree, accum, seen, symbolMap);\r\n  return accum;\r\n};\r\n","import {\r\n  TableCell,\r\n  Typography,\r\n  alpha,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype StyledTableCellProps = { value: boolean };\r\nexport const StyledTableCell: FC<StyledTableCellProps> = (\r\n  props\r\n) => {\r\n  const { value } = props;\r\n  const { t } = useTranslation();\r\n  const { palette } = useTheme();\r\n\r\n  return (\r\n    <TableCell\r\n      align=\"center\"\r\n      sx={{\r\n        backgroundColor: value\r\n          ? alpha(palette.secondary.light, 0.8)\r\n          : alpha(palette.secondary.main, 0.2),\r\n      }}\r\n    >\r\n      <Typography>\r\n        {value ? t(\"common.true\") : t(\"common.false\")}\r\n      </Typography>\r\n    </TableCell>\r\n  );\r\n};\r\n","import { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { getPermutation } from \"$core/eval\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { exprTreeFlattenPostOrder } from \"$core/tree/flatten\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  Button,\r\n  Stack,\r\n  SxProps,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Theme,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, memo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledTableCell } from \"./TruthTableCell\";\r\n\r\ntype TruthTableProps = {\r\n  exprTree: ExprTree;\r\n  slotProps: { container: SxProps<Theme> };\r\n};\r\nconst TruthTable_: FC<TruthTableProps> = (props) => {\r\n  const { exprTree, slotProps } = props;\r\n  const { t } = useTranslation();\r\n  const [userConfirmed, setUserConfirmed] = useState(false);\r\n\r\n  const columns = exprTreeFlattenPostOrder(exprTree);\r\n  const symbols = [...exprTreeCollectSymbols(exprTree)];\r\n  symbols.sort();\r\n\r\n  const perm =\r\n    symbols.length > 3 && !userConfirmed\r\n      ? []\r\n      : getPermutation(symbols.length, symbols);\r\n\r\n  if (symbols.length > 3 && !userConfirmed) {\r\n    return (\r\n      <Stack spacing={1}>\r\n        <StyledAlert\r\n          severity=\"warning\"\r\n          variant=\"standard\"\r\n        >\r\n          <Typography>\r\n            {t(\"component:math.truthTable.warning\")}\r\n          </Typography>\r\n        </StyledAlert>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => setUserConfirmed(true)}\r\n        >\r\n          {t(\"component:math.truthTable.confirm\")}\r\n        </Button>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TableContainer sx={slotProps.container}>\r\n      <Table stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            {symbols.map((symbol, index) => (\r\n              <TableCell\r\n                key={\"sym\" + index}\r\n                align=\"center\"\r\n              >\r\n                <StyledLatex tex={symbol} />\r\n              </TableCell>\r\n            ))}\r\n            {columns.map((col, index) => (\r\n              <TableCell\r\n                key={\"subexpr\" + index}\r\n                align=\"center\"\r\n              >\r\n                <StyledLatex tex={col.label} />\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {perm.map((p, index) => (\r\n            <TableRow key={\"perm\" + index}>\r\n              {symbols.map((sym, index) => (\r\n                <StyledTableCell\r\n                  key={\"sym\" + index}\r\n                  value={p.get(sym) || false}\r\n                />\r\n              ))}\r\n              {columns.map((column, colIndex) => (\r\n                <StyledTableCell\r\n                  key={\"col\" + colIndex}\r\n                  value={column.eval(p)}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport const TruthTable = memo(\r\n  TruthTable_,\r\n  (prev, next) => {\r\n    return (\r\n      exprTreeToLatex(prev.exprTree) ===\r\n      exprTreeToLatex(next.exprTree)\r\n    );\r\n  }\r\n);\r\n","import {\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledTooltipIconButtonProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  onKeyPress?: (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => void;\r\n};\r\nexport const StyledTooltipIconButton: FC<\r\n  StyledTooltipIconButtonProps\r\n> = (props) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip title={<Typography>{title}</Typography>}>\r\n      <span>\r\n        <IconButton\r\n          disableRipple\r\n          disabled={disabled}\r\n          onClick={onClick}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { StyledTooltipIconButton } from \"$components/styled/StyledIconButton\";\r\nimport {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n  PauseRounded,\r\n  PlayArrowRounded,\r\n  ReplayRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype GraphControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n  onAnimationPlay: () => void;\r\n  onAnimationPause: () => void;\r\n  onAnimationReplay: () => void;\r\n  isAnimationPlaying: boolean;\r\n};\r\nexport const GraphControl: FC<GraphControlProps> = (\r\n  props\r\n) => {\r\n  const {\r\n    value,\r\n    maxValue,\r\n    minValue,\r\n    onChange,\r\n    isAnimationPlaying,\r\n    onAnimationPause,\r\n    onAnimationPlay,\r\n    onAnimationReplay,\r\n  } = props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"playground.playback\",\r\n  });\r\n\r\n  const handleForward = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  return (\r\n    <Stack>\r\n      <Slider\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n      <Stack\r\n        direction=\"row\"\r\n        spacing={1}\r\n        alignItems=\"center\"\r\n      >\r\n        <StyledTooltipIconButton\r\n          disabled={value <= minValue}\r\n          title=\"Previous\"\r\n          onClick={handleRewind}\r\n        >\r\n          <KeyboardArrowLeftRounded />\r\n        </StyledTooltipIconButton>\r\n        {value === maxValue && (\r\n          <StyledTooltipIconButton\r\n            title=\"Replay\"\r\n            onClick={onAnimationReplay}\r\n          >\r\n            <ReplayRounded />\r\n          </StyledTooltipIconButton>\r\n        )}\r\n        {value !== maxValue && isAnimationPlaying && (\r\n          <StyledTooltipIconButton\r\n            title=\"Pause\"\r\n            onClick={onAnimationPause}\r\n          >\r\n            <PauseRounded />\r\n          </StyledTooltipIconButton>\r\n        )}\r\n        {value !== maxValue && !isAnimationPlaying && (\r\n          <StyledTooltipIconButton\r\n            title=\"Play\"\r\n            onClick={onAnimationPlay}\r\n          >\r\n            <PlayArrowRounded />\r\n          </StyledTooltipIconButton>\r\n        )}\r\n        <StyledTooltipIconButton\r\n          disabled={value >= maxValue}\r\n          title={t(\"forward\")}\r\n          onClick={handleForward}\r\n        >\r\n          <KeyboardArrowRightRounded />\r\n        </StyledTooltipIconButton>\r\n        <Typography>{`${value}/${maxValue}`}</Typography>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","import { Fab, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactElement } from \"react\";\r\n\r\ntype StyledFABProps = {\r\n  title: string;\r\n  onClick: () => void;\r\n  children: ReactElement;\r\n};\r\nexport const StyledFAB: FC<StyledFABProps> = (props) => {\r\n  const { children, onClick, title } = props;\r\n  return (\r\n    <Fab\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: 16,\r\n        bottom: 16,\r\n      }}\r\n    >\r\n      <Tooltip\r\n        placement=\"right\"\r\n        title={<Typography>{title}</Typography>}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    </Fab>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  order: number;\r\n  symbolTable: SymbolTable;\r\n  r: number;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const { r, order, node, symbolTable } = props;\r\n  const { t } = useTranslation();\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.repr)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.repr]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      opacity={isNodeVisibleNow ? 1 : 0.5}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        stroke={palette.primary.light}\r\n        strokeOpacity={0.8}\r\n        r={r}\r\n        fill={palette.secondary.light}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        color={palette.secondary.contrastText}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n      <Group\r\n        transform={`translate(${r / 3}, ${r / 3})`}\r\n        visibility={\r\n          data.order < order ? \"visible\" : \"hidden\"\r\n        }\r\n      >\r\n        <rect\r\n          width={60}\r\n          height={30}\r\n          rx={5}\r\n          ry={5}\r\n          fill={palette.secondary.light}\r\n        />\r\n        <text\r\n          x=\"30\"\r\n          y=\"22\"\r\n          fillOpacity={0.5}\r\n          textAnchor=\"middle\"\r\n          pointerEvents=\"none\"\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          {data.eval(symbolTable)\r\n            ? t(\"common.true\")\r\n            : t(\"common.false\")}\r\n        </text>\r\n      </Group>\r\n    </Group>\r\n  );\r\n};\r\n","import { StyledFAB } from \"$components/styled/StyledFAB\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport { Box } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC, Fragment, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TreeGraphLink } from \"./TreeGraphLink\";\r\nimport { TreeGraphNode } from \"./TreeGraphNode\";\r\n\r\nconst flatten_expr = (d: ExprTree) => {\r\n  switch (d.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return null;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return null;\r\n    case SyntaxTreeNodeType.UNARY:\r\n      return [d.child];\r\n    case SyntaxTreeNodeType.BINARY:\r\n      return [d.left, d.right];\r\n  }\r\n};\r\n\r\ntype TreeGraphProps = {\r\n  symbolTable: SymbolTable;\r\n  tree: ExprTree;\r\n  order: number;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const { tree, order, symbolTable } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const viewportRef = useRef<HTMLDivElement | null>(null);\r\n  const data = hierarchy(tree, flatten_expr);\r\n\r\n  const viewportWidth =\r\n    viewportRef.current === null\r\n      ? 0\r\n      : viewportRef.current.getBoundingClientRect().width;\r\n\r\n  const viewportHeight =\r\n    viewportRef.current === null\r\n      ? 0\r\n      : viewportRef.current.getBoundingClientRect().height;\r\n\r\n  const treeWidth = (data.leaves().length + 1) * 150;\r\n  const treeHeight = (data.height + 1) * 100;\r\n  const nodeRadius = 30;\r\n\r\n  return (\r\n    <Box\r\n      ref={viewportRef}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      position=\"relative\"\r\n    >\r\n      <Zoom<SVGSVGElement>\r\n        width={viewportWidth}\r\n        height={viewportHeight}\r\n        scaleXMin={1 / 10}\r\n        scaleXMax={1}\r\n        scaleYMin={1 / 10}\r\n        scaleYMax={1}\r\n      >\r\n        {(zoom) => (\r\n          <Fragment>\r\n            <svg\r\n              width={viewportWidth}\r\n              height={viewportHeight}\r\n              ref={zoom.containerRef}\r\n              style={{\r\n                touchAction: \"none\",\r\n                cursor: zoom.isDragging\r\n                  ? \"grabbing\"\r\n                  : \"grab\",\r\n              }}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={zoom.dragEnd}\r\n              onMouseLeave={zoom.dragEnd}\r\n            >\r\n              <Group transform={zoom.toString()}>\r\n                <Tree\r\n                  root={data}\r\n                  size={[treeWidth, -treeHeight]}\r\n                >\r\n                  {(treeHeir) => (\r\n                    <Group\r\n                      top={treeHeight + nodeRadius * 1.5}\r\n                    >\r\n                      {treeHeir.links().map((link, i) => (\r\n                        <TreeGraphLink\r\n                          key={`link-${i}`}\r\n                          order={order}\r\n                          link={link}\r\n                        />\r\n                      ))}\r\n                      {treeHeir\r\n                        .descendants()\r\n                        .map((node, i) => (\r\n                          <TreeGraphNode\r\n                            key={`node-${i}`}\r\n                            order={order}\r\n                            node={node}\r\n                            symbolTable={symbolTable}\r\n                            r={nodeRadius}\r\n                          />\r\n                        ))}\r\n                    </Group>\r\n                  )}\r\n                </Tree>\r\n              </Group>\r\n            </svg>\r\n            <StyledFAB\r\n              onClick={zoom.center}\r\n              title={t(\"playground.graph.center\")}\r\n            >\r\n              <ControlCameraRounded />\r\n            </StyledFAB>\r\n          </Fragment>\r\n        )}\r\n      </Zoom>\r\n    </Box>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport {\r\n  Paper,\r\n  Stack,\r\n  SxProps,\r\n  Theme,\r\n} from \"@mui/material\";\r\nimport { FC, useEffect, useRef, useState } from \"react\";\r\nimport { GraphControl } from \"./GraphControl\";\r\nimport { TreeGraph } from \"./TreeGraph/TreeGraph\";\r\n\r\ntype GraphProps = {\r\n  exprTree: ExprTree;\r\n  symbolTable: SymbolTable;\r\n  slotProps: {\r\n    graphRegion: SxProps<Theme>;\r\n  };\r\n};\r\nexport const Graph: FC<GraphProps> = (props) => {\r\n  const { exprTree, symbolTable, slotProps } = props;\r\n\r\n  const [step, setStep] = useState(1);\r\n  const [maxStep, setMaxStep] = useState(1);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const intervalRef = useRef<number | null>(null);\r\n  const isPlayingRef = useRef(isPlaying);\r\n  const currentFrameRef = useRef(step);\r\n\r\n  useEffect(() => {\r\n    isPlayingRef.current = isPlaying;\r\n  }, [isPlaying]);\r\n\r\n  useEffect(() => {\r\n    currentFrameRef.current = step;\r\n  }, [step]);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      intervalRef.current = setInterval(() => {\r\n        if (isPlayingRef.current) {\r\n          setStep((prev) => {\r\n            if (prev < maxStep) {\r\n              return prev + 1;\r\n            }\r\n            setIsPlaying(false);\r\n            isPlayingRef.current = false;\r\n            return prev;\r\n          });\r\n        }\r\n      }, 750);\r\n    }\r\n    return () =>\r\n      clearInterval(intervalRef.current ?? undefined);\r\n  }, [isPlaying, maxStep]);\r\n\r\n  useEffect(() => {\r\n    setStep(1);\r\n    setMaxStep(exprTree.order + 1);\r\n  }, [exprTree]);\r\n\r\n  // const handleGraphKeyPress = (\r\n  //   e: KeyboardEvent<SVGSVGElement>\r\n  // ) => {\r\n  //   const { key } = e;\r\n  //   if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n  //     e.preventDefault();\r\n  //     setStep((prev) => Math.min(maxStep, prev + 1));\r\n  //   } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n  //     e.preventDefault();\r\n  //     setStep((prev) => Math.max(1, prev - 1));\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={slotProps.graphRegion}\r\n      >\r\n        <TreeGraph\r\n          order={step}\r\n          tree={exprTree}\r\n          symbolTable={symbolTable}\r\n        />\r\n      </Paper>\r\n      <GraphControl\r\n        maxValue={maxStep}\r\n        minValue={1}\r\n        value={step}\r\n        onChange={setStep}\r\n        isAnimationPlaying={isPlaying}\r\n        onAnimationPause={() => {\r\n          setIsPlaying(false);\r\n        }}\r\n        onAnimationPlay={() => {\r\n          setIsPlaying(true);\r\n        }}\r\n        onAnimationReplay={() => {\r\n          setStep(1);\r\n          setIsPlaying(true);\r\n        }}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { exprTreeToLatex } from \"./tree/expr/latex\";\r\n\r\nexport type EvaluationStep = {\r\n  repr: string;\r\n  substitutions: {\r\n    substituted: string;\r\n    repr: string;\r\n    stepRef: number | false;\r\n    evaluated: boolean;\r\n  }[];\r\n  evaluated: boolean;\r\n};\r\n\r\n// const substitute = (\r\n//   tree: ExprTree,\r\n//   table: SymbolTable\r\n// ): string => {\r\n//   switch (tree.nodeType) {\r\n//     case SyntaxTreeNodeKind.CONST:\r\n//     case SyntaxTreeNodeKind.IDEN:\r\n//       return tree.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n//     case SyntaxTreeNodeKind.UNARY: {\r\n//       const { child } = tree;\r\n//       let repr = child.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n\r\n//       if (\r\n//         child.nodeType === SyntaxTreeNodeKind.UNARY ||\r\n//         child.nodeType === SyntaxTreeNodeKind.BINARY\r\n//       ) {\r\n//         repr = `\\\\lnot ( ${repr} )`;\r\n//       } else {\r\n//         repr = `\\\\lnot ${repr} `;\r\n//       }\r\n//       return repr;\r\n//     }\r\n//     case SyntaxTreeNodeKind.BINARY: {\r\n//       const { right, left } = tree;\r\n\r\n//       let leftRepr = left.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n//       switch (left.nodeType) {\r\n//         case SyntaxTreeNodeKind.UNARY:\r\n//         case SyntaxTreeNodeKind.BINARY:\r\n//           leftRepr = `( ${leftRepr} )`;\r\n//       }\r\n\r\n//       let rightRepr = right.eval(table)\r\n//         ? \"\\\\text{True}\"\r\n//         : \"\\\\text{False}\";\r\n//       switch (right.nodeType) {\r\n//         case SyntaxTreeNodeKind.UNARY:\r\n//         case SyntaxTreeNodeKind.BINARY:\r\n//           rightRepr = `( ${rightRepr} )`;\r\n//       }\r\n\r\n//       return `${leftRepr} ${tree.repr} ${rightRepr}`;\r\n//     }\r\n//   }\r\n// };\r\n\r\nconst traverse = (\r\n  tree: ExprTree,\r\n  table: SymbolTable,\r\n  steps: EvaluationStep[]\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      {\r\n        const evaluated = tree.eval(table);\r\n        const repr = tree.repr;\r\n        steps.push({\r\n          repr,\r\n          evaluated,\r\n          substitutions: [\r\n            {\r\n              repr,\r\n              evaluated,\r\n              stepRef: false,\r\n              substituted: `\\\\text{${evaluated}}`,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      break;\r\n    case SyntaxTreeNodeType.UNARY:\r\n      {\r\n        const { child } = tree;\r\n\r\n        const childEval = child.eval(table);\r\n        let childStep: number | false = false;\r\n\r\n        if (\r\n          child.nodeType !== SyntaxTreeNodeType.CONST &&\r\n          child.nodeType !== SyntaxTreeNodeType.IDEN\r\n        ) {\r\n          traverse(child, table, steps);\r\n          childStep = steps.length;\r\n        }\r\n\r\n        // not (x and y)\r\n        // From (9), x and y === True\r\n        // not True\r\n        // False\r\n\r\n        steps.push({\r\n          repr: exprTreeToLatex(tree),\r\n          substitutions: [\r\n            {\r\n              repr: exprTreeToLatex(child),\r\n              evaluated: childEval,\r\n              stepRef: childStep,\r\n              substituted: `\\\\lnot \\\\text{${childEval}}`,\r\n            },\r\n          ],\r\n          evaluated: tree.eval(table),\r\n        });\r\n      }\r\n      break;\r\n    case SyntaxTreeNodeType.BINARY:\r\n      {\r\n        const { right, left } = tree;\r\n\r\n        const leftEval = left.eval(table);\r\n        const leftSubstituted = `\\\\text{${leftEval}}`;\r\n        let leftStep: number | false = false;\r\n        if (\r\n          left.nodeType !== SyntaxTreeNodeType.CONST &&\r\n          left.nodeType !== SyntaxTreeNodeType.IDEN\r\n        ) {\r\n          traverse(left, table, steps);\r\n          leftStep = steps.length;\r\n        }\r\n\r\n        const rightEval = right.eval(table);\r\n        const rightRawRepr = exprTreeToLatex(right);\r\n        const rightRepr =\r\n          right.nodeType === SyntaxTreeNodeType.BINARY\r\n            ? `( ${rightRawRepr} )`\r\n            : rightRawRepr;\r\n        const rightSubstituted = `\\\\text{${rightEval}}`;\r\n        let rightStep: number | false = false;\r\n        if (\r\n          right.nodeType !== SyntaxTreeNodeType.CONST &&\r\n          right.nodeType !== SyntaxTreeNodeType.IDEN\r\n        ) {\r\n          traverse(right, table, steps);\r\n          rightStep = steps.length;\r\n        }\r\n\r\n        // (x and y) and (y and z)\r\n        // From (9), x and y === True\r\n        // True and (y and z)\r\n        // From (10), y and z === True\r\n        // True and True\r\n        // True\r\n\r\n        steps.push({\r\n          repr: exprTreeToLatex(tree),\r\n          evaluated: tree.eval(table),\r\n          substitutions: [\r\n            {\r\n              repr: exprTreeToLatex(left),\r\n              evaluated: leftEval,\r\n              stepRef: leftStep,\r\n              substituted: `${leftSubstituted} ${tree.repr} ${rightRepr}`,\r\n            },\r\n            {\r\n              repr: rightRawRepr,\r\n              evaluated: rightEval,\r\n              stepRef: rightStep,\r\n              substituted: `${leftSubstituted} ${tree.repr} ${rightSubstituted}`,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\nexport const exprTreeFlattenStepByStep = (\r\n  tree: ExprTree,\r\n  symbolTable: SymbolTable\r\n) => {\r\n  const steps: EvaluationStep[] = [];\r\n  traverse(tree, symbolTable, steps);\r\n  return steps;\r\n};\r\n","import {\r\n  FirstPageRounded,\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n  LastPageRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  IconButton,\r\n  Stack,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype StepByStepEvaluationControlProps = {\r\n  value: number;\r\n  maxValue: number;\r\n  onChange: (value: number) => void;\r\n};\r\nexport const StepByStepEvaluationControl: FC<\r\n  StepByStepEvaluationControlProps\r\n> = (props) => {\r\n  const { maxValue, onChange, value } = props;\r\n  return (\r\n    <Stack\r\n      alignItems=\"center\"\r\n      spacing={0.5}\r\n      direction=\"row\"\r\n    >\r\n      <Tooltip title={<Typography>First step</Typography>}>\r\n        <span>\r\n          <IconButton\r\n            disabled={value <= 0}\r\n            onClick={() => onChange(0)}\r\n          >\r\n            <FirstPageRounded />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip\r\n        title={<Typography>Previous step</Typography>}\r\n      >\r\n        <span>\r\n          <IconButton\r\n            disabled={value <= 0}\r\n            onClick={() => onChange(Math.max(value - 1, 0))}\r\n          >\r\n            <KeyboardArrowLeftRounded />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title={<Typography>Next step</Typography>}>\r\n        <span>\r\n          <IconButton\r\n            disabled={value >= maxValue - 1}\r\n            onClick={() =>\r\n              onChange(Math.min(value + 1, maxValue - 1))\r\n            }\r\n          >\r\n            <KeyboardArrowRightRounded />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title={<Typography>Final step</Typography>}>\r\n        <span>\r\n          <IconButton\r\n            disabled={value >= maxValue - 1}\r\n            onClick={() => onChange(maxValue - 1)}\r\n          >\r\n            <LastPageRounded />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n    </Stack>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { EvaluationStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype SubstitutionStepDisplayProps = {\r\n  references: EvaluationStep[];\r\n  subStep: EvaluationStep[\"substitutions\"][number];\r\n  stepIndex: number;\r\n  subStepIndex: number;\r\n};\r\nexport const SubstitutionStepDisplay: FC<\r\n  SubstitutionStepDisplayProps\r\n> = (props) => {\r\n  const { subStep, references, subStepIndex, stepIndex } =\r\n    props;\r\n  const prevMarker = String.fromCharCode(subStepIndex + 97);\r\n  const currMarker = String.fromCharCode(\r\n    subStepIndex + 97 + 1\r\n  );\r\n\r\n  const taggedExpr = `${subStep.substituted}. \\\\tag{${stepIndex}.${currMarker}}`;\r\n  if (subStep.stepRef === false) {\r\n    return (\r\n      <Stack>\r\n        <StyledLatex\r\n          tex={`\\\\text{Given $${subStep.repr}$ is ${subStep.evaluated}, substitute into $(${stepIndex}.${prevMarker})$,}`}\r\n        />\r\n        <StyledLatex\r\n          displayMode\r\n          tex={taggedExpr}\r\n        />\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stack>\r\n      <StyledLatex\r\n        tex={`\\\\text{From Eq. $(${subStep.stepRef})$,}`}\r\n      />\r\n      <StyledLatex\r\n        displayMode\r\n        tex={references[subStep.stepRef - 1].repr}\r\n      />\r\n      <StyledLatex\r\n        tex={`\\\\text{is ${subStep.evaluated}.}`}\r\n      />\r\n      <StyledLatex\r\n        tex={`\\\\text{Substitute into $(${stepIndex}.${prevMarker})$},`}\r\n      />\r\n      <StyledLatex\r\n        displayMode\r\n        tex={taggedExpr}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { EvaluationStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { Fragment } from \"react/jsx-runtime\";\r\nimport { SubstitutionStepDisplay } from \"./SubstitutionStepDisplay\";\r\n\r\ntype StepDisplayProps = {\r\n  stepIndex: number;\r\n  step: EvaluationStep;\r\n  references: EvaluationStep[];\r\n};\r\nexport const StepDisplay: FC<StepDisplayProps> = (\r\n  props\r\n) => {\r\n  const { step, stepIndex, references } = props;\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <StyledLatex\r\n        tex={`\\\\textbf{Step $${stepIndex}$ of $${references.length}$}`}\r\n      />\r\n      <StyledLatex\r\n        tex={`\\\\text{Consider the expression}`}\r\n      />\r\n      <StyledLatex\r\n        displayMode\r\n        tex={`${step.repr}. \\\\tag{${stepIndex}.a}`}\r\n      />\r\n      {step.substitutions.length > 0 && (\r\n        <Fragment>\r\n          {step.substitutions.map(\r\n            (subStep, subStepIndex) => (\r\n              <SubstitutionStepDisplay\r\n                stepIndex={stepIndex}\r\n                subStepIndex={subStepIndex}\r\n                key={\"sub-step\" + stepIndex + subStepIndex}\r\n                subStep={subStep}\r\n                references={references}\r\n              />\r\n            )\r\n          )}\r\n        </Fragment>\r\n      )}\r\n      <StyledLatex\r\n        tex={`\\\\text{Then $(${stepIndex}.${String.fromCharCode(\r\n          step.substitutions.length + 97\r\n        )})$ is ${step.evaluated}.}`}\r\n      />\r\n      <StyledLatex\r\n        tex={`\\\\textbf{Equation $${stepIndex}$:}`}\r\n      />\r\n      <StyledLatex\r\n        displayMode\r\n        tex={step.repr}\r\n      />\r\n      <StyledLatex tex={`\\\\text{is ${step.evaluated}.}`} />\r\n    </Stack>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { exprTreeFlattenStepByStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { Divider, Stack, Typography } from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  memo,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { StepByStepEvaluationControl } from \"./StepByStepEvaluationControl\";\r\nimport { StepDisplay } from \"./StepDisplay\";\r\n\r\ntype StepByStepEvaluationProps = {\r\n  exprTree: ExprTree;\r\n  symbolTable: SymbolTable;\r\n};\r\nconst StepByStepEvaluation_: FC<\r\n  StepByStepEvaluationProps\r\n> = (props) => {\r\n  const { exprTree, symbolTable } = props;\r\n\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const steps = useMemo(\r\n    () => exprTreeFlattenStepByStep(exprTree, symbolTable),\r\n    [exprTree, symbolTable]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCurrentStep(0);\r\n  }, [steps]);\r\n\r\n  if (steps.length === 0) {\r\n    return (\r\n      <Typography fontStyle=\"italic\">\r\n        No step to display.\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stack\r\n      spacing={2}\r\n      divider={<Divider flexItem />}\r\n    >\r\n      <StepByStepEvaluationControl\r\n        value={currentStep}\r\n        maxValue={steps.length}\r\n        onChange={setCurrentStep}\r\n      />\r\n      <StepDisplay\r\n        step={steps[currentStep]}\r\n        stepIndex={currentStep + 1}\r\n        references={steps}\r\n      />\r\n      {currentStep === steps.length - 1 && (\r\n        <Stack>\r\n          <StyledLatex tex=\"\\text{Therefore, the expression}\" />\r\n          <StyledLatex\r\n            displayMode\r\n            tex={steps[currentStep].repr}\r\n          />\r\n          <StyledLatex\r\n            tex={`\\\\text{is ${steps[currentStep].evaluated}.}`}\r\n          />\r\n        </Stack>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport const StepByStepEvaluation = memo(\r\n  StepByStepEvaluation_,\r\n  (prev, next) => {\r\n    if (\r\n      exprTreeToLatex(prev.exprTree) !==\r\n      exprTreeToLatex(next.exprTree)\r\n    ) {\r\n      return false;\r\n    }\r\n    for (const [k, v] of prev.symbolTable.entries()) {\r\n      if (next.symbolTable.get(k) !== v) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n","import { TruthTable } from \"$components/math/TruthTable/TruthTable\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { StyledOutputCard } from \"$components/styled/StyledOutputCard\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC, memo, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Graph } from \"./Graph/Graph\";\r\nimport { PropositionConfig } from \"./PropositionConfig\";\r\nimport { StepByStepEvaluation } from \"./StepByStepEvaluation/StepByStepEvaluation\";\r\n\r\ntype SolverOutputGroupProps = {\r\n  exprTree: ExprTree;\r\n  symbolSet: Set<string>;\r\n};\r\nconst SolverOutputGroup_: FC<SolverOutputGroupProps> = (\r\n  props\r\n) => {\r\n  const { exprTree, symbolSet } = props;\r\n  const { t } = useTranslation();\r\n\r\n  const [symbolTable, setSymbolTable] = useState(() => {\r\n    const next = new Map<string, boolean>();\r\n    for (const symbol of symbolSet) {\r\n      next.set(symbol, true);\r\n    }\r\n    return next;\r\n  });\r\n\r\n  const handleSymbolChange = (k: string, v: boolean) => {\r\n    setSymbolTable((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const next = new Map<string, boolean>();\r\n    for (const symbol of symbolSet) {\r\n      next.set(symbol, true);\r\n    }\r\n    setSymbolTable(next);\r\n  }, [symbolSet]);\r\n\r\n  const exprLatex = exprTreeToLatex(exprTree);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      <StyledOutputCard title=\"Input Interpretation\">\r\n        <StyledLatex\r\n          displayMode\r\n          tex={exprLatex}\r\n        />\r\n      </StyledOutputCard>\r\n      <StyledOutputCard title=\"Propositions\">\r\n        <PropositionConfig\r\n          value={symbolTable}\r\n          onChange={handleSymbolChange}\r\n        />\r\n      </StyledOutputCard>\r\n      <StyledOutputCard title=\"Output\">\r\n        <StyledLatex tex=\"\\text{The expression}\" />\r\n        <StyledLatex\r\n          displayMode\r\n          tex={exprLatex}\r\n        />\r\n        <StyledLatex\r\n          tex={`\\\\text{is ${exprTree.eval(symbolTable)}.}`}\r\n        />\r\n      </StyledOutputCard>\r\n      <StyledOutputCard title=\"Step-by-step Evaluation\">\r\n        <StepByStepEvaluation\r\n          exprTree={exprTree}\r\n          symbolTable={symbolTable}\r\n        />\r\n      </StyledOutputCard>\r\n      <StyledOutputCard title=\"Graph\">\r\n        <Graph\r\n          exprTree={exprTree}\r\n          symbolTable={symbolTable}\r\n          slotProps={{\r\n            graphRegion: {\r\n              height: { xs: \"66vh\", md: \"80vh\" },\r\n            },\r\n          }}\r\n        />\r\n      </StyledOutputCard>\r\n      <StyledOutputCard\r\n        title={t(\"component:math.truthTable.title\")}\r\n      >\r\n        <TruthTable\r\n          exprTree={exprTree}\r\n          slotProps={{\r\n            container: {\r\n              maxHeight: { xs: \"100vh\", md: \"50vh\" },\r\n            },\r\n          }}\r\n        />\r\n      </StyledOutputCard>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport const SolverOutputGroup = memo(\r\n  SolverOutputGroup_,\r\n  (prev, next) => {\r\n    const p = exprTreeToLatex(prev.exprTree);\r\n    const n = exprTreeToLatex(next.exprTree);\r\n    return n === p;\r\n  }\r\n);\r\n","import { Editor } from \"$components/math/Editor/Editor\";\r\nimport { SolverOutputGroup } from \"$components/math/SolverOutputGroup\";\r\nimport { SolverRouteLoaderData } from \"$types/loader-data\";\r\nimport {\r\n  PlayArrowRounded,\r\n  WarningRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const SolverView: FC = () => {\r\n  const { data, userInput: prevUserInput } =\r\n    useLoaderData() as SolverRouteLoaderData;\r\n\r\n  const submit = useSubmit();\r\n  const [userInput, setUserInput] = useState(prevUserInput);\r\n\r\n  useEffect(() => {\r\n    setUserInput(prevUserInput);\r\n  }, [prevUserInput]);\r\n\r\n  const handleSubmit = () => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/solver\",\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"lg\"\r\n      marginX={{ xs: 4, md: \"auto\" }}\r\n      paddingY={2}\r\n    >\r\n      <Stack spacing={2}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"not (p and q) iff (not p or not q)\"\r\n        />\r\n        <Button\r\n          disabled={userInput.trim().length === 0}\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={handleSubmit}\r\n        >\r\n          RUN\r\n        </Button>\r\n        {data.ok && (\r\n          <SolverOutputGroup\r\n            exprTree={data.data.exprTree}\r\n            symbolSet={data.data.symbols}\r\n          />\r\n        )}\r\n        {!data.ok && prevUserInput.trim().length > 0 && (\r\n          <Alert\r\n            icon={<WarningRounded />}\r\n            severity=\"warning\"\r\n            variant=\"outlined\"\r\n          >\r\n            <Typography>\r\n              The solver cannot understand your input.\r\n              Please make sure the expression is correct and\r\n              try again.\r\n            </Typography>\r\n          </Alert>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { SolverRouteLoaderData } from \"$types/loader-data\";\r\nimport { SolverView } from \"$views/SolverView\";\r\nimport { RouteObject } from \"react-router\";\r\n\r\nexport const SOLVER_ROUTE: RouteObject = {\r\n  path: \"/solver\",\r\n  element: <SolverView />,\r\n  loader: ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const userInputRaw = url.searchParams.get(\"input\");\r\n\r\n    if (\r\n      userInputRaw === null ||\r\n      userInputRaw.toString().trim().length === 0\r\n    ) {\r\n      const loaderData: SolverRouteLoaderData = {\r\n        userInput: \"\",\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const userInput = userInputRaw.toString();\r\n    const result = parse(userInput);\r\n\r\n    if (!result.ok) {\r\n      const loaderData: SolverRouteLoaderData = {\r\n        userInput,\r\n        data: { ok: false },\r\n      };\r\n      return loaderData;\r\n    }\r\n\r\n    const { data: syntaxTree } = result;\r\n    const exprTree = exprTreeFromSyntaxTree(syntaxTree);\r\n    const symbols = exprTreeCollectSymbols(exprTree);\r\n    const loaderData: SolverRouteLoaderData = {\r\n      userInput,\r\n      data: {\r\n        ok: true,\r\n        data: {\r\n          exprTree,\r\n          symbols,\r\n        },\r\n      },\r\n    };\r\n    return loaderData;\r\n  },\r\n};\r\n","import { alpha, createTheme } from \"@mui/material\";\r\nimport { amber, brown, green } from \"@mui/material/colors\";\r\n\r\nexport const THEME = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: { main: brown[\"700\"] },\r\n    secondary: { main: green[\"100\"] },\r\n    background: { default: alpha(amber[\"50\"], 0.6) },\r\n    divider: brown[\"A700\"],\r\n    text: { primary: brown[\"800\"] },\r\n  },\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: t.palette.primary.dark,\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: t.palette.primary.dark,\r\n        }),\r\n      },\r\n    },\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        root: {\r\n          maxWidth: \"fit-content\",\r\n        },\r\n      },\r\n      defaultProps: {\r\n        disableElevation: true,\r\n        disableRipple: true,\r\n      },\r\n    },\r\n    MuiTableCell: {\r\n      styleOverrides: {\r\n        root: ({ theme }) => ({\r\n          whiteSpace: \"nowrap\",\r\n          backgroundColor: theme.palette.background.paper,\r\n        }),\r\n      },\r\n    },\r\n    MuiPaper: {\r\n      styleOverrides: {\r\n        outlined: {\r\n          padding: 2,\r\n          borderWidth: 2,\r\n        },\r\n      },\r\n    },\r\n    MuiCard: {\r\n      styleOverrides: {\r\n        root: { padding: 2 },\r\n      },\r\n    },\r\n  },\r\n});\r\n","import \"$core/interpreter/parser\";\r\nimport { MainLayout } from \"$layouts/MainLayout\";\r\nimport { HomeView } from \"$views/HomeView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  createHashRouter,\r\n  RouterProvider,\r\n} from \"react-router\";\r\nimport { CHECKER_ROUTE } from \"src/routes/checker\";\r\nimport { EVALUATOR_ROUTE } from \"src/routes/evaluator\";\r\nimport { REWRITER_ROUTE } from \"src/routes/rewriter\";\r\nimport { SOLVER_ROUTE } from \"src/routes/solver\";\r\nimport { THEME } from \"./theme\";\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nconst router = createHashRouter(\r\n  [\r\n    {\r\n      path: \"/\",\r\n      element: <MainLayout />,\r\n      children: [\r\n        { index: true, element: <HomeView /> },\r\n        SOLVER_ROUTE,\r\n        EVALUATOR_ROUTE,\r\n        CHECKER_ROUTE,\r\n        REWRITER_ROUTE,\r\n      ],\r\n    },\r\n  ],\r\n  {\r\n    basename: \"/\",\r\n  }\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={THEME}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <RouterProvider router={router} />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","export const EN_COMPONENT = {\r\n  math: {\r\n    truthTable: {\r\n      warning:\r\n        \"The truth table for this expression is automatically hidden due to its size. You can press the button below to show the table, but this process can take a long time to complete or even crash the application. For expressions with many propositions, truth table is not the recommemnded way to visualize them.\",\r\n      confirm: \"I understand\",\r\n      title: \"Truth Table\",\r\n    },\r\n  },\r\n};\r\n","export const en = {\r\n  translation: {\r\n    component: {\r\n      playground: {\r\n        config: {\r\n          true: \"True\",\r\n          false: \"False\",\r\n          editTruthValue: \"Modify propositions\",\r\n        },\r\n      },\r\n      common: {\r\n        editor: {\r\n          run: {\r\n            label: \"Run\",\r\n            alt: \"CTRL + ENTER\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    nav: {\r\n      home: \"Home\",\r\n      solver: \"Solver\",\r\n      evaluator: \"Evaluator\",\r\n      simplifier: \"Simplifier\",\r\n      checker: \"Tautology checker\",\r\n    },\r\n    view: {\r\n      home: {\r\n        tools: \"Tools\",\r\n        card: {\r\n          solver: {\r\n            title: \"Solver\",\r\n            desc: \"Solve an expression with truth table, graph, and step-by-step calculation.\",\r\n          },\r\n          evaluator: {\r\n            title: \"Evaluator\",\r\n            desc: \"Evaluate expressions according to given truth values.\",\r\n          },\r\n          rewriter: {\r\n            title: \"Rewriter\",\r\n            desc: \"Transform an expression into a different basis with equivalent truth values.\",\r\n          },\r\n          checker: {\r\n            title: \"Tautology checker\",\r\n            desc: \"Check if an expression is always true.\",\r\n          },\r\n        },\r\n      },\r\n      solver: {\r\n        truthTable: {\r\n          title: \"Truth Table\",\r\n        },\r\n        stepByStep: {\r\n          title: \"Step-by-step Evaluation\",\r\n        },\r\n        graph: {\r\n          title: \"Step-by-step\",\r\n        },\r\n        feedback: {\r\n          noExpression:\r\n            \"No expression to display. Evaluate one to see how it's interpreted!\",\r\n        },\r\n        howToUse: {\r\n          title: \"Not sure where to begin?\",\r\n          link: \"Read the Manual\",\r\n        },\r\n      },\r\n    },\r\n    common: {\r\n      proposition: \"Proposition\",\r\n      truthValue: \"Truth value\",\r\n      true: \"True\",\r\n      false: \"False\",\r\n      close: \"Close\",\r\n      connectives: {\r\n        negation: \"Negation\",\r\n        conjunction: \"Conjunction\",\r\n        disjunction: \"Disjunction\",\r\n        implication: \"Implication\",\r\n        equivalence: \"Equivalence\",\r\n      },\r\n    },\r\n    editor: {\r\n      originalPanel: \"Original\",\r\n      simplifiedPanel: \"Simplified\",\r\n      howToUse: \"How to use?\",\r\n      run: \"Run\",\r\n      allowedOperatorLabel: \"Connectives to keep\",\r\n    },\r\n    playground: {\r\n      feedback: {\r\n        dialogInfo:\r\n          \"Tap on a circle to modify the truth value of the expression.\",\r\n      },\r\n      graph: {\r\n        noEvaluationToDisplay:\r\n          \"No evaluation step to display. Evaluate an expression to see steps here.\",\r\n        cannotDisplayEvaluation:\r\n          \"Cannot display evaluation step. Please check the expression and try again.\",\r\n        center: \"Center Graph\",\r\n      },\r\n      playback: {\r\n        forward: \"Forward\",\r\n        rewind: \"Rewind\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const th = {\r\n  translation: {\r\n    common: {\r\n      proposition: \"ประพจน์\",\r\n      truthValue: \"ค่าความจริง\",\r\n      close: \"ปิด\",\r\n      true: \"จริง\",\r\n      false: \"เท็จ\",\r\n      connectives: {\r\n        negation: \"นิเสธ\",\r\n        conjunction: \"และ\",\r\n        disjunction: \"หรือ\",\r\n        implication: \"ถ้า แล้ว\",\r\n        equivalence: \"ก็ต่อเมื่อ\",\r\n      },\r\n    },\r\n    editor: {\r\n      originalPanel: \"รูปเดิม\",\r\n      simplifiedPanel: \"รูปอย่างง่าย\",\r\n      howToUse: \"คู่มือการใช้งาน\",\r\n      run: \"คำนวณ\",\r\n      allowedOperatorLabel: \"ตัวเชื่อมที่คงไว้\",\r\n    },\r\n    playground: {\r\n      feedback: {\r\n        dialogInfo:\r\n          \"แตะที่วงลมสีเขียวเพื่อแก้ไขค่าความจริงของนิพจน์\",\r\n        empty:\r\n          \"ไม่มีประพจน์ให้แสดงในขณะนี้ คำนวณประพจน์เพื่อตรวจสอบว่าโปรแกรมตีความถูกต้องหรือไม่\",\r\n      },\r\n      graph: {\r\n        noEvaluationToDisplay:\r\n          \"ไม่มีขั้นตอนการคำนวณให้แสดงในขณะนี้ คำนวณประพจน์เพื่อแสดงขั้นตอน\",\r\n        cannotDisplayEvaluation:\r\n          \"เกิดข้อผิดพลาด ไม่สามารถแสดงขั้นตอนการคำนวณได้ กรุณาตรวจสอบประพจน์และลองคำนวณอีกครั้ง\",\r\n        center: \"กลับสู่ศูนย์กลาง\",\r\n      },\r\n\r\n      playback: {\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n        forward: \"เดินหน้า\",\r\n        rewind: \"ถอยหลัง\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","import i18next from \"i18next\";\r\nimport {\r\n  default as Backend,\r\n  default as LangDectector,\r\n} from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { EN_COMPONENT } from \"./en/component\";\r\nimport { en } from \"./en/translation\";\r\nimport { th } from \"./th/translation\";\r\n\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    resources: {\r\n      en: {\r\n        translation: en.translation,\r\n        component: EN_COMPONENT,\r\n      },\r\n      th,\r\n    },\r\n  });\r\n\r\nexport default i18next;\r\n","import { App } from \"$App/App\";\nimport \"$locales/config\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport \"$core/interpreter/grammar\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["Operator","SyntaxTreeNodeType","collectBinaryNodes","operator","left","right","node","i","grammar","ohm.grammar","semantics","leftExpr","_","rightExpr","leftTree","rightTree","expr","_open","_close","_id","id","children","n","parse","content","m","LANGUAGES","LanguageSwitcher","i18n","useTranslation","anchor","setAnchor","useState","handleClose","Fragment","jsx","Tooltip","Typography","IconButton","e","TranslateRounded","Menu","shape","lang","index","selected","jsxs","MenuItem","ListItemIcon","CheckRounded","ListItemText","ToolNavDropDown","props","items","handleOpen","event","Button","KeyboardArrowDownRounded","theme","href","label","isSelected","NavLink","NAV_ITEMS","MainLayout","t","pathname","useLocation","Paper","Stack","Link","HomeRounded","Outlet","CARDS","HomeView","Box","Masonry","title","desc","Card","palette","CardHeader","CardContent","syntaxTreeToString","tree","operandRepr","leftRepr","rightRepr","rewriteEquivalence","p","q","rewriteImplication","rewriteTree","expandInward","leftExp","rightExp","simplifyDisjunctionClause","clause","nodes","simplified","seen","symbol","collectClause","subClause","flattened","group","element","syntaxTreeFromClause","syntaxTreeNormalize","next","OPERATOR_REPR","OPERATOR_EVAL_FN","l","r","_syntaxTreetoExprTree","orderStart","nodeType","child","exprTreeFromSyntaxTree","_exprTreeCollectSymbols","symbols","exprTreeCollectSymbols","exprTree","_exprTreeToLatex","table","exprTreeToLatex","exprTreeToLatexSubstitute","symbolMap","StyledLatex","sx","tex","displayMode","ref","useRef","useEffect","katex","EditorRibbonButton","options","onClick","open","setOpen","setSelected","anchorRef","ButtonGroup","KeyboardArrowUpRounded","option","OPERATOR_TEXT","OPERATOR_SYMBOL","EditorRibbon","value","Editor","placeholder","onChange","inputRef","handleInsertChar","char","TextField","StyledOutputCard","CheckerView","data","defaultUserInput","useLoaderData","submit","useSubmit","userInput","setUserInput","handleSubmit","PlayArrowRounded","Alert","AlertTitle","CHECKER_ROUTE","request","userInputRaw","loaderData","result","syntaxTree","normalSyntaxTree","PropositionConfig","Grid2","sym","FormControl","FormLabel","RadioGroup","FormControlLabel","Radio","EvaluatorView","symbolTable","setSymbolTable","ok","Divider","k","v","prev","EVALUATOR_ROUTE","NOT","operand","BINARY","AND","OR","IMPLIES","REWRITE_REGISTRY","registerRewriteRule","trigger","basis","rewrite","getRewriteRulesFor","rules","rule","op","syntaxTreeRewrite","normalTree","rewrittenTree","RewriteView","setBasis","FormGroup","Checkbox","REWRITER_ROUTE","url","basisRaw","rewriteResult","StyledAlert","rest","useTheme","getPermutation","size","perm","permSize","repr","j","traverse","accum","minified","exprTreeFlattenPostOrder","StyledTableCell","TableCell","alpha","TruthTable_","slotProps","userConfirmed","setUserConfirmed","columns","TableContainer","Table","TableHead","TableRow","col","TableBody","column","colIndex","TruthTable","memo","StyledTooltipIconButton","onKeyPress","disabled","GraphControl","maxValue","minValue","isAnimationPlaying","onAnimationPause","onAnimationPlay","onAnimationReplay","handleForward","handleRewind","Slider","KeyboardArrowLeftRounded","ReplayRounded","PauseRounded","KeyboardArrowRightRounded","StyledFAB","Fab","TreeGraphLink","link","order","source","target","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","x","y","typography","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","Group","flatten_expr","d","TreeGraph","viewportRef","hierarchy","viewportWidth","viewportHeight","treeWidth","treeHeight","nodeRadius","Zoom","zoom","Tree","treeHeir","ControlCameraRounded","Graph","step","setStep","maxStep","setMaxStep","isPlaying","setIsPlaying","intervalRef","isPlayingRef","currentFrameRef","steps","evaluated","childEval","childStep","leftEval","leftSubstituted","leftStep","rightEval","rightRawRepr","rightSubstituted","rightStep","exprTreeFlattenStepByStep","StepByStepEvaluationControl","FirstPageRounded","LastPageRounded","SubstitutionStepDisplay","subStep","references","subStepIndex","stepIndex","prevMarker","currMarker","taggedExpr","StepDisplay","StepByStepEvaluation_","currentStep","setCurrentStep","useMemo","StepByStepEvaluation","SolverOutputGroup_","symbolSet","handleSymbolChange","exprLatex","SolverOutputGroup","SolverView","prevUserInput","WarningRounded","SOLVER_ROUTE","THEME","createTheme","brown","green","amber","globalStyles","GlobalStyles","router","createHashRouter","App","ThemeProvider","CssBaseline","RouterProvider","EN_COMPONENT","en","th","i18next","Backend","LangDectector","initReactI18next","createRoot","StrictMode"],"mappings":"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"}