{"version":3,"file":"index-kRPHKxVx.js","sources":["../../src/types/ast.ts","../../src/assets/ohm.ts","../../src/core/interpreter/parser.ts","../../src/components/StyledLatex.tsx","../../src/components/StyledTooltipButton.tsx","../../src/components/EditorRibbonInsert.tsx","../../src/components/EditorRibbon.tsx","../../src/components/EditorTextField.tsx","../../src/components/Editor.tsx","../../src/core/tree/conversion.ts","../../src/components/LatexDisplay.tsx","../../src/core/tree/expr/evaluate.ts","../../src/core/tree/expr/latex.ts","../../src/components/PlaygroundDialogConfig.tsx","../../src/components/PlaygroundDialog.tsx","../../src/components/StyledIconButton.tsx","../../src/components/PlaygroundPlaybackControl.tsx","../../src/components/StyledFAB.tsx","../../src/components/TreeGraphLink.tsx","../../src/components/TreeGraphNode.tsx","../../src/components/TreeGraph.tsx","../../src/components/Playground.tsx","../../src/locales/en/translation.ts","../../src/locales/th/translation.ts","../../src/locales/config.ts","../../src/views/EditorView.tsx","../../src/assets/blogs/BooleanAlgebraSummary/en.txt","../../src/assets/blogs/UserManual/en.txt","../../src/components/StyledMarkdown.tsx","../../src/hooks/useFetchMarkdown.ts","../../src/views/TheoremBlogView.tsx","../../src/App/theme.ts","../../src/App/App.tsx","../../src/main.tsx"],"sourcesContent":["export enum SyntaxTreeNodeKind {\r\n  CONST = \"CONSTANT\",\r\n  IDEN = \"IDEN\",\r\n  UNARY = \"UNARY\",\r\n  BINARY = \"BINARY\",\r\n}\r\n\r\nexport enum Operator {\r\n  IFF = \"IFF\",\r\n  IMPL = \"IMPL\",\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  NOT = \"NOT\",\r\n}\r\n\r\nexport type SyntaxTreeNodeConst = {\r\n  nodeType: SyntaxTreeNodeKind.CONST;\r\n  value: boolean;\r\n};\r\nexport type SyntaxTreeNodeIden = {\r\n  nodeType: SyntaxTreeNodeKind.IDEN;\r\n  symbol: string;\r\n};\r\nexport type SyntaxTreeNodeBinary = {\r\n  nodeType: SyntaxTreeNodeKind.BINARY;\r\n  operator: Exclude<Operator, Operator.NOT>;\r\n  left: SyntaxTree;\r\n  right: SyntaxTree;\r\n};\r\nexport type SyntaxTreeNodeUnary = {\r\n  nodeType: SyntaxTreeNodeKind.UNARY;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type SyntaxTree =\r\n  | SyntaxTreeNodeBinary\r\n  | SyntaxTreeNodeUnary\r\n  | SyntaxTreeNodeIden\r\n  | SyntaxTreeNodeConst;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n","import {\r\n  Operator,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/ast\";\r\nimport * as ohm from \"ohm-js\";\r\n\r\nconst collectBinaryNodes = (\r\n  operator: Exclude<Operator, Operator.NOT>,\r\n  left: SyntaxTree,\r\n  right: SyntaxTree[]\r\n) => {\r\n  let node: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator,\r\n    left,\r\n    right: right[0],\r\n  };\r\n  for (let i = 1; i < right.length; i++) {\r\n    node = {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator,\r\n      left: node,\r\n      right: right[i],\r\n    };\r\n  }\r\n  return node;\r\n};\r\n\r\nexport const grammar = ohm.grammar(String.raw`\r\nBooleanExpressions {\r\n  Expression\r\n    = Iff \r\n\r\n  Iff\r\n    = Implies (iff_sym Implies)*\r\n\r\n  Implies\r\n    = Or (implies_sym Or)*\r\n\r\n  Or\r\n    = And (or_sym And)*\r\n\r\n  And\r\n    = Not (and_sym Not)*\r\n\r\n  Not\r\n    = not_sym Not                   --not\r\n    | Primary\r\n\r\n  Primary\r\n    = \"(\" Expression \")\" --group\r\n    | true_sym    --lit_true\r\n    | false_sym   --lit_false\r\n    | identifier  --variable\r\n\r\n  identifier\r\n    = letter+\r\n  \r\n  iff_sym \r\n    = \"iff\"\r\n    | \"⇔\"\r\n  \r\n  implies_sym \r\n    = \"implies\"\r\n    | \"⇒\"\r\n  \r\n  or_sym\r\n    = \"or\"\r\n    | \"∨\"\r\n\r\n  and_sym\r\n    = \"and\"\r\n    | \"∧\"\r\n  \r\n  not_sym\r\n    = \"not\"\r\n    | \"¬\"\r\n\r\n  true_sym\r\n    = \"⊤\"\r\n    | \"T\"\r\n    | \"1\"\r\n\r\n  false_sym\r\n    = \"⊥\"\r\n    | \"F\"\r\n    | \"0\"\r\n}\r\n`);\r\n\r\nexport const semantics = grammar.createSemantics();\r\nsemantics.addOperation(\"buildTree\", {\r\n  Expression(e) {\r\n    return e.buildTree();\r\n  },\r\n\r\n  Iff(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IFF,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Implies(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IMPL,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Or(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.OR,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  And(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.AND,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Not_not(_, expr) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: expr.buildTree(),\r\n    };\r\n  },\r\n\r\n  Primary_group(_open, expr, _close) {\r\n    return expr.buildTree();\r\n  },\r\n\r\n  Primary_lit_true(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.CONST,\r\n      value: true,\r\n    };\r\n  },\r\n\r\n  Primary_lit_false(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.CONST,\r\n      value: false,\r\n    };\r\n  },\r\n\r\n  Primary_variable(id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.IDEN,\r\n      symbol: id.sourceString,\r\n    };\r\n  },\r\n\r\n  identifier(_) {\r\n    return this.sourceString;\r\n  },\r\n\r\n  _iter(...children) {\r\n    return children.map((n) => n.buildTree());\r\n  },\r\n});\r\n","import { grammar, semantics } from \"$assets/ohm\";\r\nimport { SyntaxTree } from \"$types/ast\";\r\nimport { Maybe } from \"$types/common\";\r\n\r\nexport const parse = (\r\n  content: string\r\n): Maybe<SyntaxTree, string> => {\r\n  const m = grammar.match(content);\r\n  if (m.succeeded()) {\r\n    const tree = semantics(m).buildTree();\r\n    return { ok: true, data: tree };\r\n  } else {\r\n    return {\r\n      ok: false,\r\n      other: m.shortMessage ?? \"\",\r\n    };\r\n  }\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport katex, { KatexOptions } from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  options?: KatexOptions;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { tex, options } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, options);\r\n    }\r\n  }, [ref, tex, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      sx={{\r\n        textWrap: \"nowrap\",\r\n      }}\r\n      component=\"span\"\r\n      overflow=\"auto\"\r\n    />\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonProps,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\n\r\ntype StyledTooltipButtonProps = {\r\n  onClick: () => void;\r\n  title: string;\r\n  variant: ButtonProps[\"variant\"];\r\n  children: ReactNode;\r\n  startIcon?: ReactNode;\r\n};\r\nexport const StyledTooltipButton: FC<\r\n  StyledTooltipButtonProps\r\n> = (props) => {\r\n  const { children, variant, startIcon, onClick, title } =\r\n    props;\r\n\r\n  return (\r\n    <Tooltip title={<Typography>{title}</Typography>}>\r\n      <Button\r\n        disableElevation\r\n        variant={variant}\r\n        startIcon={startIcon}\r\n        onClick={onClick}\r\n      >\r\n        {children}\r\n      </Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { ButtonGroup } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\nconst OPERATOR = [\r\n  {\r\n    name: \"negation\",\r\n    label: \"\\\\lnot\",\r\n    insertChar: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    name: \"conjunction\",\r\n    label: \"\\\\land\",\r\n    insertChar: \"\\u{2227}\",\r\n  },\r\n  {\r\n    name: \"disjunction\",\r\n    label: \"\\\\lor\",\r\n    insertChar: \"\\u{2228}\",\r\n  },\r\n  {\r\n    name: \"implication\",\r\n    label: \"\\\\implies\",\r\n    insertChar: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    name: \"equivalence\",\r\n    label: \"\\\\iff\",\r\n    insertChar: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonInsertProps = {\r\n  onInsertChar: (char: string) => void;\r\n};\r\nexport const EditorRibbonInsert: FC<\r\n  EditorRibbonInsertProps\r\n> = (props) => {\r\n  const { onInsertChar } = props;\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common.connectives\",\r\n  });\r\n\r\n  return (\r\n    <ButtonGroup\r\n      disableElevation\r\n      variant=\"outlined\"\r\n    >\r\n      {OPERATOR.map((btn, index) => (\r\n        <StyledTooltipButton\r\n          variant=\"outlined\"\r\n          key={\"insert-btn-\" + index}\r\n          title={t(btn.name)}\r\n          onClick={() => onInsertChar(btn.insertChar)}\r\n        >\r\n          <StyledLatex tex={btn.label} />\r\n        </StyledTooltipButton>\r\n      ))}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n","import { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport { Stack, Toolbar, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EditorRibbonInsert } from \"./EditorRibbonInsert\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\ntype EditorRibbonProps = {\r\n  onExecute: () => void;\r\n  onInsertChar: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { onExecute, onInsertChar } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Toolbar\r\n      variant=\"dense\"\r\n      disableGutters\r\n      sx={{\r\n        gap: 1,\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Stack\r\n        sx={{ width: \"100%\" }}\r\n        gap={1}\r\n        useFlexGap\r\n        flexWrap=\"wrap\"\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <EditorRibbonInsert onInsertChar={onInsertChar} />\r\n        <StyledTooltipButton\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={onExecute}\r\n          title={\"CTRL + ENTER\"}\r\n        >\r\n          {t(\"editor.run\")}\r\n        </StyledTooltipButton>\r\n      </Stack>\r\n      <Typography\r\n        color=\"primary\"\r\n        component=\"a\"\r\n        href=\"#user-manual\"\r\n        sx={{\r\n          textDecorationLine: \"underline\",\r\n        }}\r\n      >\r\n        {t(\"editor.howToUse\")}\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\n","import { TextField } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype EditorTextFieldProps = {\r\n  value: string;\r\n  rows: number;\r\n  onChange: (value: string) => void;\r\n  onKeyDown: (e: React.KeyboardEvent) => void;\r\n  placeholder?: string;\r\n};\r\nexport const EditorTextField: FC<EditorTextFieldProps> = (\r\n  props\r\n) => {\r\n  const { placeholder, rows, value, onChange, onKeyDown } =\r\n    props;\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      multiline\r\n      rows={rows}\r\n      value={value}\r\n      placeholder={placeholder}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      onKeyDown={onKeyDown}\r\n      slotProps={{\r\n        input: {\r\n          autoComplete: \"off\",\r\n          autoCorrect: \"off\",\r\n          autoCapitalize: \"none\",\r\n          spellCheck: false,\r\n          sx: {\r\n            fontFamily: \"monospace\",\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Stack } from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\nimport { EditorTextField } from \"./EditorTextField\";\r\n\r\ntype EditorProps = {\r\n  // operators: Map<Operator, boolean>;\r\n  onExecute: (value: string) => void;\r\n  // onOperatorChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const Editor: FC<EditorProps> = (props) => {\r\n  const {\r\n    onExecute,\r\n    // onOperatorChange,\r\n    // operators,\r\n  } = props;\r\n\r\n  const [value, setValue] = useState(\r\n    \"not (p and q) iff (not p) or (not q)\"\r\n  );\r\n\r\n  const handleExecute = () => {\r\n    onExecute(value);\r\n  };\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    setValue((prev) => `${prev} ${char}`);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && e.ctrlKey) {\r\n      handleExecute();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon\r\n        onExecute={handleExecute}\r\n        onInsertChar={handleInsertChar}\r\n      />\r\n      <EditorTextField\r\n        placeholder=\"ex. not (p and q) iff (not p) or (not q)\"\r\n        value={value}\r\n        onChange={setValue}\r\n        onKeyDown={handleKeyDown}\r\n        rows={5}\r\n      />\r\n      {/* <EditorSimplConfigGroup\r\n        values={operators}\r\n        onChange={onOperatorChange}\r\n      /> */}\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  Operator,\r\n  SymbolTable,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/ast\";\r\nimport {\r\n  ExprTreeBinary,\r\n  ExprTreeConst,\r\n  ExprTreeIden,\r\n  ExprTreeUnary,\r\n} from \"$types/graph\";\r\n\r\nconst OPERATOR_REPR: Record<Operator, string> = {\r\n  [Operator.AND]: `\\\\land`,\r\n  [Operator.OR]: `\\\\lor`,\r\n  [Operator.IFF]: `\\\\iff`,\r\n  [Operator.IMPL]: `\\\\implies`,\r\n  [Operator.NOT]: `\\\\lnot`,\r\n};\r\ntype EvalFn = (t: SymbolTable) => boolean;\r\nconst OPERATOR_EVAL_FN: Record<\r\n  Exclude<Operator, Operator.NOT>,\r\n  (l: EvalFn, r: EvalFn) => (t: SymbolTable) => boolean\r\n> = {\r\n  [Operator.AND]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) && r(t),\r\n  [Operator.OR]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) || r(t),\r\n  [Operator.IMPL]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      !l(t) || r(t),\r\n  [Operator.IFF]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) === r(t),\r\n};\r\n\r\nconst _syntaxTreeToLatex = (tree: SyntaxTree): string => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    return tree.symbol;\r\n  }\r\n  if (nodeType === SyntaxTreeNodeKind.CONST) {\r\n    return tree.value ? `\\\\top` : `\\\\bot`;\r\n  }\r\n\r\n  if (nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    const { operand } = tree;\r\n    const value = _syntaxTreeToLatex(operand);\r\n    if (\r\n      operand.nodeType === SyntaxTreeNodeKind.IDEN ||\r\n      operand.nodeType === SyntaxTreeNodeKind.CONST\r\n    ) {\r\n      return `\\\\lnot ${value}`;\r\n    }\r\n    return `\\\\lnot (${value})`;\r\n  }\r\n\r\n  const { left, right } = tree;\r\n\r\n  let labelLeft = _syntaxTreeToLatex(left);\r\n  if (left.nodeType === SyntaxTreeNodeKind.BINARY) {\r\n    labelLeft = `( ${labelLeft} )`;\r\n  }\r\n\r\n  let labelRight = _syntaxTreeToLatex(right);\r\n  if (right.nodeType === SyntaxTreeNodeKind.BINARY) {\r\n    labelRight = `( ${labelRight} )`;\r\n  }\r\n\r\n  const repr = OPERATOR_REPR[tree.operator];\r\n  return `${labelLeft} ${repr} ${labelRight}`;\r\n};\r\n\r\nexport const syntaxTreeToLatex = (tree: SyntaxTree) => {\r\n  return _syntaxTreeToLatex(tree);\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  orderStart: number\r\n) => {\r\n  const { nodeType } = tree;\r\n\r\n  switch (nodeType) {\r\n    case SyntaxTreeNodeKind.CONST: {\r\n      const node: ExprTreeConst = {\r\n        eval: (_) => tree.value,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: tree.value ? \"\\\\top\" : `\\\\bot`,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeKind.IDEN: {\r\n      const node: ExprTreeIden = {\r\n        eval: (t) => t.get(tree.symbol) ?? false,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: tree.symbol,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeKind.UNARY: {\r\n      const child = _syntaxTreetoExprTree(\r\n        tree.operand,\r\n        orderStart\r\n      );\r\n      const node: ExprTreeUnary = {\r\n        repr: OPERATOR_REPR[tree.operator],\r\n        child,\r\n        nodeType,\r\n        eval: (t) => !child.eval(t),\r\n        order: child.order + 1,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeKind.BINARY: {\r\n      const left = _syntaxTreetoExprTree(\r\n        tree.left,\r\n        orderStart\r\n      );\r\n      const right = _syntaxTreetoExprTree(\r\n        tree.right,\r\n        left.order\r\n      );\r\n      const node: ExprTreeBinary = {\r\n        nodeType,\r\n        eval: OPERATOR_EVAL_FN[tree.operator](\r\n          left.eval,\r\n          right.eval\r\n        ),\r\n        left,\r\n        right,\r\n        order: right.order + 1,\r\n        repr: OPERATOR_REPR[tree.operator],\r\n      };\r\n      return node;\r\n    }\r\n  }\r\n};\r\n\r\nexport const syntaxTreetoExprTree = (tree: SyntaxTree) => {\r\n  return _syntaxTreetoExprTree(tree, 1);\r\n};\r\n","import {\r\n  alpha,\r\n  Box,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype LatexDisplayProps = {\r\n  text: string | null;\r\n  emptyText: string;\r\n  error?: boolean;\r\n};\r\nexport const LatexDisplay: FC<LatexDisplayProps> = (\r\n  props\r\n) => {\r\n  const { text, emptyText, error } = props;\r\n  const { palette, shape } = useTheme();\r\n\r\n  const color = error\r\n    ? palette.error.light\r\n    : palette.secondary.light;\r\n  return (\r\n    <Box\r\n      paddingX={2}\r\n      paddingY={0.5}\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      minHeight={100} // Otherwise the size of the box will be smaller in its empty state\r\n      sx={{\r\n        borderRadius: shape.borderRadius,\r\n        backgroundColor: alpha(color, 0.4),\r\n      }}\r\n    >\r\n      {text === null ? (\r\n        <Typography component=\"span\">\r\n          <pre>{emptyText}</pre>\r\n        </Typography>\r\n      ) : (\r\n        <StyledLatex tex={text} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { SyntaxTreeNodeKind } from \"$types/ast\";\r\nimport { ExprTree } from \"$types/graph\";\r\n\r\nconst _exprTreeCollectSymbols = (\r\n  tree: ExprTree,\r\n  symbols: Set<string>\r\n): void => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      symbols.add(tree.repr);\r\n      return;\r\n    case SyntaxTreeNodeKind.UNARY:\r\n      _exprTreeCollectSymbols(tree.child, symbols);\r\n      return;\r\n    case SyntaxTreeNodeKind.BINARY:\r\n      _exprTreeCollectSymbols(tree.left, symbols);\r\n      _exprTreeCollectSymbols(tree.right, symbols);\r\n      return;\r\n  }\r\n};\r\n\r\nexport const exprTreeCollectSymbols = (\r\n  exprTree: ExprTree\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  _exprTreeCollectSymbols(exprTree, symbols);\r\n  return symbols;\r\n};\r\n","import { SyntaxTreeNodeKind } from \"$types/ast\";\r\nimport { ExprTree } from \"$types/graph\";\r\n\r\nconst _exprTreeToLatex = (tree: ExprTree): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return tree.repr;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      return tree.repr;\r\n    case SyntaxTreeNodeKind.UNARY: {\r\n      const child = _exprTreeToLatex(tree.child);\r\n      if (\r\n        tree.child.nodeType === SyntaxTreeNodeKind.BINARY ||\r\n        tree.child.nodeType === SyntaxTreeNodeKind.UNARY\r\n      ) {\r\n        return `${tree.repr} ( ${child} )`;\r\n      }\r\n      return `${tree.repr} ${child}`;\r\n    }\r\n    case SyntaxTreeNodeKind.BINARY: {\r\n      let left = _exprTreeToLatex(tree.left);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeKind.BINARY ||\r\n        tree.left.nodeType === SyntaxTreeNodeKind.UNARY\r\n      ) {\r\n        left = `( ${left} )`;\r\n      }\r\n\r\n      let right = _exprTreeToLatex(tree.right);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeKind.BINARY ||\r\n        tree.right.nodeType === SyntaxTreeNodeKind.UNARY\r\n      ) {\r\n        right = `( ${right} )`;\r\n      }\r\n\r\n      return `( ${left} ) ${tree.repr} ( ${right} )`;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeToLatex = (exprTree: ExprTree) => {\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n","import {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype PlaygroundDialogConfigProps = {\r\n  table: Map<string, boolean>;\r\n  selected: Set<string>;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const PlaygroundDialogConfig: FC<\r\n  PlaygroundDialogConfigProps\r\n> = (props) => {\r\n  const { table, selected, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common\",\r\n  });\r\n\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={1}\r\n      width=\"100%\"\r\n    >\r\n      {[...selected].map((symbol) => (\r\n        <FormControl\r\n          key={\"symbol-\" + symbol}\r\n          fullWidth\r\n        >\r\n          <FormLabel\r\n            sx={{\r\n              width: \"100%\",\r\n              overflowX: \"auto\",\r\n            }}\r\n          >\r\n            <StyledLatex\r\n              tex={`\\\\text{\\`\\`$${symbol}$''}`}\r\n            />\r\n          </FormLabel>\r\n          <RadioGroup\r\n            row\r\n            value={table.get(symbol) ? \"T\" : \"F\"}\r\n            onChange={(e) =>\r\n              onChange(symbol, e.target.value === \"T\")\r\n            }\r\n          >\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"T\"\r\n              label={t(\"true\")}\r\n            />\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"F\"\r\n              label={t(\"false\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n","import { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/graph\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { PlaygroundDialogConfig } from \"./PlaygroundDialogConfig\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype PlaygroundDialogProps = {\r\n  node: ExprTree;\r\n  open: boolean;\r\n  value: Map<string, boolean>;\r\n  onChange: (k: string, v: boolean) => void;\r\n  onClose: () => void;\r\n};\r\nexport const PlaygroundDialog: FC<PlaygroundDialogProps> = (\r\n  props\r\n) => {\r\n  const { node, open, onClose, onChange, value } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const { palette, shape } = useTheme();\r\n\r\n  const selected = exprTreeCollectSymbols(node);\r\n\r\n  const evalValue = node.eval(value)\r\n    ? t(\"common.true\")\r\n    : t(\"common.false\");\r\n  const evalText = t(\"common.truthValue\");\r\n  const text = `${evalText}: ${evalValue}`;\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n      open={open}\r\n      scroll=\"body\"\r\n      onClose={onClose}\r\n      PaperProps={{\r\n        elevation: 0,\r\n        sx: {\r\n          borderRadius: shape.borderRadius,\r\n          borderStyle: \"solid\",\r\n          borderWidth: 4,\r\n          borderColor: palette.primary.main,\r\n        },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <StyledLatex\r\n          tex={exprTreeToLatex(node)}\r\n          options={{\r\n            displayMode: true,\r\n            output: \"htmlAndMathml\",\r\n          }}\r\n        />\r\n        <Typography fontStyle=\"italic\">{text}</Typography>\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n        <PlaygroundDialogConfig\r\n          selected={selected}\r\n          table={value}\r\n          onChange={onChange}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          disableElevation\r\n          disableRipple\r\n          variant=\"text\"\r\n          onClick={onClose}\r\n        >\r\n          {t(\"playground.dialog.close\")}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import {\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledIconButtonProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  onKeyPress: (e: KeyboardEvent<HTMLButtonElement>) => void;\r\n};\r\nexport const StyledIconButton: FC<StyledIconButtonProps> = (\r\n  props\r\n) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip\r\n      placement=\"top\"\r\n      title={<Typography>{title}</Typography>}\r\n    >\r\n      <span>\r\n        <IconButton\r\n          disableRipple={disabled}\r\n          color=\"primary\"\r\n          onClick={onClick}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledIconButton } from \"./StyledIconButton\";\r\n\r\ntype PlaygroundPlaybackControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  disabled: boolean;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n};\r\nexport const PlaygroundPlaybackControl: FC<\r\n  PlaygroundPlaybackControlProps\r\n> = (props) => {\r\n  const { disabled, maxValue, minValue, onChange, value } =\r\n    props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"playground.playback\",\r\n  });\r\n\r\n  const handleForward = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  const handleKeyPress = (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      handleForward();\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      handleRewind();\r\n    }\r\n  };\r\n\r\n  // There is a possibility for the ui to fall apart due to overflow\r\n  // **IF** the order is large enough eg 20 digits long\r\n  // in such a case, the label would over and pushes the forward arrow\r\n  // and the slider out of view\r\n  // but let's be real, we run into other problem any way\r\n  // if the evaluation of a tree that large\r\n  const maxLabel = disabled ? \"0\" : maxValue.toString();\r\n  const valueLabel = disabled\r\n    ? \"0\"\r\n    : value.toString().padStart(maxLabel.length, \"0\");\r\n  const label = `${valueLabel}/${maxLabel}`;\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      paddingX={2}\r\n      paddingY={1}\r\n    >\r\n      <StyledIconButton\r\n        disabled={value <= minValue}\r\n        title={t(\"rewind\")}\r\n        onClick={handleRewind}\r\n        onKeyPress={handleKeyPress}\r\n      >\r\n        <KeyboardArrowLeftRounded />\r\n      </StyledIconButton>\r\n      <Typography fontFamily=\"monospace\">\r\n        {label}\r\n      </Typography>\r\n      <StyledIconButton\r\n        disabled={value >= maxValue}\r\n        title={t(\"forward\")}\r\n        onKeyPress={handleKeyPress}\r\n        onClick={handleForward}\r\n      >\r\n        <KeyboardArrowRightRounded />\r\n      </StyledIconButton>\r\n      <Slider\r\n        disabled={disabled}\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Fab, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactElement } from \"react\";\r\n\r\ntype StyledFABProps = {\r\n  title: string;\r\n  onClick: () => void;\r\n  children: ReactElement;\r\n};\r\nexport const StyledFAB: FC<StyledFABProps> = (props) => {\r\n  const { children, onClick, title } = props;\r\n  return (\r\n    <Fab\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: 16,\r\n        bottom: 16,\r\n      }}\r\n    >\r\n      <Tooltip\r\n        placement=\"right\"\r\n        title={<Typography>{title}</Typography>}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    </Fab>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/graph\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { SymbolTable } from \"$types/ast\";\r\nimport { ExprTree } from \"$types/graph\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, MouseEvent, useEffect, useRef } from \"react\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  onClick: (node: ExprTree) => void;\r\n  order: number;\r\n  onMouseLeave: () => void;\r\n  onMouseEnter: (\r\n    x: number,\r\n    y: number,\r\n    data: (t: SymbolTable) => boolean\r\n  ) => void;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const {\r\n    order,\r\n    node,\r\n    onClick,\r\n    onMouseLeave,\r\n    onMouseEnter,\r\n  } = props;\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.repr)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.repr]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n\r\n  const handleMouseLeave = (\r\n    e: MouseEvent<SVGGElement> & MouseEvent\r\n  ) => {\r\n    e.stopPropagation();\r\n    onMouseLeave();\r\n  };\r\n\r\n  const handleMouseEnter = (\r\n    e: MouseEvent<SVGGElement> & MouseEvent\r\n  ) => {\r\n    e.stopPropagation();\r\n    onMouseEnter(x, y, data.eval);\r\n  };\r\n\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseEnter={handleMouseEnter}\r\n      onClick={() => onClick(data)}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        opacity={isNodeVisibleNow ? 1 : 0.5}\r\n        r={30}\r\n        fill={palette.secondary.light}\r\n        stroke={palette.primary.light}\r\n        strokeOpacity={0.8}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        color={palette.secondary.contrastText}\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n    </Group>\r\n  );\r\n};\r\n","import {\r\n  SymbolTable,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/ast\";\r\nimport { ExprTree } from \"$types/graph\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport {\r\n  TooltipWithBounds,\r\n  useTooltip,\r\n  useTooltipInPortal,\r\n} from \"@visx/tooltip\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledFAB } from \"./StyledFAB\";\r\nimport { TreeGraphLink } from \"./TreeGraphLink\";\r\nimport { TreeGraphNode } from \"./TreeGraphNode\";\r\n\r\nconst flatten_expr = (d: ExprTree) => {\r\n  switch (d.nodeType) {\r\n    case SyntaxTreeNodeKind.CONST:\r\n      return null;\r\n    case SyntaxTreeNodeKind.IDEN:\r\n      return null;\r\n    case SyntaxTreeNodeKind.UNARY:\r\n      return [d.child];\r\n    case SyntaxTreeNodeKind.BINARY:\r\n      return [d.left, d.right];\r\n  }\r\n};\r\n\r\ntype TreeGraphProps = {\r\n  symbolTable: SymbolTable;\r\n  tree: ExprTree;\r\n  order: number;\r\n  onNodeClick: (node: ExprTree) => void;\r\n  onKeyDown: (e: KeyboardEvent<SVGSVGElement>) => void;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const {\r\n    tree,\r\n    symbolTable,\r\n    order,\r\n    onNodeClick,\r\n    onKeyDown,\r\n  } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const data = hierarchy(tree, flatten_expr);\r\n  const height = (data.height + 1) * 75;\r\n  const width = (data.leaves().length + 1) * 100;\r\n\r\n  const { containerRef } = useTooltipInPortal({\r\n    scroll: true,\r\n    detectBounds: true,\r\n  });\r\n\r\n  const {\r\n    showTooltip,\r\n    hideTooltip,\r\n    tooltipData,\r\n    tooltipOpen,\r\n    tooltipLeft,\r\n    tooltipTop,\r\n  } = useTooltip<(t: SymbolTable) => boolean>();\r\n\r\n  const handleMouseHoverNode = (\r\n    x: number,\r\n    y: number,\r\n    fn: (t: SymbolTable) => boolean\r\n  ) => {\r\n    showTooltip({\r\n      tooltipLeft: x,\r\n      tooltipTop: y,\r\n      tooltipData: fn,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Zoom<SVGSVGElement>\r\n      width={width}\r\n      height={height}\r\n      scaleXMin={1 / 3}\r\n      scaleXMax={4}\r\n      scaleYMin={1 / 3}\r\n      scaleYMax={4}\r\n    >\r\n      {(zoom) => (\r\n        <>\r\n          <svg\r\n            tabIndex={0} // Need tabindex otherwise svg will not send keyboard event\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            ref={zoom.containerRef}\r\n            style={{\r\n              touchAction: \"none\",\r\n            }}\r\n            onKeyDown={onKeyDown}\r\n          >\r\n            <g\r\n              ref={containerRef}\r\n              onTouchStart={zoom.dragStart}\r\n              onTouchMove={zoom.dragMove}\r\n              onTouchEnd={zoom.dragEnd}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={() => {\r\n                zoom.dragEnd();\r\n                hideTooltip();\r\n              }}\r\n              onMouseLeave={zoom.dragEnd}\r\n              transform={zoom.toString()}\r\n            >\r\n              <Tree\r\n                root={data}\r\n                size={[width, height]}\r\n              >\r\n                {(treeHeir) => (\r\n                  <Group>\r\n                    {treeHeir.links().map((link, i) => (\r\n                      <TreeGraphLink\r\n                        key={`link-${i}`}\r\n                        order={order}\r\n                        link={link}\r\n                      />\r\n                    ))}\r\n                    {treeHeir\r\n                      .descendants()\r\n                      .map((node, i) => (\r\n                        <TreeGraphNode\r\n                          key={`node-${i}`}\r\n                          order={order}\r\n                          node={node}\r\n                          onClick={onNodeClick}\r\n                          onMouseEnter={\r\n                            handleMouseHoverNode\r\n                          }\r\n                          onMouseLeave={hideTooltip}\r\n                        />\r\n                      ))}\r\n                  </Group>\r\n                )}\r\n              </Tree>\r\n            </g>\r\n          </svg>\r\n          <StyledFAB\r\n            onClick={zoom.center}\r\n            title={t(\"playground.graph.center\")}\r\n          >\r\n            <ControlCameraRounded />\r\n          </StyledFAB>\r\n          {!zoom.isDragging &&\r\n            tooltipOpen &&\r\n            tooltipData !== undefined &&\r\n            tooltipLeft !== undefined &&\r\n            tooltipTop !== undefined && (\r\n              <TooltipWithBounds\r\n                left={\r\n                  zoom.transformMatrix.scaleX *\r\n                    tooltipLeft +\r\n                  zoom.transformMatrix.translateX\r\n                }\r\n                top={\r\n                  zoom.transformMatrix.scaleY * tooltipTop +\r\n                  zoom.transformMatrix.translateY\r\n                }\r\n              >\r\n                <Typography>\r\n                  {tooltipData(symbolTable)\r\n                    ? t(\"common.true\")\r\n                    : t(\"common.false\")}\r\n                </Typography>\r\n              </TooltipWithBounds>\r\n            )}\r\n        </>\r\n      )}\r\n    </Zoom>\r\n  );\r\n};\r\n","import {\r\n  syntaxTreetoExprTree,\r\n  syntaxTreeToLatex,\r\n} from \"$core/tree/conversion\";\r\nimport { SyntaxTree } from \"$types/ast\";\r\nimport { Maybe } from \"$types/common\";\r\nimport { ExprTree } from \"$types/graph\";\r\nimport {\r\n  alpha,\r\n  Box,\r\n  Divider,\r\n  Stack,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  KeyboardEvent,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LatexDisplay } from \"./LatexDisplay\";\r\nimport { PlaygroundDialog } from \"./PlaygroundDialog\";\r\nimport { PlaygroundPlaybackControl } from \"./PlaygroundPlaybackControl\";\r\nimport { TreeGraph } from \"./TreeGraph\";\r\n\r\ntype PlaygroundProps = {\r\n  maybeTree: Maybe<SyntaxTree, string> | null;\r\n};\r\nexport const Playground: FC<PlaygroundProps> = (props) => {\r\n  const { maybeTree } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const { palette, shape } = useTheme();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [symbolTable, setSymbolTable] = useState(\r\n    new Map<string, boolean>()\r\n  );\r\n\r\n  const [order, setOrder] = useState(0);\r\n  const [maxOrder, setMaxOrder] = useState(0);\r\n\r\n  const [selectedNode, setSelectedNode] =\r\n    useState<ExprTree | null>(null);\r\n  const [exprTree, setExprTree] = useState<ExprTree | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (maybeTree === null || !maybeTree.ok) {\r\n      setOrder(0);\r\n      setMaxOrder(0);\r\n      setExprTree(null);\r\n      return;\r\n    }\r\n    const nextExprTree = syntaxTreetoExprTree(\r\n      maybeTree.data\r\n    );\r\n    setOrder(nextExprTree.order + 1);\r\n    setMaxOrder(nextExprTree.order + 1);\r\n    setExprTree(nextExprTree);\r\n  }, [maybeTree]);\r\n\r\n  const handleNodeClick = (node: ExprTree) => {\r\n    setDialogOpen(true);\r\n    setSelectedNode(node);\r\n  };\r\n\r\n  const handleTableChange = (k: string, v: boolean) => {\r\n    if (maybeTree === null || !maybeTree.ok) {\r\n      return;\r\n    }\r\n    setSymbolTable((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n    // Changing the truth value of the same tree should not cause the playback to reset\r\n    const nextExprTree = syntaxTreetoExprTree(\r\n      maybeTree.data\r\n    );\r\n    setExprTree(nextExprTree);\r\n  };\r\n\r\n  const handleGraphKeyPress = (\r\n    e: KeyboardEvent<SVGSVGElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      setOrder((prev) => Math.min(maxOrder, prev + 1));\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      setOrder((prev) => Math.max(0, prev - 1));\r\n    }\r\n  };\r\n\r\n  let treeGraphText: string | null = null;\r\n  let text: string | null = null;\r\n  if (maybeTree !== null) {\r\n    if (maybeTree.ok) {\r\n      text = syntaxTreeToLatex(maybeTree.data);\r\n    } else {\r\n      text = maybeTree.other.replaceAll(/\"(.*)\"/g, '``$1\"');\r\n      text = `\\\\text{${text}}`;\r\n      treeGraphText = t(\r\n        \"playground.graph.cannotDisplayEvaluation\"\r\n      );\r\n    }\r\n  } else {\r\n    treeGraphText = t(\r\n      \"playground.graph.noEvaluationToDisplay\"\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <LatexDisplay\r\n        text={text}\r\n        error={maybeTree !== null && !maybeTree.ok}\r\n        emptyText={t(\"playground.feedback.empty\")}\r\n      />\r\n      <Box\r\n        ref={containerRef}\r\n        sx={{\r\n          borderWidth: 4,\r\n          borderStyle: \"solid\",\r\n          borderRadius: shape.borderRadius,\r\n          borderColor: alpha(palette.secondary.main, 0.4),\r\n        }}\r\n      >\r\n        <PlaygroundPlaybackControl\r\n          disabled={exprTree === null}\r\n          maxValue={maxOrder}\r\n          minValue={1}\r\n          value={order}\r\n          onChange={setOrder}\r\n        />\r\n        <Divider flexItem />\r\n        <Box\r\n          position=\"relative\"\r\n          height=\"75vh\"\r\n          display=\"flex\"\r\n          width=\"100%\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n          {exprTree !== null ? (\r\n            <TreeGraph\r\n              symbolTable={symbolTable}\r\n              order={order}\r\n              tree={exprTree}\r\n              onNodeClick={handleNodeClick}\r\n              onKeyDown={handleGraphKeyPress}\r\n            />\r\n          ) : (\r\n            <Typography>{treeGraphText}</Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      {selectedNode !== null && (\r\n        <PlaygroundDialog\r\n          node={selectedNode}\r\n          open={dialogOpen}\r\n          value={symbolTable}\r\n          onChange={handleTableChange}\r\n          onClose={() => setDialogOpen(false)}\r\n        />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","export const en = {\r\n  translation: {\r\n    common: {\r\n      truthValue: \"Truth value\",\r\n      true: \"True\",\r\n      false: \"False\",\r\n      connectives: {\r\n        negation: \"Negation\",\r\n        conjunction: \"Conjunction\",\r\n        disjunction: \"Disjunction\",\r\n        implication: \"Implication\",\r\n        equivalence: \"Equivalence\",\r\n      },\r\n    },\r\n    editor: {\r\n      originalPanel: \"Original\",\r\n      simplifiedPanel: \"Simplified\",\r\n      howToUse: \"How to use?\",\r\n      run: \" Run\",\r\n      allowedOperatorLabel: \"Connectives to keep\",\r\n    },\r\n    playground: {\r\n      feedback: {\r\n        empty:\r\n          \"No expression to display. Evaluate one to see how it's interpreted!\",\r\n      },\r\n      graph: {\r\n        noEvaluationToDisplay:\r\n          \"No evaluation step to display. Evaluate an expression to see steps here.\",\r\n        cannotDisplayEvaluation:\r\n          \"Cannot display evaluation step. Please check the expression and try again.\",\r\n        center: \"Center Graph\",\r\n      },\r\n      dialog: {\r\n        close: \"Close\",\r\n      },\r\n      playback: {\r\n        forward: \"Forward\",\r\n        rewind: \"Rewind\",\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const th = {\r\n  translation: {\r\n    common: {\r\n      truthValue: \"ค่าความจริง\",\r\n      true: \"จริง\",\r\n      false: \"เท็จ\",\r\n      connectives: {\r\n        negation: \"นิเสธ\",\r\n        conjunction: \"และ\",\r\n        disjunction: \"หรือ\",\r\n        implication: \"ถ้า แล้ว\",\r\n        equivalence: \"ก็ต่อเมื่อ\",\r\n      },\r\n      noPropositionToDisplay: \"\",\r\n    },\r\n    editor: {\r\n      originalPanel: \"รูปเดิม\",\r\n      simplifiedPanel: \"รูปอย่างง่าย\",\r\n      howToUse: \"คู่มือการใช้งาน\",\r\n      run: \"คำนวณ\",\r\n      allowedOperatorLabel: \"ตัวเชื่อมที่คงไว้\",\r\n    },\r\n    playground: {\r\n      feedback: {\r\n        empty:\r\n          \"ไม่มีประพจน์ให้แสดงในขณะนี้ คำนวณประพจน์เพื่อตรวจสอบว่าโปรแกรมตีความถูกต้องหรือไม่\",\r\n      },\r\n      graph: {\r\n        noEvaluationToDisplay:\r\n          \"ไม่มีขั้นตอนการคำนวณให้แสดงในขณะนี้ คำนวณประพจน์เพื่อแสดงขั้นตอน\",\r\n        cannotDisplayEvaluation:\r\n          \"เกิดข้อผิดพลาด ไม่สามารถแสดงขั้นตอนการคำนวณได้ กรุณาตรวจสอบประพจน์และลองคำนวณอีกครั้ง\",\r\n        center: \"กลับสู่ศูนย์กลาง\",\r\n      },\r\n      dialog: {\r\n        close: \"ปิด\",\r\n      },\r\n      playback: {\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n        forward: \"เดินหน้า\",\r\n        rewind: \"ถอยหลัง\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","import i18next from \"i18next\";\r\nimport {\r\n  default as Backend,\r\n  default as LangDectector,\r\n} from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { en } from \"./en/translation\";\r\nimport { th } from \"./th/translation\";\r\n\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    debug: true,\r\n    resources: {\r\n      en,\r\n      th,\r\n    },\r\n  });\r\n\r\nexport default i18next;\r\n","import { Editor } from \"$components/Editor\";\r\nimport { Playground } from \"$components/Playground\";\r\nimport { parse } from \"$core/interpreter/parser\";\r\nimport i18nInstance from \"$locales/config\";\r\nimport { SyntaxTree } from \"$types/ast\";\r\nimport { Maybe } from \"$types/common\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Container,\r\n  Divider,\r\n  Stack,\r\n  Tab,\r\n  Toolbar,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const EditorView: FC = () => {\r\n  const { t, i18n } = useTranslation(\"translation\", {\r\n    i18n: i18nInstance,\r\n  });\r\n\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [tree, setTree] = useState<Maybe<\r\n    SyntaxTree,\r\n    string\r\n  > | null>(null);\r\n  // const [operators, setOperators] = useState(\r\n  //   new Map<Operator, boolean>([\r\n  //     [Operator.AND, true],\r\n  //     [Operator.OR, true],\r\n  //     [Operator.IMPL, true],\r\n  //     [Operator.IFF, true],\r\n  //   ])\r\n  // );\r\n  // const [simplifiedTree, setSimplifiedTree] =\r\n  //   useState<Maybe<SyntaxTree, string> | null>(null);\r\n\r\n  const handleExecute = (value: string) => {\r\n    if (value.trim().length === 0) {\r\n      setTree(null);\r\n      // setSimplifiedTree(null);\r\n      return;\r\n    }\r\n    const maybeTree = parse(value);\r\n    setTree(maybeTree);\r\n    // if (maybeTree.ok) {\r\n    //   const op = new Set<Operator>();\r\n    //   for (const [k, v] of operators.entries()) {\r\n    //     if (v) {\r\n    //       op.add(k);\r\n    //     }\r\n    //   }\r\n    //   const simplTree = simplifySyntaxTree(\r\n    //     collapseSyntaxTree(\r\n    //       normalizeSyntaxTree(maybeTree.data),\r\n    //       op\r\n    //     )\r\n    //   );\r\n    //   if (simplTree === null) {\r\n    //     setSimplifiedTree({\r\n    //       ok: false,\r\n    //       other:\r\n    //         \"Cannot simplified expression to desired form\",\r\n    //     });\r\n    //   } else {\r\n    //     setSimplifiedTree({\r\n    //       ok: true,\r\n    //       data: simplTree,\r\n    //     });\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  // const handleOperatorChange = (\r\n  //   k: Operator,\r\n  //   v: boolean\r\n  // ) => {\r\n  //   setOperators((p) => {\r\n  //     const next = new Map(p);\r\n  //     next.set(k, v);\r\n  //     return next;\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Toolbar\r\n        variant=\"dense\"\r\n        disableGutters\r\n        sx={{\r\n          flexDirection: \"column\",\r\n          display: \"flex\",\r\n          alignItems: \"flex-start\",\r\n        }}\r\n      >\r\n        <ButtonGroup\r\n          variant=\"text\"\r\n          disableElevation\r\n        >\r\n          <Button onClick={() => i18n.changeLanguage(\"en\")}>\r\n            EN\r\n          </Button>\r\n          <Button onClick={() => i18n.changeLanguage(\"th\")}>\r\n            TH\r\n          </Button>\r\n        </ButtonGroup>\r\n        <Divider flexItem />\r\n      </Toolbar>\r\n      <Container maxWidth=\"lg\">\r\n        <Stack\r\n          useFlexGap\r\n          spacing={1}\r\n          padding={2}\r\n        >\r\n          <Editor\r\n            // operators={operators}\r\n            onExecute={handleExecute}\r\n            // onOperatorChange={handleOperatorChange}\r\n          />\r\n          <TabContext value={activeTab}>\r\n            <Box\r\n              sx={{\r\n                borderBottom: 1,\r\n                borderColor: \"divider\",\r\n              }}\r\n            >\r\n              <TabList\r\n                onChange={(_, v) => setActiveTab(v)}\r\n                variant=\"scrollable\"\r\n              >\r\n                <Tab\r\n                  label={t(\"editor.originalPanel\")}\r\n                  value={0}\r\n                />\r\n                <Tab\r\n                  disabled\r\n                  label={t(\"editor.simplifiedPanel\")}\r\n                  value={1}\r\n                />\r\n              </TabList>\r\n            </Box>\r\n            <TabPanel\r\n              keepMounted\r\n              value={0}\r\n              sx={{ padding: 0 }}\r\n            >\r\n              <Playground maybeTree={tree} />\r\n            </TabPanel>\r\n            {/* <TabPanel\r\n            keepMounted\r\n            value={1}\r\n            sx={{ padding: 0 }}\r\n          >\r\n            <Playground maybeTree={simplifiedTree} />\r\n          </TabPanel> */}\r\n          </TabContext>\r\n        </Stack>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n","export default \"__VITE_ASSET__CAAWiA8v__\"","export default \"data:text/plain;base64,IyDwn5OaVXNlciBNYW51YWwNCg0KDQoqKlF1aWNrIGd1aWRlKio6IA0KMS4gRW50ZXIgYSBCb29sZWFuIGV4cHJlc3Npb24gaW50byB0aGUgaW5wdXQgZmllbGQNCjEuIFByZXNzICJSVU4iDQoxLiBDbGljayBvbiBhIG5vZGUgdG8gbW9kaWZ5IHRoZSB0cnV0aCB2YWx1ZXMNCg0KVGhlIGF2YWlsYWJsZSBsb2dpY2FsIGNvbm5lY3RpdmVzIGFyZSAqKm5vdCoqICgmbm90OyksICoqYW5kKiogKCZhbmQ7KSwgKipvcioqICgmb3I7KSwgKippbXBsaWVzKiogKCZyYXJyOyksIGFuZCAqKmlmZioqICgmaEFycjspLiANCg==\"","import { Divider, Typography } from \"@mui/material\";\r\nimport { JsxRuntimeComponents } from \"node_modules/react-markdown/lib\";\r\nimport { FC } from \"react\";\r\nimport Markdown from \"react-markdown\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkMath from \"remark-math\";\r\n\r\nconst COMPONENTS_OVERRIDE: Partial<JsxRuntimeComponents> = {\r\n  h2: ({ children, id }) => (\r\n    <Typography\r\n      variant=\"h2\"\r\n      id={id}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h3: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h3\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h4: ({ id, children }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h4\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  p: ({ children }) => (\r\n    <Typography\r\n      component=\"p\"\r\n      gutterBottom\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  // code: ({ children }) => <StyledKBD>{children}</StyledKBD>,\r\n  em: ({ children }) => (\r\n    <Typography\r\n      fontWeight=\"bold\"\r\n      component=\"em\"\r\n      fontStyle=\"normal\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  hr: () => (\r\n    <Divider\r\n      flexItem\r\n      sx={{ marginY: 4 }}\r\n      variant=\"middle\"\r\n    />\r\n  ),\r\n  a: ({ href, hrefLang, referrerPolicy, children }) => (\r\n    <Typography\r\n      component=\"a\"\r\n      target=\"_blank\"\r\n      href={href}\r\n      hrefLang={hrefLang}\r\n      referrerPolicy={referrerPolicy}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n};\r\n\r\ntype StyledMarkdownProps = {\r\n  children: string;\r\n};\r\nexport const StyledMarkdown: FC<StyledMarkdownProps> = (\r\n  props\r\n) => {\r\n  const { children } = props;\r\n  return (\r\n    <Markdown\r\n      components={COMPONENTS_OVERRIDE}\r\n      rehypePlugins={[rehypeKatex, rehypeSlug]}\r\n      remarkPlugins={[remarkMath]}\r\n    >\r\n      {children}\r\n    </Markdown>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetchMarkdown = (path: string) => {\r\n  const [content, setContent] = useState<string | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    let isWorking = true;\r\n    fetch(path)\r\n      .then((res) => res.text())\r\n      .then((text) => {\r\n        if (!isWorking) {\r\n          return;\r\n        }\r\n        setContent(text);\r\n      });\r\n    return () => {\r\n      isWorking = false;\r\n    };\r\n  }, [path]);\r\n\r\n  return content;\r\n};\r\n","import AboutBlog from \"$assets/blogs/BooleanAlgebraSummary/en.txt\";\r\nimport UserManualBlog from \"$assets/blogs/UserManual/en.txt\";\r\nimport { StyledMarkdown } from \"$components/StyledMarkdown\";\r\nimport { useFetchMarkdown } from \"$hooks/useFetchMarkdown\";\r\nimport { Box, Container } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\n\r\nexport const BlogView: FC = () => {\r\n  const userManualContent =\r\n    useFetchMarkdown(UserManualBlog);\r\n  const content = useFetchMarkdown(AboutBlog);\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          backgroundColor: (t) => t.palette.secondary.light,\r\n          paddingY: 2,\r\n          marginY: 8,\r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <StyledMarkdown>\r\n            {userManualContent ?? \"\"}\r\n          </StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n      <Box marginBottom={4}>\r\n        <Container maxWidth=\"md\">\r\n          <StyledMarkdown>{content ?? \"\"}</StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  createTheme,\r\n  responsiveFontSizes,\r\n} from \"@mui/material\";\r\nimport { brown, green } from \"@mui/material/colors\";\r\n\r\nexport let theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: brown[\"600\"],\r\n    },\r\n    secondary: {\r\n      light: \"#abcbad\",\r\n      main: green[\"800\"],\r\n    },\r\n  },\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: t.palette.primary.dark,\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: t.palette.primary.dark,\r\n        }),\r\n      },\r\n    },\r\n    MuiTypography: {\r\n      defaultProps: {\r\n        sx: {\r\n          userSelect: \"none\",\r\n        },\r\n      },\r\n    },\r\n    MuiDialogActions: {\r\n      defaultProps: {\r\n        sx: { justifyContent: \"flex-start\" },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n","import \"$core/interpreter/parser\";\r\nimport { EditorView } from \"$views/EditorView\";\r\nimport { BlogView } from \"$views/TheoremBlogView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { theme } from \"./theme\";\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <EditorView />\r\n      <BlogView />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import { App } from \"$App/App\";\nimport \"$locales/config\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport \"$assets/ohm\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["SyntaxTreeNodeKind","Operator","collectBinaryNodes","operator","left","right","node","i","grammar","ohm.grammar","semantics","leftExpr","_","rightExpr","leftTree","rightTree","expr","_open","_close","_id","id","children","n","parse","content","m","StyledLatex","props","tex","options","ref","useRef","useEffect","katex","jsx","Typography","StyledTooltipButton","variant","startIcon","onClick","title","Tooltip","Button","OPERATOR","EditorRibbonInsert","onInsertChar","t","useTranslation","ButtonGroup","btn","index","EditorRibbon","onExecute","jsxs","Toolbar","Stack","PlayArrowRounded","EditorTextField","placeholder","rows","value","onChange","onKeyDown","TextField","e","Editor","setValue","useState","handleExecute","handleInsertChar","char","prev","handleKeyDown","OPERATOR_REPR","OPERATOR_EVAL_FN","l","r","_syntaxTreeToLatex","tree","nodeType","operand","labelLeft","labelRight","repr","syntaxTreeToLatex","_syntaxTreetoExprTree","orderStart","child","syntaxTreetoExprTree","LatexDisplay","text","emptyText","error","palette","shape","useTheme","color","Box","alpha","_exprTreeCollectSymbols","symbols","exprTreeCollectSymbols","exprTree","_exprTreeToLatex","exprTreeToLatex","PlaygroundDialogConfig","table","selected","symbol","FormControl","FormLabel","RadioGroup","FormControlLabel","Radio","PlaygroundDialog","open","onClose","evalValue","Dialog","DialogTitle","DialogContent","DialogActions","StyledIconButton","onKeyPress","disabled","IconButton","PlaygroundPlaybackControl","maxValue","minValue","handleForward","handleRewind","handleKeyPress","key","maxLabel","label","KeyboardArrowLeftRounded","KeyboardArrowRightRounded","Slider","v","StyledFAB","Fab","TreeGraphLink","link","order","source","target","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","onMouseLeave","onMouseEnter","x","y","data","typography","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","handleMouseLeave","handleMouseEnter","Group","flatten_expr","d","TreeGraph","symbolTable","onNodeClick","hierarchy","height","width","containerRef","useTooltipInPortal","showTooltip","hideTooltip","tooltipData","tooltipOpen","tooltipLeft","tooltipTop","useTooltip","handleMouseHoverNode","fn","Zoom","zoom","Fragment","Tree","treeHeir","ControlCameraRounded","TooltipWithBounds","Playground","maybeTree","dialogOpen","setDialogOpen","setSymbolTable","setOrder","maxOrder","setMaxOrder","selectedNode","setSelectedNode","setExprTree","nextExprTree","handleNodeClick","handleTableChange","k","next","handleGraphKeyPress","treeGraphText","Divider","en","th","i18next","Backend","LangDectector","initReactI18next","EditorView","i18n","i18nInstance","activeTab","setActiveTab","setTree","Container","TabContext","TabList","Tab","TabPanel","AboutBlog","COMPONENTS_OVERRIDE","href","hrefLang","referrerPolicy","StyledMarkdown","Markdown","rehypeKatex","rehypeSlug","remarkMath","useFetchMarkdown","path","setContent","isWorking","res","BlogView","userManualContent","UserManualBlog","theme","createTheme","brown","green","responsiveFontSizes","globalStyles","GlobalStyles","App","ThemeProvider","CssBaseline","createRoot","StrictMode"],"mappings":"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"}