## Motivation

This project had been on the back burner for a while, partly due my knowledge, or the lack thereof, to build such application. I had plans in mind on the implementaion of the core features, but I never had sat down and integrate them together. When I was on summer break from my bachelor studies in July of 2024, I travelled back home and visited my highschool. There I had opportunities to reconnect with my teachers, one of which was my math teacher. 

She had mentioned that the department would do well to introduce a learning tool to students to help them visualize mathematical concepts, but they had a hard time trying to build one themselves. I saw that this was the perfect opportunity to bring this project, or at the very least, the concept for it, to her.

With concrete specifications and requirements laid out, I began work on this project. At its core, this project has three components; (1) evaluation, (2) visualization, and (3) experimentation.

You can evaluate an arbitrary, well-formed Boolean expression and experiment with the truth value of your expression by changing the truth value of your introduced propositions. As for the visualization, you can see your expression in a syntax tree. I think they are quite neet!

# Simplification Algotihm Proposal

Consider the following Boolean expression

$$
\begin{align*}
\varphi\implies\varphi.
\end{align*}
$$

The given set of legal logical connectives are given as 

$$
\begin{align*}
\mathcal{C}\coloneqq\{\lnot\}.
\end{align*}
$$

We can see that, even though $\mathcal{C}$ is not a functionally complete set of connectives, it is still possible to construct an equivalent expression that does not contain any other connective except for negation.

We apply the law of identity to obtain tautology

$$
\begin{align*}
\varphi \implies \varphi \equiv \top.
\end{align*}
$$

We claim that tautology by itself is a Boolean expression, not only that, it does not contain connectives which is not a member of $\mathcal{C}$.

Therefore, we can construct a simplified Boolean expression from a functionally incomplete set of connectives.

**Remarks**: The point here is to demonstrate that, we cannot decide whether it is possible construct an equivalent Boolean expression simply by considering the restricted connectives. In some cases, even with $\mathcal{C}$ is functionally incomplete, we can still constructed a simplifed expression.


## Useful TheoremsðŸš€


## De Morgan's Law

**Theorem**: Negation is distributive over conjunction

$$
\begin{align*}
\lnot (P \land Q) \equiv \lnot P \lor \lnot Q.
\end{align*}
$$

**Theorem**: Negation is distributive over disjunction

$$
\begin{align*}
\lnot (P \lor Q) \equiv \lnot P \land \lnot Q.
\end{align*}
$$

Related resources:
- [De Morgan's law (Proofwiki)](https://proofwiki.org/wiki/De_Morgan%27s_Laws_(Logic))

## Rule of Double Negation

**Theorem**: The truth value of the double negation of a proposition is equivalent to itself

$$
\begin{align*}
\lnot (\lnot P) \equiv P.
\end{align*}
$$

Related resources:
- [Double negation (Proofwiki)](https://proofwiki.org/wiki/Double_Negation)

## Rule of Idempotence

**Theorem**: Disjunction is idempotent

$$
\begin{align*}
P \lor P \equiv P.
\end{align*}
$$

**Theorem**: Conjunction is idempotent

$$
\begin{align*}
P \land P \equiv P.
\end{align*}
$$

Related resources:
- [Rule of Idempotence (Proofwiki)](https://proofwiki.org/wiki/https://proofwiki.org/wiki/Rule_of_Idempotence)
- [Idempotence (Wikipedia)](https://en.wikipedia.org/wiki/Idempotence)

## Rule of Commutation

**Theorem**: Disjunction is commutative

$$
\begin{align*}
P \lor Q \equiv Q \lor P.
\end{align*}
$$

**Theorem**: Conjunction is commutative

$$
\begin{align*}
P \land Q \equiv Q \land P.
\end{align*}
$$

Related resources:
- [Rule of Commutation (Proofwiki)](https://proofwiki.org/wiki/Rule_of_Commutation)
- [Commutative property (Wikipedia)](https://en.wikipedia.org/wiki/Commutative_property)

## Rule of Association

**Theorem**: Disjunction is associative

$$
\begin{align*}
P \lor (Q \lor R) \equiv (P \lor Q) \lor R.
\end{align*}
$$

**Theorem**: Conjunction is associative

$$
\begin{align*}
P \land (Q \land R) \equiv (P \land Q) \land R.
\end{align*}
$$

Related resources:
- [Rule of Association (Proofwiki)](https://proofwiki.org/wiki/Rule_of_Association)
- [Associative property (Wikipedia)](https://en.wikipedia.org/wiki/Associative_property)

## Rule of Distribution

**Theorem**: Conjunction is distributive over disjunction

$$
\begin{align*}
P \land (Q \lor R) \equiv (P \land Q) \lor (P \land R).
\end{align*}
$$

**Theorem**: Disjunction is distributive over conjunction

$$
\begin{align*}
P \lor (Q \land R) \equiv (P \lor Q) \land (P \lor R).
\end{align*}
$$

Related resources:
- [Rule of distribution (Proofwiki)](https://proofwiki.org/wiki/Rule_of_Distribution)
- [Distributive property (Wikipedia)](https://en.wikipedia.org/wiki/Distributive_property)

## Absorption Laws 

**Theorem**: Disjunction absorbs conjunction

$$
\begin{align*}
P \lor (P \land Q) \equiv P.
\end{align*}
$$

**Theorem**: Conjunction absorbs disjunction

$$
\begin{align*}
P \land (P \lor Q) \equiv P.
\end{align*}
$$

Related resources:
- [Absorption Laws  (Proofwiki)](https://proofwiki.org/wiki/Absorption_Laws_(Boolean_Algebras))

## Law of Excluded Middle

**Theorem**: Every proposition is either true or false.

$$
\begin{align*}
P \lor \lnot P \equiv \top.
\end{align*}
$$

Related resources:
- [Law of Excluded Middle (Proofwiki)](https://proofwiki.org/wiki/Law_of_Excluded_Middle)

## Principle of Non-Contradiction

**Theorem**: A proposition cannot be both true and false at the same time.

$$
\begin{align*}
\lnot (P \land \lnot P) \equiv \top.
\end{align*}
$$

Related resources:
- [Principle of Non-Contradiction (Proofwiki)]( https://proofwiki.org/wiki/Principle_of_Non-Contradiction)

