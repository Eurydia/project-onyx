{"version":3,"file":"index-BnaKQIbQ.js","sources":["../../src/components/StyledLatex.tsx","../../src/components/StyledTooltipButton.tsx","../../src/components/EditorRibbonInsert.tsx","../../src/components/EditorRibbon.tsx","../../src/types/lexer.ts","../../src/components/EditorSimplConfigGroup.tsx","../../src/components/EditorTextField.tsx","../../src/components/Editor.tsx","../../src/components/LatexDisplay.tsx","../../src/types/parser.ts","../../src/core/tree/conversion.ts","../../src/core/tree/expr/augment.ts","../../src/core/tree/expr/evaluate.ts","../../src/core/tree/expr/latex.ts","../../src/components/PlaygroundDialogConfig.tsx","../../src/components/PlaygroundDialog.tsx","../../src/components/StyledIconButton.tsx","../../src/components/PlaygroundPlaybackControl.tsx","../../src/components/StyledFAB.tsx","../../src/components/TreeGraphLink.tsx","../../src/components/TreeGraphNode.tsx","../../src/components/TreeGraph.tsx","../../src/components/Playground.tsx","../../src/components/StyledTabs.tsx","../../src/core/interpreter/lexer.ts","../../src/core/interpreter/parser.ts","../../src/views/EditorView.tsx","../../src/assets/blogs/BooleanAlgebraSummary/en.txt","../../src/assets/blogs/UserManual/en.txt","../../src/components/StyledMarkdown.tsx","../../src/hooks/useFetchMarkdown.ts","../../src/views/TheoremBlogView.tsx","../../src/App/theme.ts","../../src/App/App.tsx","../../src/locales/en/translation.ts","../../src/locales/th/translation.ts","../../src/locales/config.ts","../../src/main.tsx"],"sourcesContent":["import { Typography } from \"@mui/material\";\r\nimport katex, { KatexOptions } from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  options?: KatexOptions;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { tex, options } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, options);\r\n    }\r\n  }, [ref, tex, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      sx={{\r\n        textWrap: \"nowrap\",\r\n      }}\r\n      component=\"span\"\r\n      overflow=\"auto\"\r\n    />\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonProps,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\n\r\ntype StyledTooltipButtonProps = {\r\n  onClick: () => void;\r\n  title: string;\r\n  variant: ButtonProps[\"variant\"];\r\n  children: ReactNode;\r\n  startIcon?: ReactNode;\r\n};\r\nexport const StyledTooltipButton: FC<\r\n  StyledTooltipButtonProps\r\n> = (props) => {\r\n  const { children, variant, startIcon, onClick, title } =\r\n    props;\r\n\r\n  return (\r\n    <Tooltip title={<Typography>{title}</Typography>}>\r\n      <Button\r\n        disableElevation\r\n        variant={variant}\r\n        startIcon={startIcon}\r\n        onClick={onClick}\r\n      >\r\n        {children}\r\n      </Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { ButtonGroup } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\nconst OPERATOR = [\r\n  {\r\n    name: \"negation\",\r\n    label: \"\\\\lnot\",\r\n    insertChar: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    name: \"conjunction\",\r\n    label: \"\\\\land\",\r\n    insertChar: \"\\u{2227}\",\r\n  },\r\n  {\r\n    name: \"disjunction\",\r\n    label: \"\\\\lor\",\r\n    insertChar: \"\\u{2228}\",\r\n  },\r\n  {\r\n    name: \"implication\",\r\n    label: \"\\\\implies\",\r\n    insertChar: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    name: \"equivalence\",\r\n    label: \"\\\\iff\",\r\n    insertChar: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonInsertProps = {\r\n  onInsertChar: (char: string) => void;\r\n};\r\nexport const EditorRibbonInsert: FC<\r\n  EditorRibbonInsertProps\r\n> = (props) => {\r\n  const { onInsertChar } = props;\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common.connectives\",\r\n  });\r\n\r\n  return (\r\n    <ButtonGroup\r\n      disableElevation\r\n      variant=\"outlined\"\r\n    >\r\n      {OPERATOR.map((btn, index) => (\r\n        <StyledTooltipButton\r\n          variant=\"outlined\"\r\n          key={\"insert-btn-\" + index}\r\n          title={t(btn.name)}\r\n          onClick={() => onInsertChar(btn.insertChar)}\r\n        >\r\n          <StyledLatex tex={btn.label} />\r\n        </StyledTooltipButton>\r\n      ))}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n","import { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport { Stack, Toolbar, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EditorRibbonInsert } from \"./EditorRibbonInsert\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\ntype EditorRibbonProps = {\r\n  onExecute: () => void;\r\n  onInsertChar: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { onExecute, onInsertChar } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Toolbar\r\n      variant=\"dense\"\r\n      disableGutters\r\n      sx={{\r\n        gap: 1,\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Stack\r\n        sx={{ width: \"100%\" }}\r\n        gap={1}\r\n        useFlexGap\r\n        flexWrap=\"wrap\"\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <EditorRibbonInsert onInsertChar={onInsertChar} />\r\n        <StyledTooltipButton\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={onExecute}\r\n          title={\"CTRL + ENTER\"}\r\n        >\r\n          {t(\"editor.run\")}\r\n        </StyledTooltipButton>\r\n      </Stack>\r\n      <Typography\r\n        color=\"primary\"\r\n        component=\"a\"\r\n        href=\"#user-manual\"\r\n        sx={{\r\n          textDecorationLine: \"underline\",\r\n        }}\r\n      >\r\n        {t(\"editor.howToUse\")}\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\n","export enum TokenType {\r\n  IDENTIFIER,\r\n  OPERATOR,\r\n  LEFT_PARENTHESIS,\r\n  RIGHT_PARENTHESIS,\r\n  ERROR,\r\n}\r\n\r\nexport enum Operator {\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  IMPLIES = \"IMPLIES\",\r\n  IFF = \"IFF\",\r\n  NOT = \"NOT\",\r\n}\r\n\r\nexport type TokenError = {\r\n  tokenType: TokenType.ERROR;\r\n  pos: number;\r\n  source: string;\r\n};\r\n\r\nexport type TokenIdentifier = {\r\n  tokenType: TokenType.IDENTIFIER;\r\n  symbol: string;\r\n  pos: number;\r\n  length: number;\r\n};\r\n\r\nexport type TokenOperator = {\r\n  tokenType: TokenType.OPERATOR;\r\n  name: Operator;\r\n  pos: number;\r\n};\r\n\r\nexport type TokenLeftParen = {\r\n  tokenType: TokenType.LEFT_PARENTHESIS;\r\n  pos: number;\r\n};\r\n\r\nexport type TokenRightParen = {\r\n  tokenType: TokenType.RIGHT_PARENTHESIS;\r\n  pos: number;\r\n};\r\n\r\nexport type Token =\r\n  | TokenError\r\n  | TokenIdentifier\r\n  | TokenOperator\r\n  | TokenLeftParen\r\n  | TokenRightParen;\r\n","import { Operator } from \"$types/lexer\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SYMBOL_LABEL = new Map([\r\n  [Operator.AND, \"conjunction\"],\r\n  [Operator.OR, \"disjunction\"],\r\n  [Operator.IMPLIES, \"implication\"],\r\n  [Operator.IFF, \"equivalence\"],\r\n]);\r\n\r\ntype EditorSimplConfigGroupProps = {\r\n  values: Map<Operator, boolean>;\r\n  onChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const EditorSimplConfigGroup: FC<\r\n  EditorSimplConfigGroupProps\r\n> = (props) => {\r\n  const { onChange, values } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      flexWrap=\"wrap\"\r\n      alignItems=\"center\"\r\n    >\r\n      <FormLabel>\r\n        <Typography color=\"textPrimary\">\r\n          {t(\"editor.allowedOperatorLabel\")}:\r\n        </Typography>\r\n      </FormLabel>\r\n      <FormControlLabel\r\n        disabled\r\n        checked\r\n        control={<Checkbox />}\r\n        label={t(\"common.connectives.negation\")}\r\n      />\r\n      {[...SYMBOL_LABEL.entries()].map(([k, l], index) => {\r\n        const checked = values.get(k) ?? false;\r\n        const label = t(`common.connectives.${l}`);\r\n\r\n        return (\r\n          <FormControlLabel\r\n            key={\"include-op\" + index}\r\n            label={label}\r\n            control={<Checkbox />}\r\n            checked={checked}\r\n            onChange={(_, v) => onChange(k, v)}\r\n          />\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n","import { TextField } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype EditorTextFieldProps = {\r\n  value: string;\r\n  rows: number;\r\n  onChange: (value: string) => void;\r\n  onKeyDown: (e: React.KeyboardEvent) => void;\r\n};\r\nexport const EditorTextField: FC<EditorTextFieldProps> = (\r\n  props\r\n) => {\r\n  const { rows, value, onChange, onKeyDown } = props;\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      multiline\r\n      rows={rows}\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      onKeyDown={onKeyDown}\r\n      slotProps={{\r\n        input: {\r\n          autoComplete: \"off\",\r\n          autoCorrect: \"off\",\r\n          autoCapitalize: \"none\",\r\n          spellCheck: false,\r\n          sx: {\r\n            fontFamily: \"monospace\",\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Operator } from \"$types/lexer\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\nimport { EditorSimplConfigGroup } from \"./EditorSimplConfigGroup\";\r\nimport { EditorTextField } from \"./EditorTextField\";\r\n\r\ntype EditorProps = {\r\n  onExecute: (value: string) => void;\r\n};\r\nexport const Editor: FC<EditorProps> = (props) => {\r\n  const { onExecute } = props;\r\n\r\n  const [operators, setOperators] = useState(\r\n    new Map<Operator, boolean>()\r\n  );\r\n  const [value, setValue] = useState(\r\n    \"not (p and q) iff (not p) or (not q)\"\r\n  );\r\n\r\n  const handleExecute = () => {\r\n    onExecute(value);\r\n  };\r\n\r\n  const handleOperatorChange = (\r\n    k: Operator,\r\n    v: boolean\r\n  ) => {\r\n    setOperators((p) => {\r\n      const next = new Map(p);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n  };\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    setValue((prev) => `${prev} ${char}`);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && e.ctrlKey) {\r\n      handleExecute();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon\r\n        onExecute={handleExecute}\r\n        onInsertChar={handleInsertChar}\r\n      />\r\n      <EditorTextField\r\n        value={value}\r\n        onChange={setValue}\r\n        onKeyDown={handleKeyDown}\r\n        rows={5}\r\n      />\r\n      <EditorSimplConfigGroup\r\n        values={operators}\r\n        onChange={handleOperatorChange}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  alpha,\r\n  Box,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype LatexDisplayProps = {\r\n  tex: string | null;\r\n  emptyText: string;\r\n};\r\nexport const LatexDisplay: FC<LatexDisplayProps> = (\r\n  props\r\n) => {\r\n  const { tex, emptyText } = props;\r\n  const { palette, shape } = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      paddingX={2}\r\n      paddingY={0.5}\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      minHeight={100} // Otherwise the size of the box will be smaller in its empty state\r\n      sx={{\r\n        borderRadius: shape.borderRadius,\r\n        backgroundColor: alpha(\r\n          palette.secondary.light,\r\n          0.4\r\n        ),\r\n      }}\r\n    >\r\n      {tex === null ? (\r\n        <Typography>{emptyText}</Typography>\r\n      ) : (\r\n        <StyledLatex tex={tex} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Operator } from \"./lexer\";\r\n\r\nexport enum ErrorType {\r\n  LEXICAL_ERROR,\r\n  PARSER_ERROR,\r\n}\r\n\r\nexport enum SyntaxTreeNodeType {\r\n  BINARY_OPERATOR,\r\n  UNARY_OPERATOR,\r\n  ERROR,\r\n  IDENTIFIER,\r\n  CONSTANT,\r\n}\r\n\r\nexport type BinaryOperatorNode = {\r\n  nodeType: SyntaxTreeNodeType.BINARY_OPERATOR;\r\n  operator:\r\n    | Operator.AND\r\n    | Operator.OR\r\n    | Operator.IMPLIES\r\n    | Operator.IFF;\r\n  leftOperand: SyntaxTree;\r\n  rightOperand: SyntaxTree;\r\n};\r\n\r\nexport type UnaryOperatorNode = {\r\n  nodeType: SyntaxTreeNodeType.UNARY_OPERATOR;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type LexicalErrorNode = {\r\n  nodeType: SyntaxTreeNodeType.ERROR;\r\n  source: string;\r\n  pos: number;\r\n  errorType: ErrorType.LEXICAL_ERROR;\r\n};\r\n\r\nexport type ParserErrorNode = {\r\n  nodeType: SyntaxTreeNodeType.ERROR;\r\n  reason: string;\r\n  errorType: ErrorType.PARSER_ERROR;\r\n};\r\n\r\nexport type IdentifierNode = {\r\n  nodeType: SyntaxTreeNodeType.IDENTIFIER;\r\n  value: string;\r\n};\r\n\r\nexport type ErrorNode = LexicalErrorNode | ParserErrorNode;\r\n\r\nexport type SyntaxTree =\r\n  | BinaryOperatorNode\r\n  | UnaryOperatorNode\r\n  | ErrorNode\r\n  | IdentifierNode;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n\r\nexport type NormalizedAST =\r\n  | IdentifierNode\r\n  | ErrorNode\r\n  | {\r\n      nodeType: SyntaxTreeNodeType.UNARY_OPERATOR;\r\n      operator: Operator.NOT;\r\n      operand: NormalizedAST;\r\n    }\r\n  | {\r\n      nodeType: SyntaxTreeNodeType.BINARY_OPERATOR;\r\n      operator: Operator.AND;\r\n      leftOperand: NormalizedAST;\r\n      rightOperand: NormalizedAST;\r\n    };\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { Operator } from \"$types/lexer\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/parser\";\r\n\r\nconst _syntaxTreeToLatex = (\r\n  tree: SyntaxTree\r\n): string | null => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n  if (nodeType === SyntaxTreeNodeType.IDENTIFIER) {\r\n    return tree.value;\r\n  }\r\n\r\n  if (nodeType === SyntaxTreeNodeType.UNARY_OPERATOR) {\r\n    if (\r\n      tree.operand.nodeType === SyntaxTreeNodeType.ERROR\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const value = _syntaxTreeToLatex(tree.operand);\r\n    if (\r\n      tree.operand.nodeType ===\r\n      SyntaxTreeNodeType.IDENTIFIER\r\n    ) {\r\n      return `\\\\lnot ${value}`;\r\n    }\r\n    return `\\\\lnot (${value})`;\r\n  }\r\n\r\n  const left = tree.leftOperand;\r\n  if (left.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n  const right = tree.rightOperand;\r\n  if (right.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n\r\n  let labelLeft = _syntaxTreeToLatex(left);\r\n  if (\r\n    left.nodeType === SyntaxTreeNodeType.BINARY_OPERATOR\r\n  ) {\r\n    labelLeft = `(${labelLeft})`;\r\n  }\r\n  let labelRight = _syntaxTreeToLatex(right);\r\n  if (\r\n    right.nodeType === SyntaxTreeNodeType.BINARY_OPERATOR\r\n  ) {\r\n    labelRight = `(${labelRight})`;\r\n  }\r\n\r\n  let label = \"\";\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      break;\r\n    case Operator.IMPLIES:\r\n      label = \"\\\\implies\";\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      break;\r\n  }\r\n  return `${labelLeft} ${label} ${labelRight}`;\r\n};\r\n\r\nexport const syntaxTreeToLatex = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  return _syntaxTreeToLatex(tree);\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  orderStart: number\r\n) => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n\r\n  if (nodeType === SyntaxTreeNodeType.IDENTIFIER) {\r\n    const exprNode: ExprTree = {\r\n      label: tree.value,\r\n      order: orderStart + 1,\r\n      fn: (t) => t.get(tree.value) ?? false,\r\n      children: [],\r\n    };\r\n    return exprNode;\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeType.UNARY_OPERATOR) {\r\n    const child = _syntaxTreetoExprTree(\r\n      tree.operand,\r\n      orderStart\r\n    );\r\n    if (child === null) {\r\n      return null;\r\n    }\r\n\r\n    const exprNode: ExprTree = {\r\n      label: \"\\\\lnot\",\r\n      children: [child],\r\n      fn: (t) => !child.fn(t),\r\n      order: child.order + 1,\r\n    };\r\n\r\n    return exprNode;\r\n  }\r\n\r\n  const left = _syntaxTreetoExprTree(\r\n    tree.leftOperand,\r\n    orderStart\r\n  );\r\n  if (left === null) {\r\n    return null;\r\n  }\r\n  const right = _syntaxTreetoExprTree(\r\n    tree.rightOperand,\r\n    left.order\r\n  );\r\n  if (right === null) {\r\n    return null;\r\n  }\r\n\r\n  let label;\r\n  let fn: (t: SymbolTable) => boolean;\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      fn = (t) => left.fn(t) && right.fn(t);\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      fn = (t) => left.fn(t) || right.fn(t);\r\n      break;\r\n    case Operator.IMPLIES:\r\n      label = \"\\\\implies\";\r\n      fn = (t) => !left.fn(t) || right.fn(t);\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      fn = (t) => left.fn(t) === right.fn(t);\r\n      break;\r\n  }\r\n\r\n  const exprNode: ExprTree = {\r\n    label,\r\n    fn,\r\n    children: [left, right],\r\n    order: right.order + 1,\r\n  };\r\n  return exprNode;\r\n};\r\n\r\nexport const syntaxTreetoExprTree = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  return _syntaxTreetoExprTree(tree, 1);\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nexport const augmentExprTree = (tree: ExprTree | null) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  if (tree.isError) {\r\n    return tree;\r\n  }\r\n  const { fn, order } = tree;\r\n\r\n  const augmented: ExprTree = {\r\n    order,\r\n    fn,\r\n    label: `\\\\S`,\r\n    children: [tree],\r\n  };\r\n  return augmented;\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _collectSymbols = (\r\n  exprTree: ExprTree,\r\n  symbols: Set<string>\r\n): void => {\r\n  if (exprTree.isError) {\r\n    return symbols.clear();\r\n  }\r\n  if (exprTree.children.length === 0) {\r\n    symbols.add(exprTree.label);\r\n    return;\r\n  }\r\n  for (const child of exprTree.children) {\r\n    _collectSymbols(child, symbols);\r\n  }\r\n};\r\n\r\nexport const collectSymbols = (\r\n  exprTree: ExprTree | null\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  if (exprTree === null) {\r\n    return symbols;\r\n  }\r\n  _collectSymbols(exprTree, symbols);\r\n  return symbols;\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _exprTreeToLatex = (exprTree: ExprTree): string => {\r\n  if (exprTree.isError) {\r\n    return exprTree.label;\r\n  }\r\n  if (exprTree.children.length === 0) {\r\n    return exprTree.label;\r\n  }\r\n\r\n  if (exprTree.children.length === 1) {\r\n    if (exprTree.label !== \"\\\\lnot\") {\r\n      return _exprTreeToLatex(exprTree.children[0]);\r\n    }\r\n    const child = exprTree.children[0];\r\n    let childLatex = _exprTreeToLatex(child);\r\n    if (child.children.length > 1) {\r\n      childLatex = `(${childLatex})`;\r\n    }\r\n    return `${exprTree.label} ${childLatex}`;\r\n  }\r\n  const left = exprTree.children[0];\r\n  const right = exprTree.children[1];\r\n  let leftLatex = _exprTreeToLatex(left);\r\n  if (left.children.length > 1) {\r\n    leftLatex = `(${leftLatex})`;\r\n  }\r\n  let rightLatex = _exprTreeToLatex(right);\r\n  if (right.children.length > 1) {\r\n    rightLatex = `(${rightLatex})`;\r\n  }\r\n  return `${leftLatex} ${exprTree.label} ${rightLatex}`;\r\n};\r\nexport const exprTreeToLatex = (\r\n  exprTree: ExprTree | null\r\n) => {\r\n  if (exprTree === null) {\r\n    return \"\";\r\n  }\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n","import {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype PlaygroundDialogConfigProps = {\r\n  table: Map<string, boolean>;\r\n  selected: Set<string>;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const PlaygroundDialogConfig: FC<\r\n  PlaygroundDialogConfigProps\r\n> = (props) => {\r\n  const { table, selected, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common\",\r\n  });\r\n\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={1}\r\n      width=\"100%\"\r\n    >\r\n      {[...selected].map((symbol) => (\r\n        <FormControl\r\n          key={\"symbol-\" + symbol}\r\n          fullWidth\r\n        >\r\n          <FormLabel\r\n            sx={{\r\n              width: \"100%\",\r\n              overflowX: \"auto\",\r\n            }}\r\n          >\r\n            <StyledLatex\r\n              tex={`\\\\text{\\`\\`$${symbol}$''}`}\r\n            />\r\n          </FormLabel>\r\n          <RadioGroup\r\n            row\r\n            value={table.get(symbol) ? \"T\" : \"F\"}\r\n            onChange={(e) =>\r\n              onChange(symbol, e.target.value === \"T\")\r\n            }\r\n          >\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"T\"\r\n              label={t(\"true\")}\r\n            />\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"F\"\r\n              label={t(\"false\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n","import { collectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/ast\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { PlaygroundDialogConfig } from \"./PlaygroundDialogConfig\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype PlaygroundDialogProps = {\r\n  node: ExprTree | null;\r\n  open: boolean;\r\n  value: Map<string, boolean>;\r\n  onChange: (k: string, v: boolean) => void;\r\n  onClose: () => void;\r\n};\r\nexport const PlaygroundDialog: FC<PlaygroundDialogProps> = (\r\n  props\r\n) => {\r\n  const { node, open, onClose, onChange, value } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const { palette, shape } = useTheme();\r\n\r\n  const selected = collectSymbols(node);\r\n\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n      open={open}\r\n      scroll=\"body\"\r\n      onClose={onClose}\r\n      PaperProps={{\r\n        elevation: 0,\r\n        sx: {\r\n          borderRadius: shape.borderRadius,\r\n          borderStyle: \"solid\",\r\n          borderWidth: 4,\r\n          borderColor: palette.primary.main,\r\n        },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <StyledLatex\r\n          tex={exprTreeToLatex(node)}\r\n          options={{\r\n            displayMode: true,\r\n            output: \"htmlAndMathml\",\r\n          }}\r\n        />\r\n        {node !== null && (\r\n          <Typography>\r\n            (\r\n            {node.fn(value)\r\n              ? t(\"common.true\")\r\n              : t(\"common.false\")}\r\n            )\r\n          </Typography>\r\n        )}\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n        <PlaygroundDialogConfig\r\n          selected={selected}\r\n          table={value}\r\n          onChange={onChange}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button variant=\"text\">\r\n          {t(\"playground.dialog.close\")}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import {\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledIconButtonProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  onKeyPress: (e: KeyboardEvent<HTMLButtonElement>) => void;\r\n};\r\nexport const StyledIconButton: FC<StyledIconButtonProps> = (\r\n  props\r\n) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip\r\n      placement=\"top\"\r\n      title={<Typography>{title}</Typography>}\r\n    >\r\n      <span>\r\n        <IconButton\r\n          color=\"primary\"\r\n          onClick={onClick}\r\n          disabled={disabled}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledIconButton } from \"./StyledIconButton\";\r\n\r\ntype PlaygroundPlaybackControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  disabled: boolean;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n};\r\nexport const PlaygroundPlaybackControl: FC<\r\n  PlaygroundPlaybackControlProps\r\n> = (props) => {\r\n  const { disabled, maxValue, minValue, onChange, value } =\r\n    props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"playground.playback\",\r\n  });\r\n\r\n  const handleForward = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  const handleKeyPress = (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      handleForward();\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      handleRewind();\r\n    }\r\n  };\r\n\r\n  // There is a possibility for the ui to fall apart due to overflow\r\n  // **IF** the order is large enough eg 20 digits long\r\n  // in such a case, the label would over and pushes the forward arrow\r\n  // and the slider out of view\r\n  // but let's be real, we run into other problem any way\r\n  // if the evaluation of a tree that large\r\n  const maxLabel = disabled ? \"0\" : maxValue.toString();\r\n  const valueLabel = disabled\r\n    ? \"0\"\r\n    : value.toString().padStart(maxLabel.length, \"0\");\r\n  const label = `${valueLabel}/${maxLabel}`;\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      paddingX={2}\r\n      paddingY={1}\r\n    >\r\n      <StyledIconButton\r\n        disabled={disabled}\r\n        title={t(\"rewind\")}\r\n        onClick={handleRewind}\r\n        onKeyPress={handleKeyPress}\r\n      >\r\n        <KeyboardArrowLeftRounded />\r\n      </StyledIconButton>\r\n      <Typography fontFamily=\"monospace\">\r\n        {label}\r\n      </Typography>\r\n      <StyledIconButton\r\n        disabled={disabled}\r\n        title={t(\"forward\")}\r\n        onKeyPress={handleKeyPress}\r\n        onClick={handleForward}\r\n      >\r\n        <KeyboardArrowRightRounded />\r\n      </StyledIconButton>\r\n      <Slider\r\n        disabled={disabled}\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Fab, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactElement } from \"react\";\r\n\r\ntype StyledFABProps = {\r\n  title: string;\r\n  onClick: () => void;\r\n  children: ReactElement;\r\n};\r\nexport const StyledFAB: FC<StyledFABProps> = (props) => {\r\n  const { children, onClick, title } = props;\r\n  return (\r\n    <Fab\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: 16,\r\n        bottom: 16,\r\n      }}\r\n    >\r\n      <Tooltip\r\n        placement=\"right\"\r\n        title={<Typography>{title}</Typography>}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    </Fab>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { SymbolTable } from \"$types/parser\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, MouseEvent, useEffect, useRef } from \"react\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  onClick: (node: ExprTree) => void;\r\n  order: number;\r\n  onMouseLeave: () => void;\r\n  onMouseEnter: (\r\n    x: number,\r\n    y: number,\r\n    data: (t: SymbolTable) => boolean\r\n  ) => void;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const {\r\n    order,\r\n    node,\r\n    onClick,\r\n    onMouseLeave,\r\n    onMouseEnter,\r\n  } = props;\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.label)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.label]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n\r\n  const handleMouseLeave = (\r\n    e: MouseEvent<SVGGElement> & MouseEvent\r\n  ) => {\r\n    e.stopPropagation();\r\n    onMouseLeave();\r\n  };\r\n\r\n  const handleMouseEnter = (\r\n    e: MouseEvent<SVGGElement> & MouseEvent\r\n  ) => {\r\n    e.stopPropagation();\r\n    onMouseEnter(x, y, data.fn);\r\n  };\r\n\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseEnter={handleMouseEnter}\r\n      onClick={() => onClick(data)}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        opacity={isNodeVisibleNow ? 1 : 0.5}\r\n        r={30}\r\n        fill={palette.secondary.light}\r\n        stroke={palette.primary.light}\r\n        strokeOpacity={0.8}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        color={palette.secondary.contrastText}\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n    </Group>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { SymbolTable } from \"$types/parser\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport {\r\n  TooltipWithBounds,\r\n  useTooltip,\r\n  useTooltipInPortal,\r\n} from \"@visx/tooltip\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledFAB } from \"./StyledFAB\";\r\nimport { TreeGraphLink } from \"./TreeGraphLink\";\r\nimport { TreeGraphNode } from \"./TreeGraphNode\";\r\ntype TreeGraphProps = {\r\n  symbolTable: SymbolTable;\r\n  tree: ExprTree;\r\n  order: number;\r\n  onNodeClick: (node: ExprTree) => void;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const { tree, symbolTable, order, onNodeClick } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const data = hierarchy(tree);\r\n  const height = (data.height + 1) * 75;\r\n  const width = (data.leaves().length + 1) * 100;\r\n\r\n  const { containerRef } = useTooltipInPortal({\r\n    scroll: true,\r\n    detectBounds: true,\r\n  });\r\n\r\n  const {\r\n    showTooltip,\r\n    hideTooltip,\r\n    tooltipData,\r\n    tooltipOpen,\r\n    tooltipLeft,\r\n    tooltipTop,\r\n  } = useTooltip<(t: SymbolTable) => boolean>();\r\n\r\n  const handleMouseHoverNode = (\r\n    x: number,\r\n    y: number,\r\n    fn: (t: SymbolTable) => boolean\r\n  ) => {\r\n    showTooltip({\r\n      tooltipLeft: x,\r\n      tooltipTop: y,\r\n      tooltipData: fn,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Zoom<SVGSVGElement>\r\n      width={width}\r\n      height={height}\r\n      scaleXMin={1 / 3}\r\n      scaleXMax={4}\r\n      scaleYMin={1 / 3}\r\n      scaleYMax={4}\r\n    >\r\n      {(zoom) => (\r\n        <>\r\n          <svg\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            ref={zoom.containerRef}\r\n            style={{\r\n              touchAction: \"none\",\r\n            }}\r\n          >\r\n            <g\r\n              ref={containerRef}\r\n              onTouchStart={zoom.dragStart}\r\n              onTouchMove={zoom.dragMove}\r\n              onTouchEnd={zoom.dragEnd}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={() => {\r\n                zoom.dragEnd();\r\n                hideTooltip();\r\n              }}\r\n              onMouseLeave={zoom.dragEnd}\r\n              transform={zoom.toString()}\r\n            >\r\n              <Tree\r\n                root={data}\r\n                size={[width, height]}\r\n              >\r\n                {(treeHeir) => (\r\n                  <Group>\r\n                    {treeHeir.links().map((link, i) => (\r\n                      <TreeGraphLink\r\n                        key={`link-${i}`}\r\n                        order={order}\r\n                        link={link}\r\n                      />\r\n                    ))}\r\n                    {treeHeir\r\n                      .descendants()\r\n                      .map((node, i) => (\r\n                        <TreeGraphNode\r\n                          key={`node-${i}`}\r\n                          order={order}\r\n                          node={node}\r\n                          onClick={onNodeClick}\r\n                          onMouseEnter={\r\n                            handleMouseHoverNode\r\n                          }\r\n                          onMouseLeave={hideTooltip}\r\n                        />\r\n                      ))}\r\n                  </Group>\r\n                )}\r\n              </Tree>\r\n            </g>\r\n          </svg>\r\n          <StyledFAB\r\n            onClick={zoom.center}\r\n            title={t(\"playground.graph.center\")}\r\n          >\r\n            <ControlCameraRounded />\r\n          </StyledFAB>\r\n          {!zoom.isDragging &&\r\n            tooltipOpen &&\r\n            tooltipData !== undefined &&\r\n            tooltipLeft !== undefined &&\r\n            tooltipTop !== undefined && (\r\n              <TooltipWithBounds\r\n                left={\r\n                  zoom.transformMatrix.scaleX *\r\n                    tooltipLeft +\r\n                  zoom.transformMatrix.translateX\r\n                }\r\n                top={\r\n                  zoom.transformMatrix.scaleY * tooltipTop +\r\n                  zoom.transformMatrix.translateY\r\n                }\r\n              >\r\n                <Typography>\r\n                  {tooltipData(symbolTable)\r\n                    ? t(\"common.true\")\r\n                    : t(\"common.false\")}\r\n                </Typography>\r\n              </TooltipWithBounds>\r\n            )}\r\n        </>\r\n      )}\r\n    </Zoom>\r\n  );\r\n};\r\n","import { syntaxTreetoExprTree } from \"$core/tree/conversion\";\r\nimport { augmentExprTree } from \"$core/tree/expr/augment\";\r\nimport { ExprTree } from \"$types/ast\";\r\nimport { SyntaxTree } from \"$types/parser\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  alpha,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  Fragment,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { PlaygroundDialog } from \"./PlaygroundDialog\";\r\nimport { PlaygroundPlaybackControl } from \"./PlaygroundPlaybackControl\";\r\nimport { TreeGraph } from \"./TreeGraph\";\r\n\r\ntype PlaygroundProps = {\r\n  tree: SyntaxTree | null;\r\n};\r\nexport const Playground: FC<PlaygroundProps> = (props) => {\r\n  const { tree } = props;\r\n\r\n  const { palette, shape } = useTheme();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [symbolTable, setSymbolTable] = useState(\r\n    new Map<string, boolean>()\r\n  );\r\n\r\n  const [order, setOrder] = useState(0);\r\n  const [maxOrder, setMaxOrder] = useState(0);\r\n\r\n  const [selectedNode, setSelectedNode] =\r\n    useState<ExprTree | null>(null);\r\n  const [exprTree, setExprTree] = useState<ExprTree | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    const nextExprTree = syntaxTreetoExprTree(tree);\r\n    if (nextExprTree === null) {\r\n      setOrder(0);\r\n      setMaxOrder(0);\r\n      return;\r\n    }\r\n    setExprTree(nextExprTree);\r\n    setOrder(1);\r\n    setMaxOrder(nextExprTree.order + 1);\r\n  }, [tree]);\r\n\r\n  const handleNodeClick = (node: ExprTree) => {\r\n    setDialogOpen(true);\r\n    setSelectedNode(node);\r\n  };\r\n\r\n  const handleTableChange = (k: string, v: boolean) => {\r\n    if (tree === null) {\r\n      return;\r\n    }\r\n    setSymbolTable((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n    // Technically change the truth value of the same tree\r\n    // this action should not cause the playback to reset\r\n    const nextExprTree = syntaxTreetoExprTree(tree);\r\n    setExprTree(nextExprTree);\r\n  };\r\n\r\n  const handleOrderChange = (v: number) => {\r\n    setOrder(v);\r\n    if (containerRef.current !== null) {\r\n      containerRef.current.scrollIntoView({\r\n        block: \"end\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        ref={containerRef}\r\n        sx={{\r\n          borderWidth: 4,\r\n          borderStyle: \"solid\",\r\n          borderRadius: shape.borderRadius,\r\n          borderColor: alpha(palette.secondary.main, 0.4),\r\n        }}\r\n      >\r\n        <Box\r\n          position=\"relative\"\r\n          height=\"75vh\"\r\n          width=\"100%\"\r\n        >\r\n          {exprTree !== null && (\r\n            <TreeGraph\r\n              symbolTable={symbolTable}\r\n              order={order}\r\n              tree={augmentExprTree(exprTree)!}\r\n              onNodeClick={handleNodeClick}\r\n            />\r\n          )}\r\n        </Box>\r\n        <Divider flexItem />\r\n        <PlaygroundPlaybackControl\r\n          disabled={exprTree === null}\r\n          maxValue={maxOrder}\r\n          minValue={1}\r\n          value={order}\r\n          onChange={handleOrderChange}\r\n        />\r\n      </Box>\r\n      <PlaygroundDialog\r\n        node={selectedNode}\r\n        open={dialogOpen && selectedNode !== null}\r\n        value={symbolTable}\r\n        onChange={handleTableChange}\r\n        onClose={() => setDialogOpen(false)}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n","import { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport { Box, Tab } from \"@mui/material\";\r\nimport { FC, Fragment, ReactNode, useState } from \"react\";\r\n\r\ntype StyledTabsProps = {\r\n  tabLabels: string[];\r\n  panels: ReactNode[];\r\n};\r\nexport const StyledTabs: FC<StyledTabsProps> = (props) => {\r\n  const { panels, tabLabels } = props;\r\n\r\n  const [active, setActive] = useState(0);\r\n  if (\r\n    panels.length === 0 ||\r\n    panels.length !== tabLabels.length\r\n  ) {\r\n    return <Fragment />;\r\n  }\r\n\r\n  return (\r\n    <TabContext value={active}>\r\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n        <TabList\r\n          onChange={(_, v) => setActive(v)}\r\n          variant=\"scrollable\"\r\n        >\r\n          {tabLabels.map((label, index) => (\r\n            <Tab\r\n              key={\"tab-lable\" + index}\r\n              label={label}\r\n              value={index}\r\n            />\r\n          ))}\r\n        </TabList>\r\n      </Box>\r\n      {panels.map((panel, index) => (\r\n        <TabPanel\r\n          key={\"tab-pane\" + index}\r\n          keepMounted\r\n          sx={{ padding: 0 }}\r\n          value={index}\r\n        >\r\n          {panel}\r\n        </TabPanel>\r\n      ))}\r\n    </TabContext>\r\n  );\r\n};\r\n","import { Operator, Token, TokenType } from \"$types/lexer\";\r\n\r\nconst OPERATOR_TABLE: Record<string, Operator> = {\r\n  \"and\": Operator.AND,\r\n  \"or\": Operator.OR,\r\n  \"implies\": Operator.IMPLIES,\r\n  \"iff\": Operator.IFF,\r\n  \"not\": Operator.NOT,\r\n  \"\\u{2227}\": Operator.AND,\r\n  \"\\u{2228}\": Operator.OR,\r\n  \"\\u{21D2}\": Operator.IMPLIES,\r\n  \"\\u{21D4}\": Operator.IFF,\r\n  \"\\u{00AC}\": Operator.NOT,\r\n};\r\n\r\nconst IS_WHITESPACE_MANY = /\\s+/g;\r\nconst IS_SYMBOL = /^[a-zA-Z\\p{Script=Thai}]+/mu;\r\nconst collapseWhitespace = (source: string): string => {\r\n  return source.replaceAll(IS_WHITESPACE_MANY, \" \");\r\n};\r\n\r\nconst collectSymbol = (source: string): string => {\r\n  const match = IS_SYMBOL.exec(source);\r\n  if (match === null || match.length === 0) {\r\n    return \"\";\r\n  }\r\n  return match[0];\r\n};\r\n\r\nconst lex = (source: string): Token[] => {\r\n  const sourceLength = source.length;\r\n  let tokens: Token[] = [];\r\n  let pos = 0;\r\n  while (pos < sourceLength) {\r\n    const char = source[pos];\r\n\r\n    switch (char) {\r\n      case \" \":\r\n        pos++;\r\n        continue;\r\n      case \"(\":\r\n        tokens.push({\r\n          tokenType: TokenType.LEFT_PARENTHESIS,\r\n          pos,\r\n        });\r\n        pos++;\r\n        continue;\r\n      case \")\":\r\n        tokens.push({\r\n          tokenType: TokenType.RIGHT_PARENTHESIS,\r\n          pos,\r\n        });\r\n        pos++;\r\n        continue;\r\n    }\r\n\r\n    const opSign = OPERATOR_TABLE[char];\r\n    if (opSign !== undefined) {\r\n      tokens.push({\r\n        tokenType: TokenType.OPERATOR,\r\n        name: opSign,\r\n        pos,\r\n      });\r\n      pos++;\r\n    }\r\n\r\n    const symbol = collectSymbol(source.slice(pos));\r\n    if (symbol.length === 0) {\r\n      tokens = [];\r\n      tokens.push({\r\n        tokenType: TokenType.ERROR,\r\n        pos,\r\n        source,\r\n      });\r\n      break;\r\n    }\r\n\r\n    const opName = OPERATOR_TABLE[symbol];\r\n    if (opName !== undefined) {\r\n      tokens.push({\r\n        tokenType: TokenType.OPERATOR,\r\n        name: opName,\r\n        pos,\r\n      });\r\n      pos += symbol.length;\r\n      continue;\r\n    }\r\n\r\n    tokens.push({\r\n      tokenType: TokenType.IDENTIFIER,\r\n      symbol,\r\n      length: symbol.length,\r\n      pos,\r\n    });\r\n    pos += symbol.length;\r\n    continue;\r\n  }\r\n\r\n  return tokens;\r\n};\r\n\r\nexport const lexer = (source: string): Token[] => {\r\n  const sourceCollapsed = collapseWhitespace(\r\n    source.normalize()\r\n  );\r\n  return lex(sourceCollapsed);\r\n};\r\n","import { Operator, Token, TokenType } from \"$types/lexer\";\r\nimport {\r\n  ErrorType,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/parser\";\r\n\r\nconst OPERATOR_PRECEDENCE = {\r\n  [Operator.NOT]: 6,\r\n  [Operator.AND]: 5,\r\n  [Operator.OR]: 4,\r\n  [Operator.IMPLIES]: 3,\r\n  [Operator.IFF]: 2,\r\n};\r\n\r\nconst polishToAST = (tokens: Token[]): SyntaxTree => {\r\n  const tok = tokens.pop();\r\n  if (tok === undefined) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.ERROR,\r\n      errorType: ErrorType.PARSER_ERROR,\r\n      reason: \"Expression ended unexpectedly\",\r\n    };\r\n  }\r\n\r\n  switch (tok.tokenType) {\r\n    case TokenType.ERROR:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.ERROR,\r\n        errorType: ErrorType.LEXICAL_ERROR,\r\n        pos: tok.pos,\r\n        source: tok.source,\r\n      };\r\n    case TokenType.RIGHT_PARENTHESIS:\r\n    case TokenType.LEFT_PARENTHESIS:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.ERROR,\r\n        errorType: ErrorType.PARSER_ERROR,\r\n        reason: `Found unexpected parenthesis at position ${tok.pos}`,\r\n      };\r\n    case TokenType.IDENTIFIER:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.IDENTIFIER,\r\n        value: tok.symbol,\r\n      };\r\n  }\r\n\r\n  if (tok.name === Operator.NOT) {\r\n    const operand = polishToAST(tokens);\r\n    if (operand.nodeType === SyntaxTreeNodeType.ERROR) {\r\n      return operand;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.UNARY_OPERATOR,\r\n      operator: tok.name,\r\n      operand,\r\n    };\r\n  }\r\n\r\n  const right = polishToAST(tokens);\r\n  if (right.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return right;\r\n  }\r\n\r\n  const left = polishToAST(tokens);\r\n  if (left.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return left;\r\n  }\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.BINARY_OPERATOR,\r\n    operator: tok.name,\r\n    leftOperand: left,\r\n    rightOperand: right,\r\n  };\r\n};\r\n\r\n// https://en.wikipedia.org/wiki/Shunting_yard_algorithm\r\nconst infixToPolish = (tokens: Token[]): Token[] => {\r\n  const outStack: Token[] = [];\r\n  const opStack: Token[] = [];\r\n\r\n  let pos = 0;\r\n\r\n  while (pos < tokens.length) {\r\n    const token = tokens[pos];\r\n    pos++;\r\n\r\n    switch (token.tokenType) {\r\n      case TokenType.ERROR:\r\n        outStack.push(token);\r\n        return outStack;\r\n      case TokenType.IDENTIFIER:\r\n        outStack.push(token);\r\n        break;\r\n      case TokenType.LEFT_PARENTHESIS:\r\n        opStack.push(token);\r\n        break;\r\n    }\r\n\r\n    if (token.tokenType === TokenType.OPERATOR) {\r\n      const precedence = OPERATOR_PRECEDENCE[token.name];\r\n\r\n      while (opStack.length > 0) {\r\n        const last = opStack[opStack.length - 1];\r\n        if (last.tokenType === TokenType.LEFT_PARENTHESIS) {\r\n          break;\r\n        }\r\n        if (\r\n          last.tokenType === TokenType.OPERATOR &&\r\n          OPERATOR_PRECEDENCE[last.name] < precedence\r\n        ) {\r\n          break;\r\n        }\r\n        opStack.pop();\r\n        outStack.push(last);\r\n      }\r\n\r\n      opStack.push(token);\r\n    }\r\n\r\n    if (token.tokenType === TokenType.RIGHT_PARENTHESIS) {\r\n      while (opStack.length > 0) {\r\n        const last = opStack[opStack.length - 1];\r\n        if (last.tokenType === TokenType.LEFT_PARENTHESIS) {\r\n          break;\r\n        }\r\n        if (opStack.length === 1) {\r\n          throw Error(\r\n            `Found unpaired right parenthesis at position ${token.pos}`\r\n          );\r\n        }\r\n        opStack.pop();\r\n        outStack.push(last);\r\n      }\r\n      if (\r\n        opStack.length === 0 ||\r\n        opStack[opStack.length - 1].tokenType !==\r\n          TokenType.LEFT_PARENTHESIS\r\n      ) {\r\n        throw Error(\r\n          `Found unpaired right at position ${token.pos}`\r\n        );\r\n      }\r\n      opStack.pop(); // pop left parenthesis\r\n    }\r\n  }\r\n\r\n  while (opStack.length > 0) {\r\n    const last = opStack[opStack.length - 1];\r\n    if (last.tokenType === TokenType.LEFT_PARENTHESIS) {\r\n      throw Error(\r\n        `Found unclosed left parenthesis at position ${last.pos}`\r\n      );\r\n    }\r\n    opStack.pop();\r\n    outStack.push(last);\r\n  }\r\n  return outStack;\r\n};\r\n\r\nexport const parser = (tokens: Token[]): SyntaxTree => {\r\n  try {\r\n    const polish = infixToPolish(tokens);\r\n\r\n    if (\r\n      polish.length === 1 &&\r\n      polish[0].tokenType === TokenType.ERROR\r\n    ) {\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.ERROR,\r\n        errorType: ErrorType.LEXICAL_ERROR,\r\n        pos: polish[0].pos,\r\n        source: polish[0].source,\r\n      };\r\n    }\r\n    const tree = polishToAST(polish);\r\n    if (polish.length === 0) {\r\n      return tree;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.ERROR,\r\n      errorType: ErrorType.PARSER_ERROR,\r\n      reason: \"Invalid Boolean expression\",\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.ERROR,\r\n      errorType: ErrorType.PARSER_ERROR,\r\n      reason: (e as Error).message,\r\n    };\r\n  }\r\n};\r\n","import { Editor } from \"$components/Editor\";\r\nimport { LatexDisplay } from \"$components/LatexDisplay\";\r\nimport { Playground } from \"$components/Playground\";\r\nimport { StyledTabs } from \"$components/StyledTabs\";\r\nimport { lexer } from \"$core/interpreter/lexer\";\r\nimport { parser } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeToLatex } from \"$core/tree/conversion\";\r\nimport { SyntaxTree } from \"$types/parser\";\r\nimport { Container, Stack } from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const EditorView: FC = () => {\r\n  const { t } = useTranslation();\r\n  const [tree, setTree] = useState<SyntaxTree | null>(null);\r\n\r\n  const handleExecute = (value: string) => {\r\n    const tokens = lexer(value);\r\n    if (tokens.length === 0) {\r\n      setTree(null);\r\n      return;\r\n    }\r\n    const _tree = parser(tokens);\r\n    setTree(_tree);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Stack\r\n        useFlexGap\r\n        spacing={1}\r\n        padding={2}\r\n      >\r\n        <Editor onExecute={handleExecute} />\r\n        <StyledTabs\r\n          tabLabels={[\"Original\", \"Simplified\"]}\r\n          panels={[\r\n            <Stack spacing={1}>\r\n              <LatexDisplay\r\n                tex={syntaxTreeToLatex(tree)}\r\n                emptyText={t(\"common.emptyText\")}\r\n              />\r\n              <Playground tree={tree} />\r\n            </Stack>,\r\n            <Stack spacing={1}>\r\n              <LatexDisplay\r\n                tex={syntaxTreeToLatex(tree)}\r\n                emptyText={t(\"common.emptyText\")}\r\n              />\r\n              <Playground tree={tree} />\r\n            </Stack>,\r\n          ]}\r\n        />\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n","export default \"data:text/plain;base64,IyMgVXNlZnVsIFRoZW9yZW1z8J+agA0KDQojIyMgRGUgTW9yZ2FuJ3MgTGF3DQoNCioqVGhlb3JlbSoqOiBOZWdhdGlvbiBpcyBkaXN0cmlidXRpdmUgb3ZlciBjb25qdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChQIFxsYW5kIFEpIFxlcXVpdiBcbG5vdCBQIFxsb3IgXGxub3QgUS4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IE5lZ2F0aW9uIGlzIGRpc3RyaWJ1dGl2ZSBvdmVyIGRpc2p1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KXGxub3QgKFAgXGxvciBRKSBcZXF1aXYgXGxub3QgUCBcbGFuZCBcbG5vdCBRLg0KXGVuZHthbGlnbip9DQokJA0KDQpSZWxhdGVkIHJlc291cmNlczoNCi0gW0RlIE1vcmdhbidzIGxhdyAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvRGVfTW9yZ2FuJTI3c19MYXdzXyhMb2dpYykpDQoNCiMjIyBSdWxlIG9mIERvdWJsZSBOZWdhdGlvbg0KDQoqKlRoZW9yZW0qKjogVGhlIHRydXRoIHZhbHVlIG9mIHRoZSBkb3VibGUgbmVnYXRpb24gb2YgYSBwcm9wb3NpdGlvbiBpcyBlcXVpdmFsZW50IHRvIGl0c2VsZg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChcbG5vdCBQKSBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtEb3VibGUgbmVnYXRpb24gKFByb29md2lraSldKGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL0RvdWJsZV9OZWdhdGlvbikNCg0KIyMjIFJ1bGUgb2YgSWRlbXBvdGVuY2UNCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGlkZW1wb3RlbnQNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsb3IgUCBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IENvbmp1bmN0aW9uIGlzIGlkZW1wb3RlbnQNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsYW5kIFAgXGVxdWl2IFAuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBJZGVtcG90ZW5jZSAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvUnVsZV9vZl9JZGVtcG90ZW5jZSkNCi0gW0lkZW1wb3RlbmNlIChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JZGVtcG90ZW5jZSkNCg0KIyMjIFJ1bGUgb2YgQ29tbXV0YXRpb24NCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGNvbW11dGF0aXZlDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIFEgXGVxdWl2IFEgXGxvciBQLg0KXGVuZHthbGlnbip9DQokJA0KDQoqKlRoZW9yZW0qKjogQ29uanVuY3Rpb24gaXMgY29tbXV0YXRpdmUNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsYW5kIFEgXGVxdWl2IFEgXGxhbmQgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtSdWxlIG9mIENvbW11dGF0aW9uIChQcm9vZndpa2kpXShodHRwczovL3Byb29md2lraS5vcmcvd2lraS9SdWxlX29mX0NvbW11dGF0aW9uKQ0KLSBbQ29tbXV0YXRpdmUgcHJvcGVydHkgKFdpa2lwZWRpYSldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbW11dGF0aXZlX3Byb3BlcnR5KQ0KDQojIyMgUnVsZSBvZiBBc3NvY2lhdGlvbg0KDQoqKlRoZW9yZW0qKjogRGlzanVuY3Rpb24gaXMgYXNzb2NpYXRpdmUNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsb3IgKFEgXGxvciBSKSBcZXF1aXYgKFAgXGxvciBRKSBcbG9yIFIuDQpcZW5ke2FsaWduKn0NCiQkDQoNCioqVGhlb3JlbSoqOiBDb25qdW5jdGlvbiBpcyBhc3NvY2lhdGl2ZQ0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFEgXGxhbmQgUikgXGVxdWl2IChQIFxsYW5kIFEpIFxsYW5kIFIuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBBc3NvY2lhdGlvbiAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvUnVsZV9vZl9Bc3NvY2lhdGlvbikNCi0gW0Fzc29jaWF0aXZlIHByb3BlcnR5IChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Bc3NvY2lhdGl2ZV9wcm9wZXJ0eSkNCg0KIyMjIFJ1bGUgb2YgRGlzdHJpYnV0aW9uDQoNCioqVGhlb3JlbSoqOiBDb25qdW5jdGlvbiBpcyBkaXN0cmlidXRpdmUgb3ZlciBkaXNqdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFEgXGxvciBSKSBcZXF1aXYgKFAgXGxhbmQgUSkgXGxvciAoUCBcbGFuZCBSKS4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGRpc3RyaWJ1dGl2ZSBvdmVyIGNvbmp1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIChRIFxsYW5kIFIpIFxlcXVpdiAoUCBcbG9yIFEpIFxsYW5kIChQIFxsb3IgUikuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBkaXN0cmlidXRpb24gKFByb29md2lraSldKGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1J1bGVfb2ZfRGlzdHJpYnV0aW9uKQ0KLSBbRGlzdHJpYnV0aXZlIHByb3BlcnR5IChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaXN0cmlidXRpdmVfcHJvcGVydHkpDQoNCiMjIyBBYnNvcnB0aW9uIExhd3MgDQoNCioqVGhlb3JlbSoqOiBEaXNqdW5jdGlvbiBhYnNvcmJzIGNvbmp1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIChQIFxsYW5kIFEpIFxlcXVpdiBQLg0KXGVuZHthbGlnbip9DQokJA0KDQoqKlRoZW9yZW0qKjogQ29uanVuY3Rpb24gYWJzb3JicyBkaXNqdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFAgXGxvciBRKSBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtBYnNvcnB0aW9uIExhd3MgIChQcm9vZndpa2kpXShodHRwczovL3Byb29md2lraS5vcmcvd2lraS9BYnNvcnB0aW9uX0xhd3NfKEJvb2xlYW5fQWxnZWJyYXMpKQ0KDQojIyMgTGF3IG9mIEV4Y2x1ZGVkIE1pZGRsZQ0KDQoqKlRoZW9yZW0qKjogRXZlcnkgcHJvcG9zaXRpb24gaXMgZWl0aGVyIHRydWUgb3IgZmFsc2UuDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIFxsbm90IFAgXGVxdWl2IFx0b3AuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbTGF3IG9mIEV4Y2x1ZGVkIE1pZGRsZSAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvTGF3X29mX0V4Y2x1ZGVkX01pZGRsZSkNCg0KIyMjIFByaW5jaXBsZSBvZiBOb24tQ29udHJhZGljdGlvbg0KDQoqKlRoZW9yZW0qKjogQSBwcm9wb3NpdGlvbiBjYW5ub3QgYmUgYm90aCB0cnVlIGFuZCBmYWxzZSBhdCB0aGUgc2FtZSB0aW1lLg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChQIFxsYW5kIFxsbm90IFApIFxlcXVpdiBcdG9wLg0KXGVuZHthbGlnbip9DQokJA0KDQpSZWxhdGVkIHJlc291cmNlczoNCi0gW1ByaW5jaXBsZSBvZiBOb24tQ29udHJhZGljdGlvbiAoUHJvb2Z3aWtpKV0oIGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1ByaW5jaXBsZV9vZl9Ob24tQ29udHJhZGljdGlvbikNCg0K\"","export default \"data:text/plain;base64,IyMg8J+TmlVzZXIgTWFudWFsDQoNClRvIHVzZSB0aGUgaW50ZXJwcmV0ZXIsIHNpbXBseSB0eXBlIGluIGEgQm9vbGVhbiBleHByZXNpb24gaW50byB0aGUgaW5wdXQgZmllbGQgYW5kIHByZXNzIHJ1biEgSWYgeW91IGV4cHJlc3Npb24gaXMgd2VsbC1mb3JtZWQsIHlvdSBzaG91bGQgc2VlIGEgdmVyc2lvbiBvZiB5b3VyIGV4cHJlc3Npb24gdGhlIGludGVycHJldGVyIHNlZXMsIGJ1dCBpZiB5b3Ugc2VlIG5vdGhpbmcsIHlvdSBtaWdodCB3YW50IHRvIGRvdWJsZSBjaGVjayB5b3VyIGV4cHJlc3Npb24uDQoNCllvdSBjYW4gYWxzbyBwbGF5IGFyb3VuZCB3aXRoIHRoZSB0cnV0aCB2YWx1ZSBvZiB5b3VyIGV4cHJlc3Npb24gYnkgY2hhbmdpbmcgdGhlIHRydXRoIHZhbHVlcyBvZiB5b3VyIHByb3Bvc2l0aW9ucy4NCg0KV2hpbGUgeW91IGFyZSBoZXJlLCBsZXQgbWUgdGVsbCB5b3UgYSBmZXcgdGlwcy4gWW91IGNhbiBwcmVzcyBgQ1RSTGAgKyBgRU5URVJgIHRvIHRyaWdnZXIgdGhlIHJ1biBidXR0b24uIFRoZSBtYXRoIHN5bWJvbHMgY2FuIGJlIHRyaWNreSB0byB3cml0ZSwgc28geW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZzsgDQoNCg0KDQotICphbmQqIGlzIGFuIGFsaWFzIGZvciAmYW5kOywgDQotICpvciogaXMgYW4gYWxpYXMgZm9yICZvcjssIA0KLSAqaW1wbGllcyogaXMgYW4gYWxpYXMgZm9yICZyYXJyOywgDQotICppZmYqIGlzIGFuIGFsaWFzIGZvciAmaEFycjssIGFuZCANCi0gKm5vdCogaXMgYW4gYWxpYXMgZm9yICZub3Q7LiANCg0KQmV3YXJlIHNpbmNlIHRoZXNlIGFyZSBjYXNlLXNlbnNpdGl2ZS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4gd3JpdGUgYW4gZXhwcmVzaW9uIGxpa2UgdGhpczsgYG5vdCAocCBhbmQgcSkgaWZmIG5vdCBwIG9yIG5vdCBxYC4NCg0KDQo=\"","import { Divider, Typography } from \"@mui/material\";\r\nimport { JsxRuntimeComponents } from \"node_modules/react-markdown/lib\";\r\nimport { FC } from \"react\";\r\nimport Markdown from \"react-markdown\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkMath from \"remark-math\";\r\n\r\nconst COMPONENTS_OVERRIDE: Partial<JsxRuntimeComponents> = {\r\n  h2: ({ children, id }) => (\r\n    <Typography\r\n      variant=\"h2\"\r\n      id={id}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h3: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h3\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h4: ({ id, children }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h4\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  p: ({ children }) => (\r\n    <Typography\r\n      component=\"p\"\r\n      gutterBottom\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  // code: ({ children }) => <StyledKBD>{children}</StyledKBD>,\r\n  em: ({ children }) => (\r\n    <Typography\r\n      fontWeight=\"bold\"\r\n      component=\"em\"\r\n      fontStyle=\"normal\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  hr: () => (\r\n    <Divider\r\n      flexItem\r\n      sx={{ marginY: 4 }}\r\n      variant=\"middle\"\r\n    />\r\n  ),\r\n  a: ({ href, hrefLang, referrerPolicy, children }) => (\r\n    <Typography\r\n      component=\"a\"\r\n      target=\"_blank\"\r\n      href={href}\r\n      hrefLang={hrefLang}\r\n      referrerPolicy={referrerPolicy}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n};\r\n\r\ntype StyledMarkdownProps = {\r\n  children: string;\r\n};\r\nexport const StyledMarkdown: FC<StyledMarkdownProps> = (\r\n  props\r\n) => {\r\n  const { children } = props;\r\n  return (\r\n    <Markdown\r\n      components={COMPONENTS_OVERRIDE}\r\n      rehypePlugins={[rehypeKatex, rehypeSlug]}\r\n      remarkPlugins={[remarkMath]}\r\n    >\r\n      {children}\r\n    </Markdown>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetchMarkdown = (path: string) => {\r\n  const [content, setContent] = useState<string | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    let isWorking = true;\r\n    fetch(path)\r\n      .then((res) => res.text())\r\n      .then((text) => {\r\n        if (!isWorking) {\r\n          return;\r\n        }\r\n        setContent(text);\r\n      });\r\n    return () => {\r\n      isWorking = false;\r\n    };\r\n  }, [path]);\r\n\r\n  return content;\r\n};\r\n","import AboutBlog from \"$assets/blogs/BooleanAlgebraSummary/en.txt\";\r\nimport UserManualBlog from \"$assets/blogs/UserManual/en.txt\";\r\nimport { StyledMarkdown } from \"$components/StyledMarkdown\";\r\nimport { useFetchMarkdown } from \"$hooks/useFetchMarkdown\";\r\nimport { Box, Container, Typography } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nexport const BlogView: FC = () => {\r\n  const userManualContent =\r\n    useFetchMarkdown(UserManualBlog);\r\n  const content = useFetchMarkdown(AboutBlog);\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          backgroundColor: (t) => t.palette.secondary.light,\r\n          paddingY: 2,\r\n          marginY: 8,\r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <Typography\r\n            variant=\"h1\"\r\n            component=\"h1\"\r\n          >\r\n            Hi there! 👋\r\n          </Typography>\r\n          <StyledMarkdown>\r\n            {userManualContent ?? \"\"}\r\n          </StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n      <Box marginBottom={4}>\r\n        <Container maxWidth=\"md\">\r\n          <StyledMarkdown>{content ?? \"\"}</StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  createTheme,\r\n  responsiveFontSizes,\r\n} from \"@mui/material\";\r\nimport { brown, green } from \"@mui/material/colors\";\r\n\r\nexport let theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: brown[\"600\"],\r\n    },\r\n    secondary: {\r\n      light: \"#abcbad\",\r\n      main: green[\"800\"],\r\n    },\r\n  },\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: t.palette.primary.dark,\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: t.palette.primary.dark,\r\n        }),\r\n      },\r\n    },\r\n    MuiTypography: {\r\n      defaultProps: {\r\n        sx: {\r\n          userSelect: \"none\",\r\n        },\r\n      },\r\n    },\r\n    MuiDialogActions: {\r\n      defaultProps: {\r\n        sx: { justifyContent: \"flex-start\" },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n","import { EditorView } from \"$views/EditorView\";\r\nimport { BlogView } from \"$views/TheoremBlogView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { theme } from \"./theme\";\r\nconsole.log(\"App\");\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <EditorView />\r\n      <BlogView />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","export const en = {\r\n  translation: {\r\n    common: {\r\n      true: \"True\",\r\n      false: \"False\",\r\n      connectives: {\r\n        negation: \"Negation\",\r\n        conjunction: \"Conjunction\",\r\n        disjunction: \"Disjunction\",\r\n        implication: \"Implication\",\r\n        equivalence: \"Equivalence\",\r\n      },\r\n      emptyText: \"Nothing to see here\",\r\n    },\r\n    editor: {\r\n      howToUse: \"How to use?\",\r\n      run: \" Run\",\r\n      allowedOperatorLabel: \"Connectives to keep\",\r\n    },\r\n    playground: {\r\n      graph: {\r\n        center: \"Center Graph\",\r\n      },\r\n      dialog: {\r\n        close: \"Close\",\r\n      },\r\n      playback: {\r\n        start: \"Start\",\r\n        forward: \"Forward\",\r\n        rewind: \"Rewind\",\r\n        end: \"End\",\r\n      },\r\n    },\r\n  },\r\n} as const;\r\n","export const th = {\r\n  translation: {\r\n    common: {\r\n      true: \"จริง\",\r\n      false: \"เท็จ\",\r\n    },\r\n    editor: {\r\n      toolbar: {\r\n        connectives: {\r\n          negation: \"นิเสธ\",\r\n          conjunction: \"และ\",\r\n          disjunction: \"หรือ\",\r\n          implication: \"ถ้า แล้ว\",\r\n          equivalence: \"ก็ต่อเมื่อ\",\r\n        },\r\n        howToUse: \"คู่มือการใช้งาน\",\r\n        run: \"คำนวณ\",\r\n      },\r\n    },\r\n  },\r\n} as const;\r\n","import i18next from \"i18next\";\r\nimport {\r\n  default as Backend,\r\n  default as LangDectector,\r\n} from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { en } from \"./en/translation\";\r\nimport { th } from \"./th/translation\";\r\n\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    fallbackLng: \"en\",\r\n    debug: true,\r\n    resources: {\r\n      en,\r\n      th,\r\n    },\r\n  });\r\n","import { App } from \"$App/App\";\nimport \"$locales/config\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["StyledLatex","props","tex","options","ref","useRef","useEffect","katex","jsx","Typography","StyledTooltipButton","children","variant","startIcon","onClick","title","Tooltip","Button","OPERATOR","EditorRibbonInsert","onInsertChar","t","useTranslation","ButtonGroup","btn","index","EditorRibbon","onExecute","jsxs","Toolbar","Stack","PlayArrowRounded","TokenType","TokenType2","Operator","SYMBOL_LABEL","EditorSimplConfigGroup","onChange","values","FormLabel","FormControlLabel","Checkbox","k","l","checked","label","_","v","EditorTextField","rows","value","onKeyDown","TextField","e","Editor","operators","setOperators","useState","setValue","handleExecute","handleOperatorChange","p","next","handleInsertChar","char","prev","handleKeyDown","LatexDisplay","emptyText","palette","shape","useTheme","Box","alpha","ErrorType","ErrorType2","SyntaxTreeNodeType","SyntaxTreeNodeType2","_syntaxTreeToLatex","tree","nodeType","left","right","labelLeft","labelRight","syntaxTreeToLatex","_syntaxTreetoExprTree","orderStart","exprNode","child","fn","syntaxTreetoExprTree","augmentExprTree","order","_collectSymbols","exprTree","symbols","collectSymbols","_exprTreeToLatex","childLatex","leftLatex","rightLatex","exprTreeToLatex","PlaygroundDialogConfig","table","selected","symbol","FormControl","RadioGroup","Radio","PlaygroundDialog","node","open","onClose","Dialog","DialogTitle","DialogContent","DialogActions","StyledIconButton","onKeyPress","disabled","IconButton","PlaygroundPlaybackControl","maxValue","minValue","handleForward","handleRewind","handleKeyPress","key","maxLabel","KeyboardArrowLeftRounded","KeyboardArrowRightRounded","Slider","StyledFAB","Fab","TreeGraphLink","link","source","target","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","onMouseLeave","onMouseEnter","x","y","data","typography","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","handleMouseLeave","handleMouseEnter","Group","TreeGraph","symbolTable","onNodeClick","hierarchy","height","width","containerRef","useTooltipInPortal","showTooltip","hideTooltip","tooltipData","tooltipOpen","tooltipLeft","tooltipTop","useTooltip","handleMouseHoverNode","Zoom","zoom","Fragment","Tree","treeHeir","i","ControlCameraRounded","TooltipWithBounds","Playground","dialogOpen","setDialogOpen","setSymbolTable","setOrder","maxOrder","setMaxOrder","selectedNode","setSelectedNode","setExprTree","nextExprTree","handleNodeClick","handleTableChange","handleOrderChange","Divider","StyledTabs","panels","tabLabels","active","setActive","TabContext","TabList","Tab","panel","TabPanel","OPERATOR_TABLE","IS_WHITESPACE_MANY","IS_SYMBOL","collapseWhitespace","collectSymbol","match","lex","sourceLength","tokens","pos","opSign","opName","lexer","sourceCollapsed","OPERATOR_PRECEDENCE","polishToAST","tok","operand","infixToPolish","outStack","opStack","token","precedence","last","parser","polish","EditorView","setTree","_tree","Container","AboutBlog","COMPONENTS_OVERRIDE","id","href","hrefLang","referrerPolicy","StyledMarkdown","Markdown","rehypeKatex","rehypeSlug","remarkMath","useFetchMarkdown","path","content","setContent","isWorking","res","text","BlogView","userManualContent","UserManualBlog","theme","createTheme","brown","green","responsiveFontSizes","globalStyles","GlobalStyles","App","ThemeProvider","CssBaseline","en","th","i18next","Backend","LangDectector","initReactI18next","createRoot","StrictMode"],"mappings":"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"}