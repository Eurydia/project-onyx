{"version":3,"file":"remark-math-CyxIyoUy.js","sources":["../../node_modules/remark-math/lib/index.js"],"sourcesContent":["/// <reference types=\"mdast-util-math\" />\n/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\nimport {mathFromMarkdown, mathToMarkdown} from 'mdast-util-math'\nimport {math} from 'micromark-extension-math'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Add support for math.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkMath(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(math(settings))\n  fromMarkdownExtensions.push(mathFromMarkdown())\n  toMarkdownExtensions.push(mathToMarkdown(settings))\n}\n"],"names":["math","mathFromMarkdown","mathToMarkdown","emptyOptions","remarkMath","options","self","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions"],"mappings":"AAAA,OAAA,KAAAA,MAAA,yCAAA,OAAA,KAAAC,EAAA,KAAAC,MAAA,gCAcA,MAAMC,EAAe,CAAA,EAUN,SAASC,EAAWC,EAAS,CAG1C,MAAMC,EAAiC,KACjCC,EAAWF,GAAWF,EACtBK,EAAOF,EAAK,KAAI,EAEhBG,EACJD,EAAK,sBAAwBA,EAAK,oBAAsB,CAAE,GACtDE,EACJF,EAAK,yBAA2BA,EAAK,uBAAyB,CAAE,GAC5DG,EACJH,EAAK,uBAAyBA,EAAK,qBAAuB,CAAE,GAE9DC,EAAoB,KAAKT,EAAKO,CAAQ,CAAC,EACvCG,EAAuB,KAAKT,EAAkB,CAAA,EAC9CU,EAAqB,KAAKT,EAAeK,CAAQ,CAAC,CACpD","x_google_ignoreList":[0]}