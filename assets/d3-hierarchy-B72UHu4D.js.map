{"version":3,"file":"d3-hierarchy-B72UHu4D.js","sources":["../../node_modules/d3-hierarchy/src/hierarchy/count.js","../../node_modules/d3-hierarchy/src/hierarchy/each.js","../../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","../../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","../../node_modules/d3-hierarchy/src/hierarchy/sum.js","../../node_modules/d3-hierarchy/src/hierarchy/sort.js","../../node_modules/d3-hierarchy/src/hierarchy/path.js","../../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","../../node_modules/d3-hierarchy/src/hierarchy/descendants.js","../../node_modules/d3-hierarchy/src/hierarchy/leaves.js","../../node_modules/d3-hierarchy/src/hierarchy/links.js","../../node_modules/d3-hierarchy/src/hierarchy/index.js","../../node_modules/d3-hierarchy/src/tree.js"],"sourcesContent":["function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","export default function(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\n\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n","import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n"],"names":["count","node","sum","children","node_count","node_each","callback","current","next","i","n","node_eachBefore","nodes","node_eachAfter","node_sum","value","node_sort","compare","node_path","end","start","ancestor","leastCommonAncestor","k","a","b","aNodes","bNodes","c","leaves","root","links","hierarchy","data","Node","valued","child","childs","defaultChildren","computeHeight","node_copy","copyData","d","height","node_ancestors","node_descendants","node_leaves","node_links","defaultSeparation","nextLeft","v","nextRight","moveSubtree","wm","wp","shift","change","executeShifts","w","nextAncestor","vim","TreeNode","treeRoot","tree","d3tree","separation","dx","dy","nodeSize","t","firstWalk","secondWalk","sizeNode","left","right","bottom","s","tx","kx","ky","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","x"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}