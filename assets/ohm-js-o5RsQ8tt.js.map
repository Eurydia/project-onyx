{"version":3,"file":"ohm-js-o5RsQ8tt.js","sources":["../../node_modules/ohm-js/src/common.js","../../node_modules/ohm-js/src/UnicodeCategories.js","../../node_modules/ohm-js/src/pexprs-main.js","../../node_modules/ohm-js/src/errors.js","../../node_modules/ohm-js/src/util.js","../../node_modules/ohm-js/src/Interval.js","../../node_modules/ohm-js/src/InputStream.js","../../node_modules/ohm-js/src/MatchResult.js","../../node_modules/ohm-js/src/PosInfo.js","../../node_modules/ohm-js/src/Trace.js","../../node_modules/ohm-js/src/pexprs-allowsSkippingPrecedingSpace.js","../../node_modules/ohm-js/src/pexprs-assertAllApplicationsAreValid.js","../../node_modules/ohm-js/src/pexprs-assertChoicesHaveUniformArity.js","../../node_modules/ohm-js/src/pexprs-assertIteratedExprsAreNotNullable.js","../../node_modules/ohm-js/src/nodes.js","../../node_modules/ohm-js/src/pexprs-eval.js","../../node_modules/ohm-js/src/pexprs-getArity.js","../../node_modules/ohm-js/src/pexprs-outputRecipe.js","../../node_modules/ohm-js/src/pexprs-introduceParams.js","../../node_modules/ohm-js/src/pexprs-isNullable.js","../../node_modules/ohm-js/src/pexprs-substituteParams.js","../../node_modules/ohm-js/src/pexprs-toArgumentNameList.js","../../node_modules/ohm-js/src/pexprs-toDisplayString.js","../../node_modules/ohm-js/src/Failure.js","../../node_modules/ohm-js/src/pexprs-toFailure.js","../../node_modules/ohm-js/src/pexprs-toString.js","../../node_modules/ohm-js/src/CaseInsensitiveTerminal.js","../../node_modules/ohm-js/src/MatchState.js","../../node_modules/ohm-js/src/Matcher.js","../../node_modules/ohm-js/src/Semantics.js","../../node_modules/ohm-js/src/Grammar.js","../../node_modules/ohm-js/src/GrammarDecl.js","../../node_modules/ohm-js/src/Builder.js","../../node_modules/ohm-js/src/makeRecipe.js","../../node_modules/ohm-js/dist/built-in-rules.js","../../node_modules/ohm-js/src/main-kernel.js","../../node_modules/ohm-js/dist/ohm-grammar.js","../../node_modules/ohm-js/src/buildGrammar.js","../../node_modules/ohm-js/dist/operations-and-attributes.js","../../node_modules/ohm-js/src/semanticsDeferredInit.js","../../node_modules/ohm-js/src/findIndentation.js","../../node_modules/ohm-js/src/IndentationSensitive.js","../../node_modules/ohm-js/src/main.js"],"sourcesContent":["// --------------------------------------------------------------------\n// Private Stuff\n// --------------------------------------------------------------------\n\n// Helpers\n\nconst escapeStringFor = {};\nfor (let c = 0; c < 128; c++) {\n  escapeStringFor[c] = String.fromCharCode(c);\n}\nescapeStringFor[\"'\".charCodeAt(0)] = \"\\\\'\";\nescapeStringFor['\"'.charCodeAt(0)] = '\\\\\"';\nescapeStringFor['\\\\'.charCodeAt(0)] = '\\\\\\\\';\nescapeStringFor['\\b'.charCodeAt(0)] = '\\\\b';\nescapeStringFor['\\f'.charCodeAt(0)] = '\\\\f';\nescapeStringFor['\\n'.charCodeAt(0)] = '\\\\n';\nescapeStringFor['\\r'.charCodeAt(0)] = '\\\\r';\nescapeStringFor['\\t'.charCodeAt(0)] = '\\\\t';\nescapeStringFor['\\u000b'.charCodeAt(0)] = '\\\\v';\n\n// --------------------------------------------------------------------\n// Exports\n// --------------------------------------------------------------------\n\nexport function abstract(optMethodName) {\n  const methodName = optMethodName || '';\n  return function() {\n    throw new Error(\n        'this method ' +\n        methodName +\n        ' is abstract! ' +\n        '(it has no implementation in class ' +\n        this.constructor.name +\n        ')',\n    );\n  };\n}\n\nexport function assert(cond, message) {\n  if (!cond) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\n// Define a lazily-computed, non-enumerable property named `propName`\n// on the object `obj`. `getterFn` will be called to compute the value the\n// first time the property is accessed.\nexport function defineLazyProperty(obj, propName, getterFn) {\n  let memo;\n  Object.defineProperty(obj, propName, {\n    get() {\n      if (!memo) {\n        memo = getterFn.call(this);\n      }\n      return memo;\n    },\n  });\n}\n\nexport function clone(obj) {\n  if (obj) {\n    return Object.assign({}, obj);\n  }\n  return obj;\n}\n\nexport function repeatFn(fn, n) {\n  const arr = [];\n  while (n-- > 0) {\n    arr.push(fn());\n  }\n  return arr;\n}\n\nexport function repeatStr(str, n) {\n  return new Array(n + 1).join(str);\n}\n\nexport function repeat(x, n) {\n  return repeatFn(() => x, n);\n}\n\nexport function getDuplicates(array) {\n  const duplicates = [];\n  for (let idx = 0; idx < array.length; idx++) {\n    const x = array[idx];\n    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {\n      duplicates.push(x);\n    }\n  }\n  return duplicates;\n}\n\nexport function copyWithoutDuplicates(array) {\n  const noDuplicates = [];\n  array.forEach(entry => {\n    if (noDuplicates.indexOf(entry) < 0) {\n      noDuplicates.push(entry);\n    }\n  });\n  return noDuplicates;\n}\n\nexport function isSyntactic(ruleName) {\n  const firstChar = ruleName[0];\n  return firstChar === firstChar.toUpperCase();\n}\n\nexport function isLexical(ruleName) {\n  return !isSyntactic(ruleName);\n}\n\nexport function padLeft(str, len, optChar) {\n  const ch = optChar || ' ';\n  if (str.length < len) {\n    return repeatStr(ch, len - str.length) + str;\n  }\n  return str;\n}\n\n// StringBuffer\n\nexport function StringBuffer() {\n  this.strings = [];\n}\n\nStringBuffer.prototype.append = function(str) {\n  this.strings.push(str);\n};\n\nStringBuffer.prototype.contents = function() {\n  return this.strings.join('');\n};\n\nconst escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));\n\nexport function unescapeCodePoint(s) {\n  if (s.charAt(0) === '\\\\') {\n    switch (s.charAt(1)) {\n      case 'b':\n        return '\\b';\n      case 'f':\n        return '\\f';\n      case 'n':\n        return '\\n';\n      case 'r':\n        return '\\r';\n      case 't':\n        return '\\t';\n      case 'v':\n        return '\\v';\n      case 'x':\n        return escapeUnicode(s.slice(2, 4));\n      case 'u':\n        return s.charAt(2) === '{' ?\n          escapeUnicode(s.slice(3, -1)) :\n          escapeUnicode(s.slice(2, 6));\n      default:\n        return s.charAt(1);\n    }\n  } else {\n    return s;\n  }\n}\n\n// Helper for producing a description of an unknown object in a safe way.\n// Especially useful for error messages where an unexpected type of object was encountered.\nexport function unexpectedObjToString(obj) {\n  if (obj == null) {\n    return String(obj);\n  }\n  const baseToString = Object.prototype.toString.call(obj);\n  try {\n    let typeName;\n    if (obj.constructor && obj.constructor.name) {\n      typeName = obj.constructor.name;\n    } else if (baseToString.indexOf('[object ') === 0) {\n      typeName = baseToString.slice(8, -1); // Extract e.g. \"Array\" from \"[object Array]\".\n    } else {\n      typeName = typeof obj;\n    }\n    return typeName + ': ' + JSON.stringify(String(obj));\n  } catch (e) {\n    return baseToString;\n  }\n}\n","// These are just categories that are used in ES5/ES2015.\n// The full list of Unicode categories is here: http://www.fileformat.info/info/unicode/category/index.htm.\nexport const UnicodeCategories = {\n  // Letters\n  Lu: /\\p{Lu}/u,\n  Ll: /\\p{Ll}/u,\n  Lt: /\\p{Lt}/u,\n  Lm: /\\p{Lm}/u,\n  Lo: /\\p{Lo}/u,\n\n  // Numbers\n  Nl: /\\p{Nl}/u,\n  Nd: /\\p{Nd}/u,\n\n  // Marks\n  Mn: /\\p{Mn}/u,\n  Mc: /\\p{Mc}/u,\n\n  // Punctuation, Connector\n  Pc: /\\p{Pc}/u,\n\n  // Separator, Space\n  Zs: /\\p{Zs}/u,\n\n  // These two are not real Unicode categories, but our useful for Ohm.\n  // L is a combination of all the letter categories.\n  // Ltmo is a combination of Lt, Lm, and Lo.\n  L: /\\p{Letter}/u,\n  Ltmo: /\\p{Lt}|\\p{Lm}|\\p{Lo}/u,\n};\n","import {UnicodeCategories} from './UnicodeCategories.js';\nimport * as common from './common.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\n// General stuff\n\nexport class PExpr {\n  constructor() {\n    if (this.constructor === PExpr) {\n      throw new Error(\"PExpr cannot be instantiated -- it's abstract\");\n    }\n  }\n\n  // Set the `source` property to the interval containing the source for this expression.\n  withSource(interval) {\n    if (interval) {\n      this.source = interval.trimmed();\n    }\n    return this;\n  }\n}\n\n// Any\n\nexport const any = Object.create(PExpr.prototype);\n\n// End\n\nexport const end = Object.create(PExpr.prototype);\n\n// Terminals\n\nexport class Terminal extends PExpr {\n  constructor(obj) {\n    super();\n    this.obj = obj;\n  }\n}\n\n// Ranges\n\nexport class Range extends PExpr {\n  constructor(from, to) {\n    super();\n    this.from = from;\n    this.to = to;\n    // If either `from` or `to` is made up of multiple code units, then\n    // the range should consume a full code point, not a single code unit.\n    this.matchCodePoint = from.length > 1 || to.length > 1;\n  }\n}\n\n// Parameters\n\nexport class Param extends PExpr {\n  constructor(index) {\n    super();\n    this.index = index;\n  }\n}\n\n// Alternation\n\nexport class Alt extends PExpr {\n  constructor(terms) {\n    super();\n    this.terms = terms;\n  }\n}\n\n// Extend is an implementation detail of rule extension\n\nexport class Extend extends Alt {\n  constructor(superGrammar, name, body) {\n    const origBody = superGrammar.rules[name].body;\n    super([body, origBody]);\n\n    this.superGrammar = superGrammar;\n    this.name = name;\n    this.body = body;\n  }\n}\n\n// Splice is an implementation detail of rule overriding with the `...` operator.\nexport class Splice extends Alt {\n  constructor(superGrammar, ruleName, beforeTerms, afterTerms) {\n    const origBody = superGrammar.rules[ruleName].body;\n    super([...beforeTerms, origBody, ...afterTerms]);\n\n    this.superGrammar = superGrammar;\n    this.ruleName = ruleName;\n    this.expansionPos = beforeTerms.length;\n  }\n}\n\n// Sequences\n\nexport class Seq extends PExpr {\n  constructor(factors) {\n    super();\n    this.factors = factors;\n  }\n}\n\n// Iterators and optionals\n\nexport class Iter extends PExpr {\n  constructor(expr) {\n    super();\n    this.expr = expr;\n  }\n}\n\nexport class Star extends Iter {}\nexport class Plus extends Iter {}\nexport class Opt extends Iter {}\n\nStar.prototype.operator = '*';\nPlus.prototype.operator = '+';\nOpt.prototype.operator = '?';\n\nStar.prototype.minNumMatches = 0;\nPlus.prototype.minNumMatches = 1;\nOpt.prototype.minNumMatches = 0;\n\nStar.prototype.maxNumMatches = Number.POSITIVE_INFINITY;\nPlus.prototype.maxNumMatches = Number.POSITIVE_INFINITY;\nOpt.prototype.maxNumMatches = 1;\n\n// Predicates\n\nexport class Not extends PExpr {\n  constructor(expr) {\n    super();\n    this.expr = expr;\n  }\n}\n\nexport class Lookahead extends PExpr {\n  constructor(expr) {\n    super();\n    this.expr = expr;\n  }\n}\n\n// \"Lexification\"\n\nexport class Lex extends PExpr {\n  constructor(expr) {\n    super();\n    this.expr = expr;\n  }\n}\n\n// Rule application\n\nexport class Apply extends PExpr {\n  constructor(ruleName, args = []) {\n    super();\n    this.ruleName = ruleName;\n    this.args = args;\n  }\n\n  isSyntactic() {\n    return common.isSyntactic(this.ruleName);\n  }\n\n  // This method just caches the result of `this.toString()` in a non-enumerable property.\n  toMemoKey() {\n    if (!this._memoKey) {\n      Object.defineProperty(this, '_memoKey', {value: this.toString()});\n    }\n    return this._memoKey;\n  }\n}\n\n// Unicode character\n\nexport class UnicodeChar extends PExpr {\n  constructor(category) {\n    super();\n    this.category = category;\n    this.pattern = UnicodeCategories[category];\n  }\n}\n","import {assert} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nexport function createError(message, optInterval) {\n  let e;\n  if (optInterval) {\n    e = new Error(optInterval.getLineAndColumnMessage() + message);\n    e.shortMessage = message;\n    e.interval = optInterval;\n  } else {\n    e = new Error(message);\n  }\n  return e;\n}\n\n// ----------------- errors about intervals -----------------\n\nexport function intervalSourcesDontMatch() {\n  return createError(\"Interval sources don't match\");\n}\n\n// ----------------- errors about grammars -----------------\n\n// Grammar syntax error\n\nexport function grammarSyntaxError(matchFailure) {\n  const e = new Error();\n  Object.defineProperty(e, 'message', {\n    enumerable: true,\n    get() {\n      return matchFailure.message;\n    },\n  });\n  Object.defineProperty(e, 'shortMessage', {\n    enumerable: true,\n    get() {\n      return 'Expected ' + matchFailure.getExpectedText();\n    },\n  });\n  e.interval = matchFailure.getInterval();\n  return e;\n}\n\n// Undeclared grammar\n\nexport function undeclaredGrammar(grammarName, namespace, interval) {\n  const message = namespace ?\n    `Grammar ${grammarName} is not declared in namespace '${namespace}'` :\n    'Undeclared grammar ' + grammarName;\n  return createError(message, interval);\n}\n\n// Duplicate grammar declaration\n\nexport function duplicateGrammarDeclaration(grammar, namespace) {\n  return createError('Grammar ' + grammar.name + ' is already declared in this namespace');\n}\n\nexport function grammarDoesNotSupportIncrementalParsing(grammar) {\n  return createError(`Grammar '${grammar.name}' does not support incremental parsing`);\n}\n\n// ----------------- rules -----------------\n\n// Undeclared rule\n\nexport function undeclaredRule(ruleName, grammarName, optInterval) {\n  return createError(\n      'Rule ' + ruleName + ' is not declared in grammar ' + grammarName,\n      optInterval,\n  );\n}\n\n// Cannot override undeclared rule\n\nexport function cannotOverrideUndeclaredRule(ruleName, grammarName, optSource) {\n  return createError(\n      'Cannot override rule ' + ruleName + ' because it is not declared in ' + grammarName,\n      optSource,\n  );\n}\n\n// Cannot extend undeclared rule\n\nexport function cannotExtendUndeclaredRule(ruleName, grammarName, optSource) {\n  return createError(\n      'Cannot extend rule ' + ruleName + ' because it is not declared in ' + grammarName,\n      optSource,\n  );\n}\n\n// Duplicate rule declaration\n\nexport function duplicateRuleDeclaration(ruleName, grammarName, declGrammarName, optSource) {\n  let message =\n    \"Duplicate declaration for rule '\" + ruleName + \"' in grammar '\" + grammarName + \"'\";\n  if (grammarName !== declGrammarName) {\n    message += \" (originally declared in '\" + declGrammarName + \"')\";\n  }\n  return createError(message, optSource);\n}\n\n// Wrong number of parameters\n\nexport function wrongNumberOfParameters(ruleName, expected, actual, source) {\n  return createError(\n      'Wrong number of parameters for rule ' +\n      ruleName +\n      ' (expected ' +\n      expected +\n      ', got ' +\n      actual +\n      ')',\n      source,\n  );\n}\n\n// Wrong number of arguments\n\nexport function wrongNumberOfArguments(ruleName, expected, actual, expr) {\n  return createError(\n      'Wrong number of arguments for rule ' +\n      ruleName +\n      ' (expected ' +\n      expected +\n      ', got ' +\n      actual +\n      ')',\n      expr,\n  );\n}\n\n// Duplicate parameter names\n\nexport function duplicateParameterNames(ruleName, duplicates, source) {\n  return createError(\n      'Duplicate parameter names in rule ' + ruleName + ': ' + duplicates.join(', '),\n      source,\n  );\n}\n\n// Invalid parameter expression\n\nexport function invalidParameter(ruleName, expr) {\n  return createError(\n      'Invalid parameter to rule ' +\n      ruleName +\n      ': ' +\n      expr +\n      ' has arity ' +\n      expr.getArity() +\n      ', but parameter expressions must have arity 1',\n      expr.source,\n  );\n}\n\n// Application of syntactic rule from lexical rule\n\nconst syntacticVsLexicalNote =\n  'NOTE: A _syntactic rule_ is a rule whose name begins with a capital letter. ' +\n  'See https://ohmjs.org/d/svl for more details.';\n\nexport function applicationOfSyntacticRuleFromLexicalContext(ruleName, applyExpr) {\n  return createError(\n      'Cannot apply syntactic rule ' + ruleName + ' from here (inside a lexical context)',\n      applyExpr.source,\n  );\n}\n\n// Lexical rule application used with applySyntactic\n\nexport function applySyntacticWithLexicalRuleApplication(applyExpr) {\n  const {ruleName} = applyExpr;\n  return createError(\n      `applySyntactic is for syntactic rules, but '${ruleName}' is a lexical rule. ` +\n      syntacticVsLexicalNote,\n      applyExpr.source,\n  );\n}\n\n// Application of applySyntactic in a syntactic context\n\nexport function unnecessaryExperimentalApplySyntactic(applyExpr) {\n  return createError(\n      'applySyntactic is not required here (in a syntactic context)',\n      applyExpr.source,\n  );\n}\n\n// Incorrect argument type\n\nexport function incorrectArgumentType(expectedType, expr) {\n  return createError('Incorrect argument type: expected ' + expectedType, expr.source);\n}\n\n// Multiple instances of the super-splice operator (`...`) in the rule body.\n\nexport function multipleSuperSplices(expr) {\n  return createError(\"'...' can appear at most once in a rule body\", expr.source);\n}\n\n// Unicode code point escapes\n\nexport function invalidCodePoint(applyWrapper) {\n  const node = applyWrapper._node;\n  assert(node && node.isNonterminal() && node.ctorName === 'escapeChar_unicodeCodePoint');\n\n  // Get an interval that covers all of the hex digits.\n  const digitIntervals = applyWrapper.children.slice(1, -1).map(d => d.source);\n  const fullInterval = digitIntervals[0].coverageWith(...digitIntervals.slice(1));\n  return createError(\n      `U+${fullInterval.contents} is not a valid Unicode code point`,\n      fullInterval,\n  );\n}\n\n// ----------------- Kleene operators -----------------\n\nexport function kleeneExprHasNullableOperand(kleeneExpr, applicationStack) {\n  const actuals =\n    applicationStack.length > 0 ? applicationStack[applicationStack.length - 1].args : [];\n  const expr = kleeneExpr.expr.substituteParams(actuals);\n  let message =\n    'Nullable expression ' +\n    expr +\n    \" is not allowed inside '\" +\n    kleeneExpr.operator +\n    \"' (possible infinite loop)\";\n  if (applicationStack.length > 0) {\n    const stackTrace = applicationStack\n        .map(app => new pexprs.Apply(app.ruleName, app.args))\n        .join('\\n');\n    message += '\\nApplication stack (most recent application last):\\n' + stackTrace;\n  }\n  return createError(message, kleeneExpr.expr.source);\n}\n\n// ----------------- arity -----------------\n\nexport function inconsistentArity(ruleName, expected, actual, expr) {\n  return createError(\n      'Rule ' +\n      ruleName +\n      ' involves an alternation which has inconsistent arity ' +\n      '(expected ' +\n      expected +\n      ', got ' +\n      actual +\n      ')',\n      expr.source,\n  );\n}\n\n// ----------------- properties -----------------\n\nexport function duplicatePropertyNames(duplicates) {\n  return createError('Object pattern has duplicate property names: ' + duplicates.join(', '));\n}\n\n// ----------------- constructors -----------------\n\nexport function invalidConstructorCall(grammar, ctorName, children) {\n  return createError(\n      'Attempt to invoke constructor ' + ctorName + ' with invalid or unexpected arguments',\n  );\n}\n\n// ----------------- convenience -----------------\n\nexport function multipleErrors(errors) {\n  const messages = errors.map(e => e.message);\n  return createError(['Errors:'].concat(messages).join('\\n- '), errors[0].interval);\n}\n\n// ----------------- semantic -----------------\n\nexport function missingSemanticAction(ctorName, name, type, stack) {\n  let stackTrace = stack\n      .slice(0, -1)\n      .map(info => {\n        const ans = '  ' + info[0].name + ' > ' + info[1];\n        return info.length === 3 ? ans + \" for '\" + info[2] + \"'\" : ans;\n      })\n      .join('\\n');\n  stackTrace += '\\n  ' + name + ' > ' + ctorName;\n\n  let moreInfo = '';\n  if (ctorName === '_iter') {\n    moreInfo = [\n      '\\nNOTE: as of Ohm v16, there is no default action for iteration nodes — see ',\n      '  https://ohmjs.org/d/dsa for details.',\n    ].join('\\n');\n  }\n\n  const message = [\n    `Missing semantic action for '${ctorName}' in ${type} '${name}'.${moreInfo}`,\n    'Action stack (most recent call last):',\n    stackTrace,\n  ].join('\\n');\n\n  const e = createError(message);\n  e.name = 'missingSemanticAction';\n  return e;\n}\n\nexport function throwErrors(errors) {\n  if (errors.length === 1) {\n    throw errors[0];\n  }\n  if (errors.length > 1) {\n    throw multipleErrors(errors);\n  }\n}\n","import * as common from './common.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\n// Given an array of numbers `arr`, return an array of the numbers as strings,\n// right-justified and padded to the same length.\nfunction padNumbersToEqualLength(arr) {\n  let maxLen = 0;\n  const strings = arr.map(n => {\n    const str = n.toString();\n    maxLen = Math.max(maxLen, str.length);\n    return str;\n  });\n  return strings.map(s => common.padLeft(s, maxLen));\n}\n\n// Produce a new string that would be the result of copying the contents\n// of the string `src` onto `dest` at offset `offest`.\nfunction strcpy(dest, src, offset) {\n  const origDestLen = dest.length;\n  const start = dest.slice(0, offset);\n  const end = dest.slice(offset + src.length);\n  return (start + src + end).substr(0, origDestLen);\n}\n\n// Casts the underlying lineAndCol object to a formatted message string,\n// highlighting `ranges`.\nfunction lineAndColumnToMessage(...ranges) {\n  const lineAndCol = this;\n  const {offset} = lineAndCol;\n  const {repeatStr} = common;\n\n  const sb = new common.StringBuffer();\n  sb.append('Line ' + lineAndCol.lineNum + ', col ' + lineAndCol.colNum + ':\\n');\n\n  // An array of the previous, current, and next line numbers as strings of equal length.\n  const lineNumbers = padNumbersToEqualLength([\n    lineAndCol.prevLine == null ? 0 : lineAndCol.lineNum - 1,\n    lineAndCol.lineNum,\n    lineAndCol.nextLine == null ? 0 : lineAndCol.lineNum + 1,\n  ]);\n\n  // Helper for appending formatting input lines to the buffer.\n  const appendLine = (num, content, prefix) => {\n    sb.append(prefix + lineNumbers[num] + ' | ' + content + '\\n');\n  };\n\n  // Include the previous line for context if possible.\n  if (lineAndCol.prevLine != null) {\n    appendLine(0, lineAndCol.prevLine, '  ');\n  }\n  // Line that the error occurred on.\n  appendLine(1, lineAndCol.line, '> ');\n\n  // Build up the line that points to the offset and possible indicates one or more ranges.\n  // Start with a blank line, and indicate each range by overlaying a string of `~` chars.\n  const lineLen = lineAndCol.line.length;\n  let indicationLine = repeatStr(' ', lineLen + 1);\n  for (let i = 0; i < ranges.length; ++i) {\n    let startIdx = ranges[i][0];\n    let endIdx = ranges[i][1];\n    common.assert(startIdx >= 0 && startIdx <= endIdx, 'range start must be >= 0 and <= end');\n\n    const lineStartOffset = offset - lineAndCol.colNum + 1;\n    startIdx = Math.max(0, startIdx - lineStartOffset);\n    endIdx = Math.min(endIdx - lineStartOffset, lineLen);\n\n    indicationLine = strcpy(indicationLine, repeatStr('~', endIdx - startIdx), startIdx);\n  }\n  const gutterWidth = 2 + lineNumbers[1].length + 3;\n  sb.append(repeatStr(' ', gutterWidth));\n  indicationLine = strcpy(indicationLine, '^', lineAndCol.colNum - 1);\n  sb.append(indicationLine.replace(/ +$/, '') + '\\n');\n\n  // Include the next line for context if possible.\n  if (lineAndCol.nextLine != null) {\n    appendLine(2, lineAndCol.nextLine, '  ');\n  }\n  return sb.contents();\n}\n\n// --------------------------------------------------------------------\n// Exports\n// --------------------------------------------------------------------\n\nlet builtInRulesCallbacks = [];\n\n// Since Grammar.BuiltInRules is bootstrapped, most of Ohm can't directly depend it.\n// This function allows modules that do depend on the built-in rules to register a callback\n// that will be called later in the initialization process.\nexport function awaitBuiltInRules(cb) {\n  builtInRulesCallbacks.push(cb);\n}\n\nexport function announceBuiltInRules(grammar) {\n  builtInRulesCallbacks.forEach(cb => {\n    cb(grammar);\n  });\n  builtInRulesCallbacks = null;\n}\n\n// Return an object with the line and column information for the given\n// offset in `str`.\nexport function getLineAndColumn(str, offset) {\n  let lineNum = 1;\n  let colNum = 1;\n\n  let currOffset = 0;\n  let lineStartOffset = 0;\n\n  let nextLine = null;\n  let prevLine = null;\n  let prevLineStartOffset = -1;\n\n  while (currOffset < offset) {\n    const c = str.charAt(currOffset++);\n    if (c === '\\n') {\n      lineNum++;\n      colNum = 1;\n      prevLineStartOffset = lineStartOffset;\n      lineStartOffset = currOffset;\n    } else if (c !== '\\r') {\n      colNum++;\n    }\n  }\n\n  // Find the end of the target line.\n  let lineEndOffset = str.indexOf('\\n', lineStartOffset);\n  if (lineEndOffset === -1) {\n    lineEndOffset = str.length;\n  } else {\n    // Get the next line.\n    const nextLineEndOffset = str.indexOf('\\n', lineEndOffset + 1);\n    nextLine =\n      nextLineEndOffset === -1 ?\n        str.slice(lineEndOffset) :\n        str.slice(lineEndOffset, nextLineEndOffset);\n    // Strip leading and trailing EOL char(s).\n    nextLine = nextLine.replace(/^\\r?\\n/, '').replace(/\\r$/, '');\n  }\n\n  // Get the previous line.\n  if (prevLineStartOffset >= 0) {\n    // Strip trailing EOL char(s).\n    prevLine = str.slice(prevLineStartOffset, lineStartOffset).replace(/\\r?\\n$/, '');\n  }\n\n  // Get the target line, stripping a trailing carriage return if necessary.\n  const line = str.slice(lineStartOffset, lineEndOffset).replace(/\\r$/, '');\n\n  return {\n    offset,\n    lineNum,\n    colNum,\n    line,\n    prevLine,\n    nextLine,\n    toString: lineAndColumnToMessage,\n  };\n}\n\n// Return a nicely-formatted string describing the line and column for the\n// given offset in `str` highlighting `ranges`.\nexport function getLineAndColumnMessage(str, offset, ...ranges) {\n  return getLineAndColumn(str, offset).toString(...ranges);\n}\n\nexport const uniqueId = (() => {\n  let idCounter = 0;\n  return prefix => '' + prefix + idCounter++;\n})();\n","import {assert} from './common.js';\nimport * as errors from './errors.js';\nimport * as util from './util.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nexport class Interval {\n  constructor(sourceString, startIdx, endIdx) {\n    this.sourceString = sourceString;\n    this.startIdx = startIdx;\n    this.endIdx = endIdx;\n  }\n\n  get contents() {\n    if (this._contents === undefined) {\n      this._contents = this.sourceString.slice(this.startIdx, this.endIdx);\n    }\n    return this._contents;\n  }\n\n  get length() {\n    return this.endIdx - this.startIdx;\n  }\n\n  coverageWith(...intervals) {\n    return Interval.coverage(...intervals, this);\n  }\n\n  collapsedLeft() {\n    return new Interval(this.sourceString, this.startIdx, this.startIdx);\n  }\n\n  collapsedRight() {\n    return new Interval(this.sourceString, this.endIdx, this.endIdx);\n  }\n\n  getLineAndColumn() {\n    return util.getLineAndColumn(this.sourceString, this.startIdx);\n  }\n\n  getLineAndColumnMessage() {\n    const range = [this.startIdx, this.endIdx];\n    return util.getLineAndColumnMessage(this.sourceString, this.startIdx, range);\n  }\n\n  // Returns an array of 0, 1, or 2 intervals that represents the result of the\n  // interval difference operation.\n  minus(that) {\n    if (this.sourceString !== that.sourceString) {\n      throw errors.intervalSourcesDontMatch();\n    } else if (this.startIdx === that.startIdx && this.endIdx === that.endIdx) {\n      // `this` and `that` are the same interval!\n      return [];\n    } else if (this.startIdx < that.startIdx && that.endIdx < this.endIdx) {\n      // `that` splits `this` into two intervals\n      return [\n        new Interval(this.sourceString, this.startIdx, that.startIdx),\n        new Interval(this.sourceString, that.endIdx, this.endIdx),\n      ];\n    } else if (this.startIdx < that.endIdx && that.endIdx < this.endIdx) {\n      // `that` contains a prefix of `this`\n      return [new Interval(this.sourceString, that.endIdx, this.endIdx)];\n    } else if (this.startIdx < that.startIdx && that.startIdx < this.endIdx) {\n      // `that` contains a suffix of `this`\n      return [new Interval(this.sourceString, this.startIdx, that.startIdx)];\n    } else {\n      // `that` and `this` do not overlap\n      return [this];\n    }\n  }\n\n  // Returns a new Interval that has the same extent as this one, but which is relative\n  // to `that`, an Interval that fully covers this one.\n  relativeTo(that) {\n    if (this.sourceString !== that.sourceString) {\n      throw errors.intervalSourcesDontMatch();\n    }\n    assert(\n        this.startIdx >= that.startIdx && this.endIdx <= that.endIdx,\n        'other interval does not cover this one',\n    );\n    return new Interval(\n        this.sourceString,\n        this.startIdx - that.startIdx,\n        this.endIdx - that.startIdx,\n    );\n  }\n\n  // Returns a new Interval which contains the same contents as this one,\n  // but with whitespace trimmed from both ends.\n  trimmed() {\n    const {contents} = this;\n    const startIdx = this.startIdx + contents.match(/^\\s*/)[0].length;\n    const endIdx = this.endIdx - contents.match(/\\s*$/)[0].length;\n    return new Interval(this.sourceString, startIdx, endIdx);\n  }\n\n  subInterval(offset, len) {\n    const newStartIdx = this.startIdx + offset;\n    return new Interval(this.sourceString, newStartIdx, newStartIdx + len);\n  }\n}\n\nInterval.coverage = function(firstInterval, ...intervals) {\n  let {startIdx, endIdx} = firstInterval;\n  for (const interval of intervals) {\n    if (interval.sourceString !== firstInterval.sourceString) {\n      throw errors.intervalSourcesDontMatch();\n    } else {\n      startIdx = Math.min(startIdx, interval.startIdx);\n      endIdx = Math.max(endIdx, interval.endIdx);\n    }\n  }\n  return new Interval(firstInterval.sourceString, startIdx, endIdx);\n};\n","import {Interval} from './Interval.js';\n\nconst MAX_CHAR_CODE = 0xffff;\n\nexport class InputStream {\n  constructor(source) {\n    this.source = source;\n    this.pos = 0;\n    this.examinedLength = 0;\n  }\n\n  atEnd() {\n    const ans = this.pos >= this.source.length;\n    this.examinedLength = Math.max(this.examinedLength, this.pos + 1);\n    return ans;\n  }\n\n  next() {\n    const ans = this.source[this.pos++];\n    this.examinedLength = Math.max(this.examinedLength, this.pos);\n    return ans;\n  }\n\n  nextCharCode() {\n    const nextChar = this.next();\n    return nextChar && nextChar.charCodeAt(0);\n  }\n\n  nextCodePoint() {\n    const cp = this.source.slice(this.pos++).codePointAt(0);\n    // If the code point is beyond plane 0, it takes up two characters.\n    if (cp > MAX_CHAR_CODE) {\n      this.pos += 1;\n    }\n    this.examinedLength = Math.max(this.examinedLength, this.pos);\n    return cp;\n  }\n\n  matchString(s, optIgnoreCase) {\n    let idx;\n    if (optIgnoreCase) {\n      /*\n        Case-insensitive comparison is a tricky business. Some notable gotchas include the\n        \"Turkish I\" problem (http://www.i18nguy.com/unicode/turkish-i18n.html) and the fact\n        that the German Esszet (ß) turns into \"SS\" in upper case.\n\n        This is intended to be a locale-invariant comparison, which means it may not obey\n        locale-specific expectations (e.g. \"i\" => \"İ\").\n       */\n      for (idx = 0; idx < s.length; idx++) {\n        const actual = this.next();\n        const expected = s[idx];\n        if (actual == null || actual.toUpperCase() !== expected.toUpperCase()) {\n          return false;\n        }\n      }\n      return true;\n    }\n    // Default is case-sensitive comparison.\n    for (idx = 0; idx < s.length; idx++) {\n      if (this.next() !== s[idx]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  sourceSlice(startIdx, endIdx) {\n    return this.source.slice(startIdx, endIdx);\n  }\n\n  interval(startIdx, optEndIdx) {\n    return new Interval(this.source, startIdx, optEndIdx ? optEndIdx : this.pos);\n  }\n}\n","import * as common from './common.js';\nimport * as util from './util.js';\nimport {Interval} from './Interval.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nexport class MatchResult {\n  constructor(\n      matcher,\n      input,\n      startExpr,\n      cst,\n      cstOffset,\n      rightmostFailurePosition,\n      optRecordedFailures,\n  ) {\n    this.matcher = matcher;\n    this.input = input;\n    this.startExpr = startExpr;\n    this._cst = cst;\n    this._cstOffset = cstOffset;\n    this._rightmostFailurePosition = rightmostFailurePosition;\n    this._rightmostFailures = optRecordedFailures;\n\n    if (this.failed()) {\n      /* eslint-disable no-invalid-this */\n      common.defineLazyProperty(this, 'message', function() {\n        const detail = 'Expected ' + this.getExpectedText();\n        return (\n          util.getLineAndColumnMessage(this.input, this.getRightmostFailurePosition()) + detail\n        );\n      });\n      common.defineLazyProperty(this, 'shortMessage', function() {\n        const detail = 'expected ' + this.getExpectedText();\n        const errorInfo = util.getLineAndColumn(\n            this.input,\n            this.getRightmostFailurePosition(),\n        );\n        return 'Line ' + errorInfo.lineNum + ', col ' + errorInfo.colNum + ': ' + detail;\n      });\n      /* eslint-enable no-invalid-this */\n    }\n  }\n\n  succeeded() {\n    return !!this._cst;\n  }\n\n  failed() {\n    return !this.succeeded();\n  }\n\n  getRightmostFailurePosition() {\n    return this._rightmostFailurePosition;\n  }\n\n  getRightmostFailures() {\n    if (!this._rightmostFailures) {\n      this.matcher.setInput(this.input);\n      const matchResultWithFailures = this.matcher._match(this.startExpr, {\n        tracing: false,\n        positionToRecordFailures: this.getRightmostFailurePosition(),\n      });\n      this._rightmostFailures = matchResultWithFailures.getRightmostFailures();\n    }\n    return this._rightmostFailures;\n  }\n\n  toString() {\n    return this.succeeded() ?\n      '[match succeeded]' :\n      '[match failed at position ' + this.getRightmostFailurePosition() + ']';\n  }\n\n  // Return a string summarizing the expected contents of the input stream when\n  // the match failure occurred.\n  getExpectedText() {\n    if (this.succeeded()) {\n      throw new Error('cannot get expected text of a successful MatchResult');\n    }\n\n    const sb = new common.StringBuffer();\n    let failures = this.getRightmostFailures();\n\n    // Filter out the fluffy failures to make the default error messages more useful\n    failures = failures.filter(failure => !failure.isFluffy());\n\n    for (let idx = 0; idx < failures.length; idx++) {\n      if (idx > 0) {\n        if (idx === failures.length - 1) {\n          sb.append(failures.length > 2 ? ', or ' : ' or ');\n        } else {\n          sb.append(', ');\n        }\n      }\n      sb.append(failures[idx].toString());\n    }\n    return sb.contents();\n  }\n\n  getInterval() {\n    const pos = this.getRightmostFailurePosition();\n    return new Interval(this.input, pos, pos);\n  }\n}\n","export class PosInfo {\n  constructor() {\n    this.applicationMemoKeyStack = []; // active applications at this position\n    this.memo = {};\n    this.maxExaminedLength = 0;\n    this.maxRightmostFailureOffset = -1;\n    this.currentLeftRecursion = undefined;\n  }\n\n  isActive(application) {\n    return this.applicationMemoKeyStack.indexOf(application.toMemoKey()) >= 0;\n  }\n\n  enter(application) {\n    this.applicationMemoKeyStack.push(application.toMemoKey());\n  }\n\n  exit() {\n    this.applicationMemoKeyStack.pop();\n  }\n\n  startLeftRecursion(headApplication, memoRec) {\n    memoRec.isLeftRecursion = true;\n    memoRec.headApplication = headApplication;\n    memoRec.nextLeftRecursion = this.currentLeftRecursion;\n    this.currentLeftRecursion = memoRec;\n\n    const {applicationMemoKeyStack} = this;\n    const indexOfFirstInvolvedRule =\n      applicationMemoKeyStack.indexOf(headApplication.toMemoKey()) + 1;\n    const involvedApplicationMemoKeys = applicationMemoKeyStack.slice(\n        indexOfFirstInvolvedRule,\n    );\n\n    memoRec.isInvolved = function(applicationMemoKey) {\n      return involvedApplicationMemoKeys.indexOf(applicationMemoKey) >= 0;\n    };\n\n    memoRec.updateInvolvedApplicationMemoKeys = function() {\n      for (let idx = indexOfFirstInvolvedRule; idx < applicationMemoKeyStack.length; idx++) {\n        const applicationMemoKey = applicationMemoKeyStack[idx];\n        if (!this.isInvolved(applicationMemoKey)) {\n          involvedApplicationMemoKeys.push(applicationMemoKey);\n        }\n      }\n    };\n  }\n\n  endLeftRecursion() {\n    this.currentLeftRecursion = this.currentLeftRecursion.nextLeftRecursion;\n  }\n\n  // Note: this method doesn't get called for the \"head\" of a left recursion -- for LR heads,\n  // the memoized result (which starts out being a failure) is always used.\n  shouldUseMemoizedResult(memoRec) {\n    if (!memoRec.isLeftRecursion) {\n      return true;\n    }\n    const {applicationMemoKeyStack} = this;\n    for (let idx = 0; idx < applicationMemoKeyStack.length; idx++) {\n      const applicationMemoKey = applicationMemoKeyStack[idx];\n      if (memoRec.isInvolved(applicationMemoKey)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  memoize(memoKey, memoRec) {\n    this.memo[memoKey] = memoRec;\n    this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);\n    this.maxRightmostFailureOffset = Math.max(\n        this.maxRightmostFailureOffset,\n        memoRec.rightmostFailureOffset,\n    );\n    return memoRec;\n  }\n\n  clearObsoleteEntries(pos, invalidatedIdx) {\n    if (pos + this.maxExaminedLength <= invalidatedIdx) {\n      // Optimization: none of the rule applications that were memoized here examined the\n      // interval of the input that changed, so nothing has to be invalidated.\n      return;\n    }\n\n    const {memo} = this;\n    this.maxExaminedLength = 0;\n    this.maxRightmostFailureOffset = -1;\n    Object.keys(memo).forEach(k => {\n      const memoRec = memo[k];\n      if (pos + memoRec.examinedLength > invalidatedIdx) {\n        delete memo[k];\n      } else {\n        this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);\n        this.maxRightmostFailureOffset = Math.max(\n            this.maxRightmostFailureOffset,\n            memoRec.rightmostFailureOffset,\n        );\n      }\n    });\n  }\n}\n","import {Interval} from './Interval.js';\nimport * as common from './common.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\n// Unicode characters that are used in the `toString` output.\nconst BALLOT_X = '\\u2717';\nconst CHECK_MARK = '\\u2713';\nconst DOT_OPERATOR = '\\u22C5';\nconst RIGHTWARDS_DOUBLE_ARROW = '\\u21D2';\nconst SYMBOL_FOR_HORIZONTAL_TABULATION = '\\u2409';\nconst SYMBOL_FOR_LINE_FEED = '\\u240A';\nconst SYMBOL_FOR_CARRIAGE_RETURN = '\\u240D';\n\nconst Flags = {\n  succeeded: 1 << 0,\n  isRootNode: 1 << 1,\n  isImplicitSpaces: 1 << 2,\n  isMemoized: 1 << 3,\n  isHeadOfLeftRecursion: 1 << 4,\n  terminatesLR: 1 << 5,\n};\n\nfunction spaces(n) {\n  return common.repeat(' ', n).join('');\n}\n\n// Return a string representation of a portion of `input` at offset `pos`.\n// The result will contain exactly `len` characters.\nfunction getInputExcerpt(input, pos, len) {\n  const excerpt = asEscapedString(input.slice(pos, pos + len));\n\n  // Pad the output if necessary.\n  if (excerpt.length < len) {\n    return excerpt + common.repeat(' ', len - excerpt.length).join('');\n  }\n  return excerpt;\n}\n\nfunction asEscapedString(obj) {\n  if (typeof obj === 'string') {\n    // Replace non-printable characters with visible symbols.\n    return obj\n        .replace(/ /g, DOT_OPERATOR)\n        .replace(/\\t/g, SYMBOL_FOR_HORIZONTAL_TABULATION)\n        .replace(/\\n/g, SYMBOL_FOR_LINE_FEED)\n        .replace(/\\r/g, SYMBOL_FOR_CARRIAGE_RETURN);\n  }\n  return String(obj);\n}\n\n// ----------------- Trace -----------------\n\nexport class Trace {\n  constructor(input, pos1, pos2, expr, succeeded, bindings, optChildren) {\n    this.input = input;\n    this.pos = this.pos1 = pos1;\n    this.pos2 = pos2;\n    this.source = new Interval(input, pos1, pos2);\n    this.expr = expr;\n    this.bindings = bindings;\n    this.children = optChildren || [];\n    this.terminatingLREntry = null;\n\n    this._flags = succeeded ? Flags.succeeded : 0;\n  }\n\n  get displayString() {\n    return this.expr.toDisplayString();\n  }\n\n  clone() {\n    return this.cloneWithExpr(this.expr);\n  }\n\n  cloneWithExpr(expr) {\n    const ans = new Trace(\n        this.input,\n        this.pos,\n        this.pos2,\n        expr,\n        this.succeeded,\n        this.bindings,\n        this.children,\n    );\n\n    ans.isHeadOfLeftRecursion = this.isHeadOfLeftRecursion;\n    ans.isImplicitSpaces = this.isImplicitSpaces;\n    ans.isMemoized = this.isMemoized;\n    ans.isRootNode = this.isRootNode;\n    ans.terminatesLR = this.terminatesLR;\n    ans.terminatingLREntry = this.terminatingLREntry;\n    return ans;\n  }\n\n  // Record the trace information for the terminating condition of the LR loop.\n  recordLRTermination(ruleBodyTrace, value) {\n    this.terminatingLREntry = new Trace(\n        this.input,\n        this.pos,\n        this.pos2,\n        this.expr,\n        false,\n        [value],\n        [ruleBodyTrace],\n    );\n    this.terminatingLREntry.terminatesLR = true;\n  }\n\n  // Recursively traverse this trace node and all its descendents, calling a visitor function\n  // for each node that is visited. If `vistorObjOrFn` is an object, then its 'enter' property\n  // is a function to call before visiting the children of a node, and its 'exit' property is\n  // a function to call afterwards. If `visitorObjOrFn` is a function, it represents the 'enter'\n  // function.\n  //\n  // The functions are called with three arguments: the Trace node, its parent Trace, and a number\n  // representing the depth of the node in the tree. (The root node has depth 0.) `optThisArg`, if\n  // specified, is the value to use for `this` when executing the visitor functions.\n  walk(visitorObjOrFn, optThisArg) {\n    let visitor = visitorObjOrFn;\n    if (typeof visitor === 'function') {\n      visitor = {enter: visitor};\n    }\n\n    function _walk(node, parent, depth) {\n      let recurse = true;\n      if (visitor.enter) {\n        if (visitor.enter.call(optThisArg, node, parent, depth) === Trace.prototype.SKIP) {\n          recurse = false;\n        }\n      }\n      if (recurse) {\n        node.children.forEach(child => {\n          _walk(child, node, depth + 1);\n        });\n        if (visitor.exit) {\n          visitor.exit.call(optThisArg, node, parent, depth);\n        }\n      }\n    }\n    if (this.isRootNode) {\n      // Don't visit the root node itself, only its children.\n      this.children.forEach(c => {\n        _walk(c, null, 0);\n      });\n    } else {\n      _walk(this, null, 0);\n    }\n  }\n\n  // Return a string representation of the trace.\n  // Sample:\n  //     12⋅+⋅2⋅*⋅3 ✓ exp ⇒  \"12\"\n  //     12⋅+⋅2⋅*⋅3   ✓ addExp (LR) ⇒  \"12\"\n  //     12⋅+⋅2⋅*⋅3       ✗ addExp_plus\n  toString() {\n    const sb = new common.StringBuffer();\n    this.walk((node, parent, depth) => {\n      if (!node) {\n        return this.SKIP;\n      }\n      const ctorName = node.expr.constructor.name;\n      // Don't print anything for Alt nodes.\n      if (ctorName === 'Alt') {\n        return; // eslint-disable-line consistent-return\n      }\n      sb.append(getInputExcerpt(node.input, node.pos, 10) + spaces(depth * 2 + 1));\n      sb.append((node.succeeded ? CHECK_MARK : BALLOT_X) + ' ' + node.displayString);\n      if (node.isHeadOfLeftRecursion) {\n        sb.append(' (LR)');\n      }\n      if (node.succeeded) {\n        const contents = asEscapedString(node.source.contents);\n        sb.append(' ' + RIGHTWARDS_DOUBLE_ARROW + '  ');\n        sb.append(typeof contents === 'string' ? '\"' + contents + '\"' : contents);\n      }\n      sb.append('\\n');\n    });\n    return sb.contents();\n  }\n}\n\n// A value that can be returned from visitor functions to indicate that a\n// node should not be recursed into.\nTrace.prototype.SKIP = {};\n\n// For convenience, create a getter and setter for the boolean flags in `Flags`.\nObject.keys(Flags).forEach(name => {\n  const mask = Flags[name];\n  Object.defineProperty(Trace.prototype, name, {\n    get() {\n      return (this._flags & mask) !== 0;\n    },\n    set(val) {\n      if (val) {\n        this._flags |= mask;\n      } else {\n        this._flags &= ~mask;\n      }\n    },\n  });\n});\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n/*\n  Return true if we should skip spaces preceding this expression in a syntactic context.\n*/\npexprs.PExpr.prototype.allowsSkippingPrecedingSpace = abstract('allowsSkippingPrecedingSpace');\n\n/*\n  Generally, these are all first-order expressions and (with the exception of Apply)\n  directly read from the input stream.\n*/\npexprs.any.allowsSkippingPrecedingSpace =\n  pexprs.end.allowsSkippingPrecedingSpace =\n  pexprs.Apply.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Terminal.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Range.prototype.allowsSkippingPrecedingSpace =\n  pexprs.UnicodeChar.prototype.allowsSkippingPrecedingSpace =\n    function() {\n      return true;\n    };\n\n/*\n  Higher-order expressions that don't directly consume input.\n*/\npexprs.Alt.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Iter.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Lex.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Lookahead.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Not.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Param.prototype.allowsSkippingPrecedingSpace =\n  pexprs.Seq.prototype.allowsSkippingPrecedingSpace =\n    function() {\n      return false;\n    };\n","import {abstract, isSyntactic} from './common.js';\nimport * as errors from './errors.js';\nimport * as pexprs from './pexprs-main.js';\nimport * as util from './util.js';\n\nlet BuiltInRules;\n\nutil.awaitBuiltInRules(g => {\n  BuiltInRules = g;\n});\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\nlet lexifyCount;\n\npexprs.PExpr.prototype.assertAllApplicationsAreValid = function(ruleName, grammar) {\n  lexifyCount = 0;\n  this._assertAllApplicationsAreValid(ruleName, grammar);\n};\n\npexprs.PExpr.prototype._assertAllApplicationsAreValid = abstract(\n    '_assertAllApplicationsAreValid',\n);\n\npexprs.any._assertAllApplicationsAreValid =\n  pexprs.end._assertAllApplicationsAreValid =\n  pexprs.Terminal.prototype._assertAllApplicationsAreValid =\n  pexprs.Range.prototype._assertAllApplicationsAreValid =\n  pexprs.Param.prototype._assertAllApplicationsAreValid =\n  pexprs.UnicodeChar.prototype._assertAllApplicationsAreValid =\n    function(ruleName, grammar) {\n      // no-op\n    };\n\npexprs.Lex.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {\n  lexifyCount++;\n  this.expr._assertAllApplicationsAreValid(ruleName, grammar);\n  lexifyCount--;\n};\n\npexprs.Alt.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {\n  for (let idx = 0; idx < this.terms.length; idx++) {\n    this.terms[idx]._assertAllApplicationsAreValid(ruleName, grammar);\n  }\n};\n\npexprs.Seq.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {\n  for (let idx = 0; idx < this.factors.length; idx++) {\n    this.factors[idx]._assertAllApplicationsAreValid(ruleName, grammar);\n  }\n};\n\npexprs.Iter.prototype._assertAllApplicationsAreValid =\n  pexprs.Not.prototype._assertAllApplicationsAreValid =\n  pexprs.Lookahead.prototype._assertAllApplicationsAreValid =\n    function(ruleName, grammar) {\n      this.expr._assertAllApplicationsAreValid(ruleName, grammar);\n    };\n\npexprs.Apply.prototype._assertAllApplicationsAreValid = function(\n    ruleName,\n    grammar,\n    skipSyntacticCheck = false,\n) {\n  const ruleInfo = grammar.rules[this.ruleName];\n  const isContextSyntactic = isSyntactic(ruleName) && lexifyCount === 0;\n\n  // Make sure that the rule exists...\n  if (!ruleInfo) {\n    throw errors.undeclaredRule(this.ruleName, grammar.name, this.source);\n  }\n\n  // ...and that this application is allowed\n  if (!skipSyntacticCheck && isSyntactic(this.ruleName) && !isContextSyntactic) {\n    throw errors.applicationOfSyntacticRuleFromLexicalContext(this.ruleName, this);\n  }\n\n  // ...and that this application has the correct number of arguments.\n  const actual = this.args.length;\n  const expected = ruleInfo.formals.length;\n  if (actual !== expected) {\n    throw errors.wrongNumberOfArguments(this.ruleName, expected, actual, this.source);\n  }\n\n  const isBuiltInApplySyntactic =\n    BuiltInRules && ruleInfo === BuiltInRules.rules.applySyntactic;\n  const isBuiltInCaseInsensitive =\n    BuiltInRules && ruleInfo === BuiltInRules.rules.caseInsensitive;\n\n  // If it's an application of 'caseInsensitive', ensure that the argument is a Terminal.\n  if (isBuiltInCaseInsensitive) {\n    if (!(this.args[0] instanceof pexprs.Terminal)) {\n      throw errors.incorrectArgumentType('a Terminal (e.g. \"abc\")', this.args[0]);\n    }\n  }\n\n  if (isBuiltInApplySyntactic) {\n    const arg = this.args[0];\n    if (!(arg instanceof pexprs.Apply)) {\n      throw errors.incorrectArgumentType('a syntactic rule application', arg);\n    }\n    if (!isSyntactic(arg.ruleName)) {\n      throw errors.applySyntacticWithLexicalRuleApplication(arg);\n    }\n    if (isContextSyntactic) {\n      throw errors.unnecessaryExperimentalApplySyntactic(this);\n    }\n  }\n\n  // ...and that all of the argument expressions only have valid applications and have arity 1.\n  // If `this` is an application of the built-in applySyntactic rule, then its arg is\n  // allowed (and expected) to be a syntactic rule, even if we're in a lexical context.\n  this.args.forEach(arg => {\n    arg._assertAllApplicationsAreValid(ruleName, grammar, isBuiltInApplySyntactic);\n    if (arg.getArity() !== 1) {\n      throw errors.invalidParameter(this.ruleName, arg);\n    }\n  });\n};\n","import {abstract} from './common.js';\nimport * as errors from './errors.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\npexprs.PExpr.prototype.assertChoicesHaveUniformArity = abstract(\n    'assertChoicesHaveUniformArity',\n);\n\npexprs.any.assertChoicesHaveUniformArity =\n  pexprs.end.assertChoicesHaveUniformArity =\n  pexprs.Terminal.prototype.assertChoicesHaveUniformArity =\n  pexprs.Range.prototype.assertChoicesHaveUniformArity =\n  pexprs.Param.prototype.assertChoicesHaveUniformArity =\n  pexprs.Lex.prototype.assertChoicesHaveUniformArity =\n  pexprs.UnicodeChar.prototype.assertChoicesHaveUniformArity =\n    function(ruleName) {\n      // no-op\n    };\n\npexprs.Alt.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  if (this.terms.length === 0) {\n    return;\n  }\n  const arity = this.terms[0].getArity();\n  for (let idx = 0; idx < this.terms.length; idx++) {\n    const term = this.terms[idx];\n    term.assertChoicesHaveUniformArity();\n    const otherArity = term.getArity();\n    if (arity !== otherArity) {\n      throw errors.inconsistentArity(ruleName, arity, otherArity, term);\n    }\n  }\n};\n\npexprs.Extend.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  // Extend is a special case of Alt that's guaranteed to have exactly two\n  // cases: [extensions, origBody].\n  const actualArity = this.terms[0].getArity();\n  const expectedArity = this.terms[1].getArity();\n  if (actualArity !== expectedArity) {\n    throw errors.inconsistentArity(ruleName, expectedArity, actualArity, this.terms[0]);\n  }\n};\n\npexprs.Seq.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  for (let idx = 0; idx < this.factors.length; idx++) {\n    this.factors[idx].assertChoicesHaveUniformArity(ruleName);\n  }\n};\n\npexprs.Iter.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  this.expr.assertChoicesHaveUniformArity(ruleName);\n};\n\npexprs.Not.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  // no-op (not required b/c the nested expr doesn't show up in the CST)\n};\n\npexprs.Lookahead.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  this.expr.assertChoicesHaveUniformArity(ruleName);\n};\n\npexprs.Apply.prototype.assertChoicesHaveUniformArity = function(ruleName) {\n  // The arities of the parameter expressions is required to be 1 by\n  // `assertAllApplicationsAreValid()`.\n};\n","import {abstract} from './common.js';\nimport * as errors from './errors.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\npexprs.PExpr.prototype.assertIteratedExprsAreNotNullable = abstract(\n    'assertIteratedExprsAreNotNullable',\n);\n\npexprs.any.assertIteratedExprsAreNotNullable =\n  pexprs.end.assertIteratedExprsAreNotNullable =\n  pexprs.Terminal.prototype.assertIteratedExprsAreNotNullable =\n  pexprs.Range.prototype.assertIteratedExprsAreNotNullable =\n  pexprs.Param.prototype.assertIteratedExprsAreNotNullable =\n  pexprs.UnicodeChar.prototype.assertIteratedExprsAreNotNullable =\n    function(grammar) {\n      // no-op\n    };\n\npexprs.Alt.prototype.assertIteratedExprsAreNotNullable = function(grammar) {\n  for (let idx = 0; idx < this.terms.length; idx++) {\n    this.terms[idx].assertIteratedExprsAreNotNullable(grammar);\n  }\n};\n\npexprs.Seq.prototype.assertIteratedExprsAreNotNullable = function(grammar) {\n  for (let idx = 0; idx < this.factors.length; idx++) {\n    this.factors[idx].assertIteratedExprsAreNotNullable(grammar);\n  }\n};\n\npexprs.Iter.prototype.assertIteratedExprsAreNotNullable = function(grammar) {\n  // Note: this is the implementation of this method for `Star` and `Plus` expressions.\n  // It is overridden for `Opt` below.\n  this.expr.assertIteratedExprsAreNotNullable(grammar);\n  if (this.expr.isNullable(grammar)) {\n    throw errors.kleeneExprHasNullableOperand(this, []);\n  }\n};\n\npexprs.Opt.prototype.assertIteratedExprsAreNotNullable =\n  pexprs.Not.prototype.assertIteratedExprsAreNotNullable =\n  pexprs.Lookahead.prototype.assertIteratedExprsAreNotNullable =\n  pexprs.Lex.prototype.assertIteratedExprsAreNotNullable =\n    function(grammar) {\n      this.expr.assertIteratedExprsAreNotNullable(grammar);\n    };\n\npexprs.Apply.prototype.assertIteratedExprsAreNotNullable = function(grammar) {\n  this.args.forEach(arg => {\n    arg.assertIteratedExprsAreNotNullable(grammar);\n  });\n};\n","import * as common from './common.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nexport class Node {\n  constructor(matchLength) {\n    this.matchLength = matchLength;\n  }\n\n  get ctorName() {\n    throw new Error('subclass responsibility');\n  }\n\n  numChildren() {\n    return this.children ? this.children.length : 0;\n  }\n\n  childAt(idx) {\n    if (this.children) {\n      return this.children[idx];\n    }\n  }\n\n  indexOfChild(arg) {\n    return this.children.indexOf(arg);\n  }\n\n  hasChildren() {\n    return this.numChildren() > 0;\n  }\n\n  hasNoChildren() {\n    return !this.hasChildren();\n  }\n\n  onlyChild() {\n    if (this.numChildren() !== 1) {\n      throw new Error(\n          'cannot get only child of a node of type ' +\n          this.ctorName +\n          ' (it has ' +\n          this.numChildren() +\n          ' children)',\n      );\n    } else {\n      return this.firstChild();\n    }\n  }\n\n  firstChild() {\n    if (this.hasNoChildren()) {\n      throw new Error(\n          'cannot get first child of a ' + this.ctorName + ' node, which has no children',\n      );\n    } else {\n      return this.childAt(0);\n    }\n  }\n\n  lastChild() {\n    if (this.hasNoChildren()) {\n      throw new Error(\n          'cannot get last child of a ' + this.ctorName + ' node, which has no children',\n      );\n    } else {\n      return this.childAt(this.numChildren() - 1);\n    }\n  }\n\n  childBefore(child) {\n    const childIdx = this.indexOfChild(child);\n    if (childIdx < 0) {\n      throw new Error('Node.childBefore() called w/ an argument that is not a child');\n    } else if (childIdx === 0) {\n      throw new Error('cannot get child before first child');\n    } else {\n      return this.childAt(childIdx - 1);\n    }\n  }\n\n  childAfter(child) {\n    const childIdx = this.indexOfChild(child);\n    if (childIdx < 0) {\n      throw new Error('Node.childAfter() called w/ an argument that is not a child');\n    } else if (childIdx === this.numChildren() - 1) {\n      throw new Error('cannot get child after last child');\n    } else {\n      return this.childAt(childIdx + 1);\n    }\n  }\n\n  isTerminal() {\n    return false;\n  }\n\n  isNonterminal() {\n    return false;\n  }\n\n  isIteration() {\n    return false;\n  }\n\n  isOptional() {\n    return false;\n  }\n}\n\n// Terminals\n\nexport class TerminalNode extends Node {\n  get ctorName() {\n    return '_terminal';\n  }\n\n  isTerminal() {\n    return true;\n  }\n\n  get primitiveValue() {\n    throw new Error('The `primitiveValue` property was removed in Ohm v17.');\n  }\n}\n\n// Nonterminals\n\nexport class NonterminalNode extends Node {\n  constructor(ruleName, children, childOffsets, matchLength) {\n    super(matchLength);\n    this.ruleName = ruleName;\n    this.children = children;\n    this.childOffsets = childOffsets;\n  }\n\n  get ctorName() {\n    return this.ruleName;\n  }\n\n  isNonterminal() {\n    return true;\n  }\n\n  isLexical() {\n    return common.isLexical(this.ctorName);\n  }\n\n  isSyntactic() {\n    return common.isSyntactic(this.ctorName);\n  }\n}\n\n// Iterations\n\nexport class IterationNode extends Node {\n  constructor(children, childOffsets, matchLength, isOptional) {\n    super(matchLength);\n    this.children = children;\n    this.childOffsets = childOffsets;\n    this.optional = isOptional;\n  }\n\n  get ctorName() {\n    return '_iter';\n  }\n\n  isIteration() {\n    return true;\n  }\n\n  isOptional() {\n    return this.optional;\n  }\n}\n","import {Trace} from './Trace.js';\nimport * as common from './common.js';\nimport * as errors from './errors.js';\nimport {IterationNode, NonterminalNode, TerminalNode} from './nodes.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n/*\n  Evaluate the expression and return `true` if it succeeds, `false` otherwise. This method should\n  only be called directly by `State.prototype.eval(expr)`, which also updates the data structures\n  that are used for tracing. (Making those updates in a method of `State` enables the trace-specific\n  data structures to be \"secrets\" of that class, which is good for modularity.)\n\n  The contract of this method is as follows:\n  * When the return value is `true`,\n    - the state object will have `expr.getArity()` more bindings than it did before the call.\n  * When the return value is `false`,\n    - the state object may have more bindings than it did before the call, and\n    - its input stream's position may be anywhere.\n\n  Note that `State.prototype.eval(expr)`, unlike this method, guarantees that neither the state\n  object's bindings nor its input stream's position will change if the expression fails to match.\n*/\npexprs.PExpr.prototype.eval = common.abstract('eval'); // function(state) { ... }\n\npexprs.any.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  const cp = inputStream.nextCodePoint();\n  if (cp !== undefined) {\n    state.pushBinding(new TerminalNode(String.fromCodePoint(cp).length), origPos);\n    return true;\n  } else {\n    state.processFailure(origPos, this);\n    return false;\n  }\n};\n\npexprs.end.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  if (inputStream.atEnd()) {\n    state.pushBinding(new TerminalNode(0), origPos);\n    return true;\n  } else {\n    state.processFailure(origPos, this);\n    return false;\n  }\n};\n\npexprs.Terminal.prototype.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  if (!inputStream.matchString(this.obj)) {\n    state.processFailure(origPos, this);\n    return false;\n  } else {\n    state.pushBinding(new TerminalNode(this.obj.length), origPos);\n    return true;\n  }\n};\n\npexprs.Range.prototype.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n\n  // A range can operate in one of two modes: matching a single, 16-bit _code unit_,\n  // or matching a _code point_. (Code points over 0xFFFF take up two 16-bit code units.)\n  const cp = this.matchCodePoint ? inputStream.nextCodePoint() : inputStream.nextCharCode();\n\n  // Always compare by code point value to get the correct result in all scenarios.\n  // Note that for strings of length 1, codePointAt(0) and charPointAt(0) are equivalent.\n  if (cp !== undefined && this.from.codePointAt(0) <= cp && cp <= this.to.codePointAt(0)) {\n    state.pushBinding(new TerminalNode(String.fromCodePoint(cp).length), origPos);\n    return true;\n  } else {\n    state.processFailure(origPos, this);\n    return false;\n  }\n};\n\npexprs.Param.prototype.eval = function(state) {\n  return state.eval(state.currentApplication().args[this.index]);\n};\n\npexprs.Lex.prototype.eval = function(state) {\n  state.enterLexifiedContext();\n  const ans = state.eval(this.expr);\n  state.exitLexifiedContext();\n  return ans;\n};\n\npexprs.Alt.prototype.eval = function(state) {\n  for (let idx = 0; idx < this.terms.length; idx++) {\n    if (state.eval(this.terms[idx])) {\n      return true;\n    }\n  }\n  return false;\n};\n\npexprs.Seq.prototype.eval = function(state) {\n  for (let idx = 0; idx < this.factors.length; idx++) {\n    const factor = this.factors[idx];\n    if (!state.eval(factor)) {\n      return false;\n    }\n  }\n  return true;\n};\n\npexprs.Iter.prototype.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  const arity = this.getArity();\n  const cols = [];\n  const colOffsets = [];\n  while (cols.length < arity) {\n    cols.push([]);\n    colOffsets.push([]);\n  }\n\n  let numMatches = 0;\n  let prevPos = origPos;\n  let idx;\n  while (numMatches < this.maxNumMatches && state.eval(this.expr)) {\n    if (inputStream.pos === prevPos) {\n      throw errors.kleeneExprHasNullableOperand(this, state._applicationStack);\n    }\n    prevPos = inputStream.pos;\n    numMatches++;\n    const row = state._bindings.splice(state._bindings.length - arity, arity);\n    const rowOffsets = state._bindingOffsets.splice(\n        state._bindingOffsets.length - arity,\n        arity,\n    );\n    for (idx = 0; idx < row.length; idx++) {\n      cols[idx].push(row[idx]);\n      colOffsets[idx].push(rowOffsets[idx]);\n    }\n  }\n  if (numMatches < this.minNumMatches) {\n    return false;\n  }\n  let offset = state.posToOffset(origPos);\n  let matchLength = 0;\n  if (numMatches > 0) {\n    const lastCol = cols[arity - 1];\n    const lastColOffsets = colOffsets[arity - 1];\n\n    const endOffset =\n      lastColOffsets[lastColOffsets.length - 1] + lastCol[lastCol.length - 1].matchLength;\n    offset = colOffsets[0][0];\n    matchLength = endOffset - offset;\n  }\n  const isOptional = this instanceof pexprs.Opt;\n  for (idx = 0; idx < cols.length; idx++) {\n    state._bindings.push(\n        new IterationNode(cols[idx], colOffsets[idx], matchLength, isOptional),\n    );\n    state._bindingOffsets.push(offset);\n  }\n  return true;\n};\n\npexprs.Not.prototype.eval = function(state) {\n  /*\n    TODO:\n    - Right now we're just throwing away all of the failures that happen inside a `not`, and\n      recording `this` as a failed expression.\n    - Double negation should be equivalent to lookahead, but that's not the case right now wrt\n      failures. E.g., ~~'foo' produces a failure for ~~'foo', but maybe it should produce\n      a failure for 'foo' instead.\n  */\n\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  state.pushFailuresInfo();\n\n  const ans = state.eval(this.expr);\n\n  state.popFailuresInfo();\n  if (ans) {\n    state.processFailure(origPos, this);\n    return false;\n  }\n\n  inputStream.pos = origPos;\n  return true;\n};\n\npexprs.Lookahead.prototype.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  if (state.eval(this.expr)) {\n    inputStream.pos = origPos;\n    return true;\n  } else {\n    return false;\n  }\n};\n\npexprs.Apply.prototype.eval = function(state) {\n  const caller = state.currentApplication();\n  const actuals = caller ? caller.args : [];\n  const app = this.substituteParams(actuals);\n\n  const posInfo = state.getCurrentPosInfo();\n  if (posInfo.isActive(app)) {\n    // This rule is already active at this position, i.e., it is left-recursive.\n    return app.handleCycle(state);\n  }\n\n  const memoKey = app.toMemoKey();\n  const memoRec = posInfo.memo[memoKey];\n\n  if (memoRec && posInfo.shouldUseMemoizedResult(memoRec)) {\n    if (state.hasNecessaryInfo(memoRec)) {\n      return state.useMemoizedResult(state.inputStream.pos, memoRec);\n    }\n    delete posInfo.memo[memoKey];\n  }\n  return app.reallyEval(state);\n};\n\npexprs.Apply.prototype.handleCycle = function(state) {\n  const posInfo = state.getCurrentPosInfo();\n  const {currentLeftRecursion} = posInfo;\n  const memoKey = this.toMemoKey();\n  let memoRec = posInfo.memo[memoKey];\n\n  if (currentLeftRecursion && currentLeftRecursion.headApplication.toMemoKey() === memoKey) {\n    // We already know about this left recursion, but it's possible there are \"involved\n    // applications\" that we don't already know about, so...\n    memoRec.updateInvolvedApplicationMemoKeys();\n  } else if (!memoRec) {\n    // New left recursion detected! Memoize a failure to try to get a seed parse.\n    memoRec = posInfo.memoize(memoKey, {\n      matchLength: 0,\n      examinedLength: 0,\n      value: false,\n      rightmostFailureOffset: -1,\n    });\n    posInfo.startLeftRecursion(this, memoRec);\n  }\n  return state.useMemoizedResult(state.inputStream.pos, memoRec);\n};\n\npexprs.Apply.prototype.reallyEval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  const origPosInfo = state.getCurrentPosInfo();\n  const ruleInfo = state.grammar.rules[this.ruleName];\n  const {body} = ruleInfo;\n  const {description} = ruleInfo;\n\n  state.enterApplication(origPosInfo, this);\n\n  if (description) {\n    state.pushFailuresInfo();\n  }\n\n  // Reset the input stream's examinedLength property so that we can track\n  // the examined length of this particular application.\n  const origInputStreamExaminedLength = inputStream.examinedLength;\n  inputStream.examinedLength = 0;\n\n  let value = this.evalOnce(body, state);\n  const currentLR = origPosInfo.currentLeftRecursion;\n  const memoKey = this.toMemoKey();\n  const isHeadOfLeftRecursion = currentLR && currentLR.headApplication.toMemoKey() === memoKey;\n  let memoRec;\n\n  if (state.doNotMemoize) {\n    state.doNotMemoize = false;\n  } else if (isHeadOfLeftRecursion) {\n    value = this.growSeedResult(body, state, origPos, currentLR, value);\n    origPosInfo.endLeftRecursion();\n    memoRec = currentLR;\n    memoRec.examinedLength = inputStream.examinedLength - origPos;\n    memoRec.rightmostFailureOffset = state._getRightmostFailureOffset();\n    origPosInfo.memoize(memoKey, memoRec); // updates origPosInfo's maxExaminedLength\n  } else if (!currentLR || !currentLR.isInvolved(memoKey)) {\n    // This application is not involved in left recursion, so it's ok to memoize it.\n    memoRec = origPosInfo.memoize(memoKey, {\n      matchLength: inputStream.pos - origPos,\n      examinedLength: inputStream.examinedLength - origPos,\n      value,\n      failuresAtRightmostPosition: state.cloneRecordedFailures(),\n      rightmostFailureOffset: state._getRightmostFailureOffset(),\n    });\n  }\n  const succeeded = !!value;\n\n  if (description) {\n    state.popFailuresInfo();\n    if (!succeeded) {\n      state.processFailure(origPos, this);\n    }\n    if (memoRec) {\n      memoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();\n    }\n  }\n\n  // Record trace information in the memo table, so that it is available if the memoized result\n  // is used later.\n  if (state.isTracing() && memoRec) {\n    const entry = state.getTraceEntry(origPos, this, succeeded, succeeded ? [value] : []);\n    if (isHeadOfLeftRecursion) {\n      common.assert(entry.terminatingLREntry != null || !succeeded);\n      entry.isHeadOfLeftRecursion = true;\n    }\n    memoRec.traceEntry = entry;\n  }\n\n  // Fix the input stream's examinedLength -- it should be the maximum examined length\n  // across all applications, not just this one.\n  inputStream.examinedLength = Math.max(\n      inputStream.examinedLength,\n      origInputStreamExaminedLength,\n  );\n\n  state.exitApplication(origPosInfo, value);\n\n  return succeeded;\n};\n\npexprs.Apply.prototype.evalOnce = function(expr, state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n\n  if (state.eval(expr)) {\n    const arity = expr.getArity();\n    const bindings = state._bindings.splice(state._bindings.length - arity, arity);\n    const offsets = state._bindingOffsets.splice(state._bindingOffsets.length - arity, arity);\n    const matchLength = inputStream.pos - origPos;\n    return new NonterminalNode(this.ruleName, bindings, offsets, matchLength);\n  } else {\n    return false;\n  }\n};\n\npexprs.Apply.prototype.growSeedResult = function(body, state, origPos, lrMemoRec, newValue) {\n  if (!newValue) {\n    return false;\n  }\n\n  const {inputStream} = state;\n\n  while (true) {\n    lrMemoRec.matchLength = inputStream.pos - origPos;\n    lrMemoRec.value = newValue;\n    lrMemoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();\n\n    if (state.isTracing()) {\n      // Before evaluating the body again, add a trace node for this application to the memo entry.\n      // Its only child is a copy of the trace node from `newValue`, which will always be the last\n      // element in `state.trace`.\n      const seedTrace = state.trace[state.trace.length - 1];\n      lrMemoRec.traceEntry = new Trace(\n          state.input,\n          origPos,\n          inputStream.pos,\n          this,\n          true,\n          [newValue],\n          [seedTrace.clone()],\n      );\n    }\n    inputStream.pos = origPos;\n    newValue = this.evalOnce(body, state);\n    if (inputStream.pos - origPos <= lrMemoRec.matchLength) {\n      break;\n    }\n    if (state.isTracing()) {\n      state.trace.splice(-2, 1); // Drop the trace for the old seed.\n    }\n  }\n  if (state.isTracing()) {\n    // The last entry is for an unused result -- pop it and save it in the \"real\" entry.\n    lrMemoRec.traceEntry.recordLRTermination(state.trace.pop(), newValue);\n  }\n  inputStream.pos = origPos + lrMemoRec.matchLength;\n  return lrMemoRec.value;\n};\n\npexprs.UnicodeChar.prototype.eval = function(state) {\n  const {inputStream} = state;\n  const origPos = inputStream.pos;\n  const ch = inputStream.next();\n  if (ch && this.pattern.test(ch)) {\n    state.pushBinding(new TerminalNode(ch.length), origPos);\n    return true;\n  } else {\n    state.processFailure(origPos, this);\n    return false;\n  }\n};\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\npexprs.PExpr.prototype.getArity = abstract('getArity');\n\npexprs.any.getArity =\n  pexprs.end.getArity =\n  pexprs.Terminal.prototype.getArity =\n  pexprs.Range.prototype.getArity =\n  pexprs.Param.prototype.getArity =\n  pexprs.Apply.prototype.getArity =\n  pexprs.UnicodeChar.prototype.getArity =\n    function() {\n      return 1;\n    };\n\npexprs.Alt.prototype.getArity = function() {\n  // This is ok b/c all terms must have the same arity -- this property is\n  // checked by the Grammar constructor.\n  return this.terms.length === 0 ? 0 : this.terms[0].getArity();\n};\n\npexprs.Seq.prototype.getArity = function() {\n  let arity = 0;\n  for (let idx = 0; idx < this.factors.length; idx++) {\n    arity += this.factors[idx].getArity();\n  }\n  return arity;\n};\n\npexprs.Iter.prototype.getArity = function() {\n  return this.expr.getArity();\n};\n\npexprs.Not.prototype.getArity = function() {\n  return 0;\n};\n\npexprs.Lookahead.prototype.getArity = pexprs.Lex.prototype.getArity = function() {\n  return this.expr.getArity();\n};\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nfunction getMetaInfo(expr, grammarInterval) {\n  const metaInfo = {};\n  if (expr.source && grammarInterval) {\n    const adjusted = expr.source.relativeTo(grammarInterval);\n    metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];\n  }\n  return metaInfo;\n}\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\npexprs.PExpr.prototype.outputRecipe = abstract('outputRecipe');\n\npexprs.any.outputRecipe = function(formals, grammarInterval) {\n  return ['any', getMetaInfo(this, grammarInterval)];\n};\n\npexprs.end.outputRecipe = function(formals, grammarInterval) {\n  return ['end', getMetaInfo(this, grammarInterval)];\n};\n\npexprs.Terminal.prototype.outputRecipe = function(formals, grammarInterval) {\n  return ['terminal', getMetaInfo(this, grammarInterval), this.obj];\n};\n\npexprs.Range.prototype.outputRecipe = function(formals, grammarInterval) {\n  return ['range', getMetaInfo(this, grammarInterval), this.from, this.to];\n};\n\npexprs.Param.prototype.outputRecipe = function(formals, grammarInterval) {\n  return ['param', getMetaInfo(this, grammarInterval), this.index];\n};\n\npexprs.Alt.prototype.outputRecipe = function(formals, grammarInterval) {\n  return ['alt', getMetaInfo(this, grammarInterval)].concat(\n      this.terms.map(term => term.outputRecipe(formals, grammarInterval)),\n  );\n};\n\npexprs.Extend.prototype.outputRecipe = function(formals, grammarInterval) {\n  const extension = this.terms[0]; // [extension, original]\n  return extension.outputRecipe(formals, grammarInterval);\n};\n\npexprs.Splice.prototype.outputRecipe = function(formals, grammarInterval) {\n  const beforeTerms = this.terms.slice(0, this.expansionPos);\n  const afterTerms = this.terms.slice(this.expansionPos + 1);\n  return [\n    'splice',\n    getMetaInfo(this, grammarInterval),\n    beforeTerms.map(term => term.outputRecipe(formals, grammarInterval)),\n    afterTerms.map(term => term.outputRecipe(formals, grammarInterval)),\n  ];\n};\n\npexprs.Seq.prototype.outputRecipe = function(formals, grammarInterval) {\n  return ['seq', getMetaInfo(this, grammarInterval)].concat(\n      this.factors.map(factor => factor.outputRecipe(formals, grammarInterval)),\n  );\n};\n\npexprs.Star.prototype.outputRecipe =\n  pexprs.Plus.prototype.outputRecipe =\n  pexprs.Opt.prototype.outputRecipe =\n  pexprs.Not.prototype.outputRecipe =\n  pexprs.Lookahead.prototype.outputRecipe =\n  pexprs.Lex.prototype.outputRecipe =\n    function(formals, grammarInterval) {\n      return [\n        this.constructor.name.toLowerCase(),\n        getMetaInfo(this, grammarInterval),\n        this.expr.outputRecipe(formals, grammarInterval),\n      ];\n    };\n\npexprs.Apply.prototype.outputRecipe = function(formals, grammarInterval) {\n  return [\n    'app',\n    getMetaInfo(this, grammarInterval),\n    this.ruleName,\n    this.args.map(arg => arg.outputRecipe(formals, grammarInterval)),\n  ];\n};\n\npexprs.UnicodeChar.prototype.outputRecipe = function(formals, grammarInterval) {\n  return ['unicodeChar', getMetaInfo(this, grammarInterval), this.category];\n};\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n/*\n  Called at grammar creation time to rewrite a rule body, replacing each reference to a formal\n  parameter with a `Param` node. Returns a PExpr -- either a new one, or the original one if\n  it was modified in place.\n*/\npexprs.PExpr.prototype.introduceParams = abstract('introduceParams');\n\npexprs.any.introduceParams =\n  pexprs.end.introduceParams =\n  pexprs.Terminal.prototype.introduceParams =\n  pexprs.Range.prototype.introduceParams =\n  pexprs.Param.prototype.introduceParams =\n  pexprs.UnicodeChar.prototype.introduceParams =\n    function(formals) {\n      return this;\n    };\n\npexprs.Alt.prototype.introduceParams = function(formals) {\n  this.terms.forEach((term, idx, terms) => {\n    terms[idx] = term.introduceParams(formals);\n  });\n  return this;\n};\n\npexprs.Seq.prototype.introduceParams = function(formals) {\n  this.factors.forEach((factor, idx, factors) => {\n    factors[idx] = factor.introduceParams(formals);\n  });\n  return this;\n};\n\npexprs.Iter.prototype.introduceParams =\n  pexprs.Not.prototype.introduceParams =\n  pexprs.Lookahead.prototype.introduceParams =\n  pexprs.Lex.prototype.introduceParams =\n    function(formals) {\n      this.expr = this.expr.introduceParams(formals);\n      return this;\n    };\n\npexprs.Apply.prototype.introduceParams = function(formals) {\n  const index = formals.indexOf(this.ruleName);\n  if (index >= 0) {\n    if (this.args.length > 0) {\n      // TODO: Should this be supported? See issue #64.\n      throw new Error('Parameterized rules cannot be passed as arguments to another rule.');\n    }\n    return new pexprs.Param(index).withSource(this.source);\n  } else {\n    this.args.forEach((arg, idx, args) => {\n      args[idx] = arg.introduceParams(formals);\n    });\n    return this;\n  }\n};\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n// Returns `true` if this parsing expression may accept without consuming any input.\npexprs.PExpr.prototype.isNullable = function(grammar) {\n  return this._isNullable(grammar, Object.create(null));\n};\n\npexprs.PExpr.prototype._isNullable = abstract('_isNullable');\n\npexprs.any._isNullable =\n  pexprs.Range.prototype._isNullable =\n  pexprs.Param.prototype._isNullable =\n  pexprs.Plus.prototype._isNullable =\n  pexprs.UnicodeChar.prototype._isNullable =\n    function(grammar, memo) {\n      return false;\n    };\n\npexprs.end._isNullable = function(grammar, memo) {\n  return true;\n};\n\npexprs.Terminal.prototype._isNullable = function(grammar, memo) {\n  if (typeof this.obj === 'string') {\n    // This is an over-simplification: it's only correct if the input is a string. If it's an array\n    // or an object, then the empty string parsing expression is not nullable.\n    return this.obj === '';\n  } else {\n    return false;\n  }\n};\n\npexprs.Alt.prototype._isNullable = function(grammar, memo) {\n  return this.terms.length === 0 || this.terms.some(term => term._isNullable(grammar, memo));\n};\n\npexprs.Seq.prototype._isNullable = function(grammar, memo) {\n  return this.factors.every(factor => factor._isNullable(grammar, memo));\n};\n\npexprs.Star.prototype._isNullable =\n  pexprs.Opt.prototype._isNullable =\n  pexprs.Not.prototype._isNullable =\n  pexprs.Lookahead.prototype._isNullable =\n    function(grammar, memo) {\n      return true;\n    };\n\npexprs.Lex.prototype._isNullable = function(grammar, memo) {\n  return this.expr._isNullable(grammar, memo);\n};\n\npexprs.Apply.prototype._isNullable = function(grammar, memo) {\n  const key = this.toMemoKey();\n  if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n    const {body} = grammar.rules[this.ruleName];\n    const inlined = body.substituteParams(this.args);\n    memo[key] = false; // Prevent infinite recursion for recursive rules.\n    memo[key] = inlined._isNullable(grammar, memo);\n  }\n  return memo[key];\n};\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n/*\n  Returns a PExpr that results from recursively replacing every formal parameter (i.e., instance\n  of `Param`) inside this PExpr with its actual value from `actuals` (an Array).\n\n  The receiver must not be modified; a new PExpr must be returned if any replacement is necessary.\n*/\n// function(actuals) { ... }\npexprs.PExpr.prototype.substituteParams = abstract('substituteParams');\n\npexprs.any.substituteParams =\n  pexprs.end.substituteParams =\n  pexprs.Terminal.prototype.substituteParams =\n  pexprs.Range.prototype.substituteParams =\n  pexprs.UnicodeChar.prototype.substituteParams =\n    function(actuals) {\n      return this;\n    };\n\npexprs.Param.prototype.substituteParams = function(actuals) {\n  return actuals[this.index];\n};\n\npexprs.Alt.prototype.substituteParams = function(actuals) {\n  return new pexprs.Alt(this.terms.map(term => term.substituteParams(actuals)));\n};\n\npexprs.Seq.prototype.substituteParams = function(actuals) {\n  return new pexprs.Seq(this.factors.map(factor => factor.substituteParams(actuals)));\n};\n\npexprs.Iter.prototype.substituteParams =\n  pexprs.Not.prototype.substituteParams =\n  pexprs.Lookahead.prototype.substituteParams =\n  pexprs.Lex.prototype.substituteParams =\n    function(actuals) {\n      return new this.constructor(this.expr.substituteParams(actuals));\n    };\n\npexprs.Apply.prototype.substituteParams = function(actuals) {\n  if (this.args.length === 0) {\n    // Avoid making a copy of this application, as an optimization\n    return this;\n  } else {\n    const args = this.args.map(arg => arg.substituteParams(actuals));\n    return new pexprs.Apply(this.ruleName, args);\n  }\n};\n","import {abstract, copyWithoutDuplicates} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nfunction isRestrictedJSIdentifier(str) {\n  return /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(str);\n}\n\nfunction resolveDuplicatedNames(argumentNameList) {\n  // `count` is used to record the number of times each argument name occurs in the list,\n  // this is useful for checking duplicated argument name. It maps argument names to ints.\n  const count = Object.create(null);\n  argumentNameList.forEach(argName => {\n    count[argName] = (count[argName] || 0) + 1;\n  });\n\n  // Append subscripts ('_1', '_2', ...) to duplicate argument names.\n  Object.keys(count).forEach(dupArgName => {\n    if (count[dupArgName] <= 1) {\n      return;\n    }\n\n    // This name shows up more than once, so add subscripts.\n    let subscript = 1;\n    argumentNameList.forEach((argName, idx) => {\n      if (argName === dupArgName) {\n        argumentNameList[idx] = argName + '_' + subscript++;\n      }\n    });\n  });\n}\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n/*\n  Returns a list of strings that will be used as the default argument names for its receiver\n  (a pexpr) in a semantic action. This is used exclusively by the Semantics Editor.\n\n  `firstArgIndex` is the 1-based index of the first argument name that will be generated for this\n  pexpr. It enables us to name arguments positionally, e.g., if the second argument is a\n  non-alphanumeric terminal like \"+\", it will be named '$2'.\n\n  `noDupCheck` is true if the caller of `toArgumentNameList` is not a top level caller. It enables\n  us to avoid nested duplication subscripts appending, e.g., '_1_1', '_1_2', by only checking\n  duplicates at the top level.\n\n  Here is a more elaborate example that illustrates how this method works:\n  `(a \"+\" b).toArgumentNameList(1)` evaluates to `['a', '$2', 'b']` with the following recursive\n  calls:\n\n    (a).toArgumentNameList(1) -> ['a'],\n    (\"+\").toArgumentNameList(2) -> ['$2'],\n    (b).toArgumentNameList(3) -> ['b']\n\n  Notes:\n  * This method must only be called on well-formed expressions, e.g., the receiver must\n    not have any Alt sub-expressions with inconsistent arities.\n  * e.getArity() === e.toArgumentNameList(1).length\n*/\n// function(firstArgIndex, noDupCheck) { ... }\npexprs.PExpr.prototype.toArgumentNameList = abstract('toArgumentNameList');\n\npexprs.any.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return ['any'];\n};\n\npexprs.end.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return ['end'];\n};\n\npexprs.Terminal.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  if (typeof this.obj === 'string' && /^[_a-zA-Z0-9]+$/.test(this.obj)) {\n    // If this terminal is a valid suffix for a JS identifier, just prepend it with '_'\n    return ['_' + this.obj];\n  } else {\n    // Otherwise, name it positionally.\n    return ['$' + firstArgIndex];\n  }\n};\n\npexprs.Range.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  let argName = this.from + '_to_' + this.to;\n  // If the `argName` is not valid then try to prepend a `_`.\n  if (!isRestrictedJSIdentifier(argName)) {\n    argName = '_' + argName;\n  }\n  // If the `argName` still not valid after prepending a `_`, then name it positionally.\n  if (!isRestrictedJSIdentifier(argName)) {\n    argName = '$' + firstArgIndex;\n  }\n  return [argName];\n};\n\npexprs.Alt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  // `termArgNameLists` is an array of arrays where each row is the\n  // argument name list that corresponds to a term in this alternation.\n  const termArgNameLists = this.terms.map(term =>\n    term.toArgumentNameList(firstArgIndex, true),\n  );\n\n  const argumentNameList = [];\n  const numArgs = termArgNameLists[0].length;\n  for (let colIdx = 0; colIdx < numArgs; colIdx++) {\n    const col = [];\n    for (let rowIdx = 0; rowIdx < this.terms.length; rowIdx++) {\n      col.push(termArgNameLists[rowIdx][colIdx]);\n    }\n    const uniqueNames = copyWithoutDuplicates(col);\n    argumentNameList.push(uniqueNames.join('_or_'));\n  }\n\n  if (!noDupCheck) {\n    resolveDuplicatedNames(argumentNameList);\n  }\n  return argumentNameList;\n};\n\npexprs.Seq.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  // Generate the argument name list, without worrying about duplicates.\n  let argumentNameList = [];\n  this.factors.forEach(factor => {\n    const factorArgumentNameList = factor.toArgumentNameList(firstArgIndex, true);\n    argumentNameList = argumentNameList.concat(factorArgumentNameList);\n\n    // Shift the firstArgIndex to take this factor's argument names into account.\n    firstArgIndex += factorArgumentNameList.length;\n  });\n  if (!noDupCheck) {\n    resolveDuplicatedNames(argumentNameList);\n  }\n  return argumentNameList;\n};\n\npexprs.Iter.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  const argumentNameList = this.expr\n      .toArgumentNameList(firstArgIndex, noDupCheck)\n      .map(exprArgumentString =>\n      exprArgumentString[exprArgumentString.length - 1] === 's' ?\n        exprArgumentString + 'es' :\n        exprArgumentString + 's',\n      );\n  if (!noDupCheck) {\n    resolveDuplicatedNames(argumentNameList);\n  }\n  return argumentNameList;\n};\n\npexprs.Opt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return this.expr.toArgumentNameList(firstArgIndex, noDupCheck).map(argName => {\n    return 'opt' + argName[0].toUpperCase() + argName.slice(1);\n  });\n};\n\npexprs.Not.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return [];\n};\n\npexprs.Lookahead.prototype.toArgumentNameList = pexprs.Lex.prototype.toArgumentNameList =\n  function(firstArgIndex, noDupCheck) {\n    return this.expr.toArgumentNameList(firstArgIndex, noDupCheck);\n  };\n\npexprs.Apply.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return [this.ruleName];\n};\n\npexprs.UnicodeChar.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return ['$' + firstArgIndex];\n};\n\npexprs.Param.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {\n  return ['param' + this.index];\n};\n\n// \"Value pexprs\" (Value, Str, Arr, Obj) are going away soon, so we don't worry about them here.\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n// Returns a string representing the PExpr, for use as a UI label, etc.\npexprs.PExpr.prototype.toDisplayString = abstract('toDisplayString');\n\npexprs.Alt.prototype.toDisplayString = pexprs.Seq.prototype.toDisplayString = function() {\n  if (this.source) {\n    return this.source.trimmed().contents;\n  }\n  return '[' + this.constructor.name + ']';\n};\n\npexprs.any.toDisplayString =\n  pexprs.end.toDisplayString =\n  pexprs.Iter.prototype.toDisplayString =\n  pexprs.Not.prototype.toDisplayString =\n  pexprs.Lookahead.prototype.toDisplayString =\n  pexprs.Lex.prototype.toDisplayString =\n  pexprs.Terminal.prototype.toDisplayString =\n  pexprs.Range.prototype.toDisplayString =\n  pexprs.Param.prototype.toDisplayString =\n    function() {\n      return this.toString();\n    };\n\npexprs.Apply.prototype.toDisplayString = function() {\n  if (this.args.length > 0) {\n    const ps = this.args.map(arg => arg.toDisplayString());\n    return this.ruleName + '<' + ps.join(',') + '>';\n  } else {\n    return this.ruleName;\n  }\n};\n\npexprs.UnicodeChar.prototype.toDisplayString = function() {\n  return 'Unicode [' + this.category + '] character';\n};\n","// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\n/*\n  `Failure`s represent expressions that weren't matched while parsing. They are used to generate\n  error messages automatically. The interface of `Failure`s includes the collowing methods:\n\n  - getText() : String\n  - getType() : String  (one of {\"description\", \"string\", \"code\"})\n  - isDescription() : bool\n  - isStringTerminal() : bool\n  - isCode() : bool\n  - isFluffy() : bool\n  - makeFluffy() : void\n  - subsumes(Failure) : bool\n*/\n\nfunction isValidType(type) {\n  return type === 'description' || type === 'string' || type === 'code';\n}\n\nexport class Failure {\n  constructor(pexpr, text, type) {\n    if (!isValidType(type)) {\n      throw new Error('invalid Failure type: ' + type);\n    }\n    this.pexpr = pexpr;\n    this.text = text;\n    this.type = type;\n    this.fluffy = false;\n  }\n\n  getPExpr() {\n    return this.pexpr;\n  }\n\n  getText() {\n    return this.text;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  isDescription() {\n    return this.type === 'description';\n  }\n\n  isStringTerminal() {\n    return this.type === 'string';\n  }\n\n  isCode() {\n    return this.type === 'code';\n  }\n\n  isFluffy() {\n    return this.fluffy;\n  }\n\n  makeFluffy() {\n    this.fluffy = true;\n  }\n\n  clearFluffy() {\n    this.fluffy = false;\n  }\n\n  subsumes(that) {\n    return (\n      this.getText() === that.getText() &&\n      this.type === that.type &&\n      (!this.isFluffy() || (this.isFluffy() && that.isFluffy()))\n    );\n  }\n\n  toString() {\n    return this.type === 'string' ? JSON.stringify(this.getText()) : this.getText();\n  }\n\n  clone() {\n    const failure = new Failure(this.pexpr, this.text, this.type);\n    if (this.isFluffy()) {\n      failure.makeFluffy();\n    }\n    return failure;\n  }\n\n  toKey() {\n    return this.toString() + '#' + this.type;\n  }\n}\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\nimport {Failure} from './Failure.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\npexprs.PExpr.prototype.toFailure = abstract('toFailure');\n\npexprs.any.toFailure = function(grammar) {\n  return new Failure(this, 'any object', 'description');\n};\n\npexprs.end.toFailure = function(grammar) {\n  return new Failure(this, 'end of input', 'description');\n};\n\npexprs.Terminal.prototype.toFailure = function(grammar) {\n  return new Failure(this, this.obj, 'string');\n};\n\npexprs.Range.prototype.toFailure = function(grammar) {\n  // TODO: come up with something better\n  return new Failure(this, JSON.stringify(this.from) + '..' + JSON.stringify(this.to), 'code');\n};\n\npexprs.Not.prototype.toFailure = function(grammar) {\n  const description =\n    this.expr === pexprs.any ? 'nothing' : 'not ' + this.expr.toFailure(grammar);\n  return new Failure(this, description, 'description');\n};\n\npexprs.Lookahead.prototype.toFailure = function(grammar) {\n  return this.expr.toFailure(grammar);\n};\n\npexprs.Apply.prototype.toFailure = function(grammar) {\n  let {description} = grammar.rules[this.ruleName];\n  if (!description) {\n    const article = /^[aeiouAEIOU]/.test(this.ruleName) ? 'an' : 'a';\n    description = article + ' ' + this.ruleName;\n  }\n  return new Failure(this, description, 'description');\n};\n\npexprs.UnicodeChar.prototype.toFailure = function(grammar) {\n  return new Failure(this, 'a Unicode [' + this.category + '] character', 'description');\n};\n\npexprs.Alt.prototype.toFailure = function(grammar) {\n  const fs = this.terms.map(t => t.toFailure(grammar));\n  const description = '(' + fs.join(' or ') + ')';\n  return new Failure(this, description, 'description');\n};\n\npexprs.Seq.prototype.toFailure = function(grammar) {\n  const fs = this.factors.map(f => f.toFailure(grammar));\n  const description = '(' + fs.join(' ') + ')';\n  return new Failure(this, description, 'description');\n};\n\npexprs.Iter.prototype.toFailure = function(grammar) {\n  const description = '(' + this.expr.toFailure(grammar) + this.operator + ')';\n  return new Failure(this, description, 'description');\n};\n","import {abstract} from './common.js';\nimport * as pexprs from './pexprs-main.js';\n\n// --------------------------------------------------------------------\n// Operations\n// --------------------------------------------------------------------\n\n/*\n  e1.toString() === e2.toString() ==> e1 and e2 are semantically equivalent.\n  Note that this is not an iff (<==>): e.g.,\n  (~\"b\" \"a\").toString() !== (\"a\").toString(), even though\n  ~\"b\" \"a\" and \"a\" are interchangeable in any grammar,\n  both in terms of the languages they accept and their arities.\n*/\npexprs.PExpr.prototype.toString = abstract('toString');\n\npexprs.any.toString = function() {\n  return 'any';\n};\n\npexprs.end.toString = function() {\n  return 'end';\n};\n\npexprs.Terminal.prototype.toString = function() {\n  return JSON.stringify(this.obj);\n};\n\npexprs.Range.prototype.toString = function() {\n  return JSON.stringify(this.from) + '..' + JSON.stringify(this.to);\n};\n\npexprs.Param.prototype.toString = function() {\n  return '$' + this.index;\n};\n\npexprs.Lex.prototype.toString = function() {\n  return '#(' + this.expr.toString() + ')';\n};\n\npexprs.Alt.prototype.toString = function() {\n  return this.terms.length === 1 ?\n    this.terms[0].toString() :\n    '(' + this.terms.map(term => term.toString()).join(' | ') + ')';\n};\n\npexprs.Seq.prototype.toString = function() {\n  return this.factors.length === 1 ?\n    this.factors[0].toString() :\n    '(' + this.factors.map(factor => factor.toString()).join(' ') + ')';\n};\n\npexprs.Iter.prototype.toString = function() {\n  return this.expr + this.operator;\n};\n\npexprs.Not.prototype.toString = function() {\n  return '~' + this.expr;\n};\n\npexprs.Lookahead.prototype.toString = function() {\n  return '&' + this.expr;\n};\n\npexprs.Apply.prototype.toString = function() {\n  if (this.args.length > 0) {\n    const ps = this.args.map(arg => arg.toString());\n    return this.ruleName + '<' + ps.join(',') + '>';\n  } else {\n    return this.ruleName;\n  }\n};\n\npexprs.UnicodeChar.prototype.toString = function() {\n  return '\\\\p{' + this.category + '}';\n};\n","import {Failure} from './Failure.js';\nimport {TerminalNode} from './nodes.js';\nimport {assert} from './common.js';\nimport {PExpr, Terminal} from './pexprs-main.js';\n\nexport class CaseInsensitiveTerminal extends PExpr {\n  constructor(param) {\n    super();\n    this.obj = param;\n  }\n\n  _getString(state) {\n    const terminal = state.currentApplication().args[this.obj.index];\n    assert(terminal instanceof Terminal, 'expected a Terminal expression');\n    return terminal.obj;\n  }\n\n  // Implementation of the PExpr API\n\n  allowsSkippingPrecedingSpace() {\n    return true;\n  }\n\n  eval(state) {\n    const {inputStream} = state;\n    const origPos = inputStream.pos;\n    const matchStr = this._getString(state);\n    if (!inputStream.matchString(matchStr, true)) {\n      state.processFailure(origPos, this);\n      return false;\n    } else {\n      state.pushBinding(new TerminalNode(matchStr.length), origPos);\n      return true;\n    }\n  }\n\n  getArity() {\n    return 1;\n  }\n\n  substituteParams(actuals) {\n    return new CaseInsensitiveTerminal(this.obj.substituteParams(actuals));\n  }\n\n  toDisplayString() {\n    return this.obj.toDisplayString() + ' (case-insensitive)';\n  }\n\n  toFailure(grammar) {\n    return new Failure(\n        this,\n        this.obj.toFailure(grammar) + ' (case-insensitive)',\n        'description',\n    );\n  }\n\n  _isNullable(grammar, memo) {\n    return this.obj._isNullable(grammar, memo);\n  }\n}\n","import {InputStream} from './InputStream.js';\nimport {MatchResult} from './MatchResult.js';\nimport {PosInfo} from './PosInfo.js';\nimport {Trace} from './Trace.js';\nimport * as pexprs from './pexprs.js';\nimport * as util from './util.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nlet builtInApplySyntacticBody;\n\nutil.awaitBuiltInRules(builtInRules => {\n  builtInApplySyntacticBody = builtInRules.rules.applySyntactic.body;\n});\n\nconst applySpaces = new pexprs.Apply('spaces');\n\nexport class MatchState {\n  constructor(matcher, startExpr, optPositionToRecordFailures) {\n    this.matcher = matcher;\n    this.startExpr = startExpr;\n\n    this.grammar = matcher.grammar;\n    this.input = matcher.getInput();\n    this.inputStream = new InputStream(this.input);\n    this.memoTable = matcher._memoTable;\n\n    this.userData = undefined;\n    this.doNotMemoize = false;\n\n    this._bindings = [];\n    this._bindingOffsets = [];\n    this._applicationStack = [];\n    this._posStack = [0];\n    this.inLexifiedContextStack = [false];\n\n    this.rightmostFailurePosition = -1;\n    this._rightmostFailurePositionStack = [];\n    this._recordedFailuresStack = [];\n\n    if (optPositionToRecordFailures !== undefined) {\n      this.positionToRecordFailures = optPositionToRecordFailures;\n      this.recordedFailures = Object.create(null);\n    }\n  }\n\n  posToOffset(pos) {\n    return pos - this._posStack[this._posStack.length - 1];\n  }\n\n  enterApplication(posInfo, app) {\n    this._posStack.push(this.inputStream.pos);\n    this._applicationStack.push(app);\n    this.inLexifiedContextStack.push(false);\n    posInfo.enter(app);\n    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);\n    this.rightmostFailurePosition = -1;\n  }\n\n  exitApplication(posInfo, optNode) {\n    const origPos = this._posStack.pop();\n    this._applicationStack.pop();\n    this.inLexifiedContextStack.pop();\n    posInfo.exit();\n\n    this.rightmostFailurePosition = Math.max(\n        this.rightmostFailurePosition,\n        this._rightmostFailurePositionStack.pop(),\n    );\n\n    if (optNode) {\n      this.pushBinding(optNode, origPos);\n    }\n  }\n\n  enterLexifiedContext() {\n    this.inLexifiedContextStack.push(true);\n  }\n\n  exitLexifiedContext() {\n    this.inLexifiedContextStack.pop();\n  }\n\n  currentApplication() {\n    return this._applicationStack[this._applicationStack.length - 1];\n  }\n\n  inSyntacticContext() {\n    const currentApplication = this.currentApplication();\n    if (currentApplication) {\n      return currentApplication.isSyntactic() && !this.inLexifiedContext();\n    } else {\n      // The top-level context is syntactic if the start application is.\n      return this.startExpr.factors[0].isSyntactic();\n    }\n  }\n\n  inLexifiedContext() {\n    return this.inLexifiedContextStack[this.inLexifiedContextStack.length - 1];\n  }\n\n  skipSpaces() {\n    this.pushFailuresInfo();\n    this.eval(applySpaces);\n    this.popBinding();\n    this.popFailuresInfo();\n    return this.inputStream.pos;\n  }\n\n  skipSpacesIfInSyntacticContext() {\n    return this.inSyntacticContext() ? this.skipSpaces() : this.inputStream.pos;\n  }\n\n  maybeSkipSpacesBefore(expr) {\n    if (expr.allowsSkippingPrecedingSpace() && expr !== applySpaces) {\n      return this.skipSpacesIfInSyntacticContext();\n    } else {\n      return this.inputStream.pos;\n    }\n  }\n\n  pushBinding(node, origPos) {\n    this._bindings.push(node);\n    this._bindingOffsets.push(this.posToOffset(origPos));\n  }\n\n  popBinding() {\n    this._bindings.pop();\n    this._bindingOffsets.pop();\n  }\n\n  numBindings() {\n    return this._bindings.length;\n  }\n\n  truncateBindings(newLength) {\n    // Yes, this is this really faster than setting the `length` property (tested with\n    // bin/es5bench on Node v6.1.0).\n    // Update 2021-10-25: still true on v14.15.5 — it's ~20% speedup on es5bench.\n    while (this._bindings.length > newLength) {\n      this.popBinding();\n    }\n  }\n\n  getCurrentPosInfo() {\n    return this.getPosInfo(this.inputStream.pos);\n  }\n\n  getPosInfo(pos) {\n    let posInfo = this.memoTable[pos];\n    if (!posInfo) {\n      posInfo = this.memoTable[pos] = new PosInfo();\n    }\n    return posInfo;\n  }\n\n  processFailure(pos, expr) {\n    this.rightmostFailurePosition = Math.max(this.rightmostFailurePosition, pos);\n\n    if (this.recordedFailures && pos === this.positionToRecordFailures) {\n      const app = this.currentApplication();\n      if (app) {\n        // Substitute parameters with the actual pexprs that were passed to\n        // the current rule.\n        expr = expr.substituteParams(app.args);\n      } else {\n        // This branch is only reached for the \"end-check\" that is\n        // performed after the top-level application. In that case,\n        // expr === pexprs.end so there is no need to substitute\n        // parameters.\n      }\n\n      this.recordFailure(expr.toFailure(this.grammar), false);\n    }\n  }\n\n  recordFailure(failure, shouldCloneIfNew) {\n    const key = failure.toKey();\n    if (!this.recordedFailures[key]) {\n      this.recordedFailures[key] = shouldCloneIfNew ? failure.clone() : failure;\n    } else if (this.recordedFailures[key].isFluffy() && !failure.isFluffy()) {\n      this.recordedFailures[key].clearFluffy();\n    }\n  }\n\n  recordFailures(failures, shouldCloneIfNew) {\n    Object.keys(failures).forEach(key => {\n      this.recordFailure(failures[key], shouldCloneIfNew);\n    });\n  }\n\n  cloneRecordedFailures() {\n    if (!this.recordedFailures) {\n      return undefined;\n    }\n\n    const ans = Object.create(null);\n    Object.keys(this.recordedFailures).forEach(key => {\n      ans[key] = this.recordedFailures[key].clone();\n    });\n    return ans;\n  }\n\n  getRightmostFailurePosition() {\n    return this.rightmostFailurePosition;\n  }\n\n  _getRightmostFailureOffset() {\n    return this.rightmostFailurePosition >= 0 ?\n      this.posToOffset(this.rightmostFailurePosition) :\n      -1;\n  }\n\n  // Returns the memoized trace entry for `expr` at `pos`, if one exists, `null` otherwise.\n  getMemoizedTraceEntry(pos, expr) {\n    const posInfo = this.memoTable[pos];\n    if (posInfo && expr instanceof pexprs.Apply) {\n      const memoRec = posInfo.memo[expr.toMemoKey()];\n      if (memoRec && memoRec.traceEntry) {\n        const entry = memoRec.traceEntry.cloneWithExpr(expr);\n        entry.isMemoized = true;\n        return entry;\n      }\n    }\n    return null;\n  }\n\n  // Returns a new trace entry, with the currently active trace array as its children.\n  getTraceEntry(pos, expr, succeeded, bindings) {\n    if (expr instanceof pexprs.Apply) {\n      const app = this.currentApplication();\n      const actuals = app ? app.args : [];\n      expr = expr.substituteParams(actuals);\n    }\n    return (\n      this.getMemoizedTraceEntry(pos, expr) ||\n      new Trace(this.input, pos, this.inputStream.pos, expr, succeeded, bindings, this.trace)\n    );\n  }\n\n  isTracing() {\n    return !!this.trace;\n  }\n\n  hasNecessaryInfo(memoRec) {\n    if (this.trace && !memoRec.traceEntry) {\n      return false;\n    }\n\n    if (\n      this.recordedFailures &&\n      this.inputStream.pos + memoRec.rightmostFailureOffset === this.positionToRecordFailures\n    ) {\n      return !!memoRec.failuresAtRightmostPosition;\n    }\n\n    return true;\n  }\n\n  useMemoizedResult(origPos, memoRec) {\n    if (this.trace) {\n      this.trace.push(memoRec.traceEntry);\n    }\n\n    const memoRecRightmostFailurePosition =\n      this.inputStream.pos + memoRec.rightmostFailureOffset;\n    this.rightmostFailurePosition = Math.max(\n        this.rightmostFailurePosition,\n        memoRecRightmostFailurePosition,\n    );\n    if (\n      this.recordedFailures &&\n      this.positionToRecordFailures === memoRecRightmostFailurePosition &&\n      memoRec.failuresAtRightmostPosition\n    ) {\n      this.recordFailures(memoRec.failuresAtRightmostPosition, true);\n    }\n\n    this.inputStream.examinedLength = Math.max(\n        this.inputStream.examinedLength,\n        memoRec.examinedLength + origPos,\n    );\n\n    if (memoRec.value) {\n      this.inputStream.pos += memoRec.matchLength;\n      this.pushBinding(memoRec.value, origPos);\n      return true;\n    }\n    return false;\n  }\n\n  // Evaluate `expr` and return `true` if it succeeded, `false` otherwise. On success, `bindings`\n  // will have `expr.getArity()` more elements than before, and the input stream's position may\n  // have increased. On failure, `bindings` and position will be unchanged.\n  eval(expr) {\n    const {inputStream} = this;\n    const origNumBindings = this._bindings.length;\n    const origUserData = this.userData;\n\n    let origRecordedFailures;\n    if (this.recordedFailures) {\n      origRecordedFailures = this.recordedFailures;\n      this.recordedFailures = Object.create(null);\n    }\n\n    const origPos = inputStream.pos;\n    const memoPos = this.maybeSkipSpacesBefore(expr);\n\n    let origTrace;\n    if (this.trace) {\n      origTrace = this.trace;\n      this.trace = [];\n    }\n\n    // Do the actual evaluation.\n    const ans = expr.eval(this);\n\n    if (this.trace) {\n      const bindings = this._bindings.slice(origNumBindings);\n      const traceEntry = this.getTraceEntry(memoPos, expr, ans, bindings);\n      traceEntry.isImplicitSpaces = expr === applySpaces;\n      traceEntry.isRootNode = expr === this.startExpr;\n      origTrace.push(traceEntry);\n      this.trace = origTrace;\n    }\n\n    if (ans) {\n      if (this.recordedFailures && inputStream.pos === this.positionToRecordFailures) {\n        Object.keys(this.recordedFailures).forEach(key => {\n          this.recordedFailures[key].makeFluffy();\n        });\n      }\n    } else {\n      // Reset the position, bindings, and userData.\n      inputStream.pos = origPos;\n      this.truncateBindings(origNumBindings);\n      this.userData = origUserData;\n    }\n\n    if (this.recordedFailures) {\n      this.recordFailures(origRecordedFailures, false);\n    }\n\n    // The built-in applySyntactic rule needs special handling: we want to skip\n    // trailing spaces, just as with the top-level application of a syntactic rule.\n    if (expr === builtInApplySyntacticBody) {\n      this.skipSpaces();\n    }\n\n    return ans;\n  }\n\n  getMatchResult() {\n    this.grammar._setUpMatchState(this);\n    this.eval(this.startExpr);\n    let rightmostFailures;\n    if (this.recordedFailures) {\n      rightmostFailures = Object.keys(this.recordedFailures).map(\n          key => this.recordedFailures[key],\n      );\n    }\n    const cst = this._bindings[0];\n    if (cst) {\n      cst.grammar = this.grammar;\n    }\n    return new MatchResult(\n        this.matcher,\n        this.input,\n        this.startExpr,\n        cst,\n        this._bindingOffsets[0],\n        this.rightmostFailurePosition,\n        rightmostFailures,\n    );\n  }\n\n  getTrace() {\n    this.trace = [];\n    const matchResult = this.getMatchResult();\n\n    // The trace node for the start rule is always the last entry. If it is a syntactic rule,\n    // the first entry is for an application of 'spaces'.\n    // TODO(pdubroy): Clean this up by introducing a special `Match<startAppl>` rule, which will\n    // ensure that there is always a single root trace node.\n    const rootTrace = this.trace[this.trace.length - 1];\n    rootTrace.result = matchResult;\n    return rootTrace;\n  }\n\n  pushFailuresInfo() {\n    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);\n    this._recordedFailuresStack.push(this.recordedFailures);\n  }\n\n  popFailuresInfo() {\n    this.rightmostFailurePosition = this._rightmostFailurePositionStack.pop();\n    this.recordedFailures = this._recordedFailuresStack.pop();\n  }\n}\n","import {grammarDoesNotSupportIncrementalParsing} from './errors.js';\nimport {MatchState} from './MatchState.js';\nimport * as pexprs from './pexprs.js';\n\nexport class Matcher {\n  constructor(grammar) {\n    this.grammar = grammar;\n    this._memoTable = [];\n    this._input = '';\n    this._isMemoTableStale = false;\n  }\n\n  _resetMemoTable() {\n    this._memoTable = [];\n    this._isMemoTableStale = false;\n  }\n\n  getInput() {\n    return this._input;\n  }\n\n  setInput(str) {\n    if (this._input !== str) {\n      this.replaceInputRange(0, this._input.length, str);\n    }\n    return this;\n  }\n\n  replaceInputRange(startIdx, endIdx, str) {\n    const prevInput = this._input;\n    const memoTable = this._memoTable;\n    if (\n      startIdx < 0 ||\n      startIdx > prevInput.length ||\n      endIdx < 0 ||\n      endIdx > prevInput.length ||\n      startIdx > endIdx\n    ) {\n      throw new Error('Invalid indices: ' + startIdx + ' and ' + endIdx);\n    }\n\n    // update input\n    this._input = prevInput.slice(0, startIdx) + str + prevInput.slice(endIdx);\n    if (this._input !== prevInput && memoTable.length > 0) {\n      this._isMemoTableStale = true;\n    }\n\n    // update memo table (similar to the above)\n    const restOfMemoTable = memoTable.slice(endIdx);\n    memoTable.length = startIdx;\n    for (let idx = 0; idx < str.length; idx++) {\n      memoTable.push(undefined);\n    }\n    for (const posInfo of restOfMemoTable) {\n      memoTable.push(posInfo);\n    }\n\n    // Invalidate memoRecs\n    for (let pos = 0; pos < startIdx; pos++) {\n      const posInfo = memoTable[pos];\n      if (posInfo) {\n        posInfo.clearObsoleteEntries(pos, startIdx);\n      }\n    }\n\n    return this;\n  }\n\n  match(optStartApplicationStr, options = {incremental: true}) {\n    return this._match(this._getStartExpr(optStartApplicationStr), {\n      incremental: options.incremental,\n      tracing: false,\n    });\n  }\n\n  trace(optStartApplicationStr, options = {incremental: true}) {\n    return this._match(this._getStartExpr(optStartApplicationStr), {\n      incremental: options.incremental,\n      tracing: true,\n    });\n  }\n\n  _match(startExpr, options = {}) {\n    const opts = {\n      tracing: false,\n      incremental: true,\n      positionToRecordFailures: undefined,\n      ...options,\n    };\n    if (!opts.incremental) {\n      this._resetMemoTable();\n    } else if (this._isMemoTableStale && !this.grammar.supportsIncrementalParsing) {\n      throw grammarDoesNotSupportIncrementalParsing(this.grammar);\n    }\n\n    const state = new MatchState(this, startExpr, opts.positionToRecordFailures);\n    return opts.tracing ? state.getTrace() : state.getMatchResult();\n  }\n\n  /*\n    Returns the starting expression for this Matcher's associated grammar. If\n    `optStartApplicationStr` is specified, it is a string expressing a rule application in the\n    grammar. If not specified, the grammar's default start rule will be used.\n  */\n  _getStartExpr(optStartApplicationStr) {\n    const applicationStr = optStartApplicationStr || this.grammar.defaultStartRule;\n    if (!applicationStr) {\n      throw new Error('Missing start rule argument -- the grammar has no default start rule.');\n    }\n\n    const startApp = this.grammar.parseApplication(applicationStr);\n    return new pexprs.Seq([startApp, pexprs.end]);\n  }\n}\n","import {InputStream} from './InputStream.js';\nimport {IterationNode} from './nodes.js';\nimport {MatchResult} from './MatchResult.js';\nimport * as common from './common.js';\nimport * as errors from './errors.js';\nimport * as util from './util.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nconst globalActionStack = [];\n\nconst hasOwnProperty = (x, prop) => Object.prototype.hasOwnProperty.call(x, prop);\n\n// ----------------- Wrappers -----------------\n\n// Wrappers decorate CST nodes with all of the functionality (i.e., operations and attributes)\n// provided by a Semantics (see below). `Wrapper` is the abstract superclass of all wrappers. A\n// `Wrapper` must have `_node` and `_semantics` instance variables, which refer to the CST node and\n// Semantics (resp.) for which it was created, and a `_childWrappers` instance variable which is\n// used to cache the wrapper instances that are created for its child nodes. Setting these instance\n// variables is the responsibility of the constructor of each Semantics-specific subclass of\n// `Wrapper`.\nclass Wrapper {\n  constructor(node, sourceInterval, baseInterval) {\n    this._node = node;\n    this.source = sourceInterval;\n\n    // The interval that the childOffsets of `node` are relative to. It should be the source\n    // of the closest Nonterminal node.\n    this._baseInterval = baseInterval;\n\n    if (node.isNonterminal()) {\n      common.assert(sourceInterval === baseInterval);\n    }\n    this._childWrappers = [];\n  }\n\n  _forgetMemoizedResultFor(attributeName) {\n    // Remove the memoized attribute from the cstNode and all its children.\n    delete this._node[this._semantics.attributeKeys[attributeName]];\n    this.children.forEach(child => {\n      child._forgetMemoizedResultFor(attributeName);\n    });\n  }\n\n  // Returns the wrapper of the specified child node. Child wrappers are created lazily and\n  // cached in the parent wrapper's `_childWrappers` instance variable.\n  child(idx) {\n    if (!(0 <= idx && idx < this._node.numChildren())) {\n      // TODO: Consider throwing an exception here.\n      return undefined;\n    }\n    let childWrapper = this._childWrappers[idx];\n    if (!childWrapper) {\n      const childNode = this._node.childAt(idx);\n      const offset = this._node.childOffsets[idx];\n\n      const source = this._baseInterval.subInterval(offset, childNode.matchLength);\n      const base = childNode.isNonterminal() ? source : this._baseInterval;\n      childWrapper = this._childWrappers[idx] = this._semantics.wrap(childNode, source, base);\n    }\n    return childWrapper;\n  }\n\n  // Returns an array containing the wrappers of all of the children of the node associated\n  // with this wrapper.\n  _children() {\n    // Force the creation of all child wrappers\n    for (let idx = 0; idx < this._node.numChildren(); idx++) {\n      this.child(idx);\n    }\n    return this._childWrappers;\n  }\n\n  // Returns `true` if the CST node associated with this wrapper corresponds to an iteration\n  // expression, i.e., a Kleene-*, Kleene-+, or an optional. Returns `false` otherwise.\n  isIteration() {\n    return this._node.isIteration();\n  }\n\n  // Returns `true` if the CST node associated with this wrapper is a terminal node, `false`\n  // otherwise.\n  isTerminal() {\n    return this._node.isTerminal();\n  }\n\n  // Returns `true` if the CST node associated with this wrapper is a nonterminal node, `false`\n  // otherwise.\n  isNonterminal() {\n    return this._node.isNonterminal();\n  }\n\n  // Returns `true` if the CST node associated with this wrapper is a nonterminal node\n  // corresponding to a syntactic rule, `false` otherwise.\n  isSyntactic() {\n    return this.isNonterminal() && this._node.isSyntactic();\n  }\n\n  // Returns `true` if the CST node associated with this wrapper is a nonterminal node\n  // corresponding to a lexical rule, `false` otherwise.\n  isLexical() {\n    return this.isNonterminal() && this._node.isLexical();\n  }\n\n  // Returns `true` if the CST node associated with this wrapper is an iterator node\n  // having either one or no child (? operator), `false` otherwise.\n  // Otherwise, throws an exception.\n  isOptional() {\n    return this._node.isOptional();\n  }\n\n  // Create a new _iter wrapper in the same semantics as this wrapper.\n  iteration(optChildWrappers) {\n    const childWrappers = optChildWrappers || [];\n\n    const childNodes = childWrappers.map(c => c._node);\n    const iter = new IterationNode(childNodes, [], -1, false);\n\n    const wrapper = this._semantics.wrap(iter, null, null);\n    wrapper._childWrappers = childWrappers;\n    return wrapper;\n  }\n\n  // Returns an array containing the children of this CST node.\n  get children() {\n    return this._children();\n  }\n\n  // Returns the name of grammar rule that created this CST node.\n  get ctorName() {\n    return this._node.ctorName;\n  }\n\n  // Returns the number of children of this CST node.\n  get numChildren() {\n    return this._node.numChildren();\n  }\n\n  // Returns the contents of the input stream consumed by this CST node.\n  get sourceString() {\n    return this.source.contents;\n  }\n}\n\n// ----------------- Semantics -----------------\n\n// A Semantics is a container for a family of Operations and Attributes for a given grammar.\n// Semantics enable modularity (different clients of a grammar can create their set of operations\n// and attributes in isolation) and extensibility even when operations and attributes are mutually-\n// recursive. This constructor should not be called directly except from\n// `Semantics.createSemantics`. The normal ways to create a Semantics, given a grammar 'g', are\n// `g.createSemantics()` and `g.extendSemantics(parentSemantics)`.\nexport class Semantics {\n  constructor(grammar, superSemantics) {\n    const self = this;\n    this.grammar = grammar;\n    this.checkedActionDicts = false;\n\n    // Constructor for wrapper instances, which are passed as the arguments to the semantic actions\n    // of an operation or attribute. Operations and attributes require double dispatch: the semantic\n    // action is chosen based on both the node's type and the semantics. Wrappers ensure that\n    // the `execute` method is called with the correct (most specific) semantics object as an\n    // argument.\n    this.Wrapper = class extends (superSemantics ? superSemantics.Wrapper : Wrapper) {\n      constructor(node, sourceInterval, baseInterval) {\n        super(node, sourceInterval, baseInterval);\n        self.checkActionDictsIfHaventAlready();\n        this._semantics = self;\n      }\n\n      toString() {\n        return '[semantics wrapper for ' + self.grammar.name + ']';\n      }\n    };\n\n    this.super = superSemantics;\n    if (superSemantics) {\n      if (!(grammar.equals(this.super.grammar) || grammar._inheritsFrom(this.super.grammar))) {\n        throw new Error(\n            \"Cannot extend a semantics for grammar '\" +\n            this.super.grammar.name +\n            \"' for use with grammar '\" +\n            grammar.name +\n            \"' (not a sub-grammar)\",\n        );\n      }\n      this.operations = Object.create(this.super.operations);\n      this.attributes = Object.create(this.super.attributes);\n      this.attributeKeys = Object.create(null);\n\n      // Assign unique symbols for each of the attributes inherited from the super-semantics so that\n      // they are memoized independently.\n      // eslint-disable-next-line guard-for-in\n      for (const attributeName in this.attributes) {\n        Object.defineProperty(this.attributeKeys, attributeName, {\n          value: util.uniqueId(attributeName),\n        });\n      }\n    } else {\n      this.operations = Object.create(null);\n      this.attributes = Object.create(null);\n      this.attributeKeys = Object.create(null);\n    }\n  }\n\n  toString() {\n    return '[semantics for ' + this.grammar.name + ']';\n  }\n\n  checkActionDictsIfHaventAlready() {\n    if (!this.checkedActionDicts) {\n      this.checkActionDicts();\n      this.checkedActionDicts = true;\n    }\n  }\n\n  // Checks that the action dictionaries for all operations and attributes in this semantics,\n  // including the ones that were inherited from the super-semantics, agree with the grammar.\n  // Throws an exception if one or more of them doesn't.\n  checkActionDicts() {\n    let name;\n    // eslint-disable-next-line guard-for-in\n    for (name in this.operations) {\n      this.operations[name].checkActionDict(this.grammar);\n    }\n    // eslint-disable-next-line guard-for-in\n    for (name in this.attributes) {\n      this.attributes[name].checkActionDict(this.grammar);\n    }\n  }\n\n  toRecipe(semanticsOnly) {\n    function hasSuperSemantics(s) {\n      return s.super !== Semantics.BuiltInSemantics._getSemantics();\n    }\n\n    let str = '(function(g) {\\n';\n    if (hasSuperSemantics(this)) {\n      str += '  var semantics = ' + this.super.toRecipe(true) + '(g';\n\n      const superSemanticsGrammar = this.super.grammar;\n      let relatedGrammar = this.grammar;\n      while (relatedGrammar !== superSemanticsGrammar) {\n        str += '.superGrammar';\n        relatedGrammar = relatedGrammar.superGrammar;\n      }\n\n      str += ');\\n';\n      str += '  return g.extendSemantics(semantics)';\n    } else {\n      str += '  return g.createSemantics()';\n    }\n    ['Operation', 'Attribute'].forEach(type => {\n      const semanticOperations = this[type.toLowerCase() + 's'];\n      Object.keys(semanticOperations).forEach(name => {\n        const {actionDict, formals, builtInDefault} = semanticOperations[name];\n\n        let signature = name;\n        if (formals.length > 0) {\n          signature += '(' + formals.join(', ') + ')';\n        }\n\n        let method;\n        if (hasSuperSemantics(this) && this.super[type.toLowerCase() + 's'][name]) {\n          method = 'extend' + type;\n        } else {\n          method = 'add' + type;\n        }\n        str += '\\n    .' + method + '(' + JSON.stringify(signature) + ', {';\n\n        const srcArray = [];\n        Object.keys(actionDict).forEach(actionName => {\n          if (actionDict[actionName] !== builtInDefault) {\n            let source = actionDict[actionName].toString().trim();\n\n            // Convert method shorthand to plain old function syntax.\n            // https://github.com/ohmjs/ohm/issues/263\n            source = source.replace(/^.*\\(/, 'function(');\n\n            srcArray.push('\\n      ' + JSON.stringify(actionName) + ': ' + source);\n          }\n        });\n        str += srcArray.join(',') + '\\n    })';\n      });\n    });\n    str += ';\\n  })';\n\n    if (!semanticsOnly) {\n      str =\n        '(function() {\\n' +\n        '  var grammar = this.fromRecipe(' +\n        this.grammar.toRecipe() +\n        ');\\n' +\n        '  var semantics = ' +\n        str +\n        '(grammar);\\n' +\n        '  return semantics;\\n' +\n        '});\\n';\n    }\n\n    return str;\n  }\n\n  addOperationOrAttribute(type, signature, actionDict) {\n    const typePlural = type + 's';\n\n    const parsedNameAndFormalArgs = parseSignature(signature, type);\n    const {name} = parsedNameAndFormalArgs;\n    const {formals} = parsedNameAndFormalArgs;\n\n    // TODO: check that there are no duplicate formal arguments\n\n    this.assertNewName(name, type);\n\n    // Create the action dictionary for this operation / attribute that contains a `_default` action\n    // which defines the default behavior of iteration, terminal, and non-terminal nodes...\n    const builtInDefault = newDefaultAction(type, name, doIt);\n    const realActionDict = {_default: builtInDefault};\n    // ... and add in the actions supplied by the programmer, which may override some or all of the\n    // default ones.\n    Object.keys(actionDict).forEach(name => {\n      realActionDict[name] = actionDict[name];\n    });\n\n    const entry =\n      type === 'operation' ?\n        new Operation(name, formals, realActionDict, builtInDefault) :\n        new Attribute(name, realActionDict, builtInDefault);\n\n    // The following check is not strictly necessary (it will happen later anyway) but it's better\n    // to catch errors early.\n    entry.checkActionDict(this.grammar);\n\n    this[typePlural][name] = entry;\n\n    function doIt(...args) {\n      // Dispatch to most specific version of this operation / attribute -- it may have been\n      // overridden by a sub-semantics.\n      const thisThing = this._semantics[typePlural][name];\n\n      // Check that the caller passed the correct number of arguments.\n      if (arguments.length !== thisThing.formals.length) {\n        throw new Error(\n            'Invalid number of arguments passed to ' +\n            name +\n            ' ' +\n            type +\n            ' (expected ' +\n            thisThing.formals.length +\n            ', got ' +\n            arguments.length +\n            ')',\n        );\n      }\n\n      // Create an \"arguments object\" from the arguments that were passed to this\n      // operation / attribute.\n      const argsObj = Object.create(null);\n      for (const [idx, val] of Object.entries(args)) {\n        const formal = thisThing.formals[idx];\n        argsObj[formal] = val;\n      }\n\n      const oldArgs = this.args;\n      this.args = argsObj;\n      const ans = thisThing.execute(this._semantics, this);\n      this.args = oldArgs;\n      return ans;\n    }\n\n    if (type === 'operation') {\n      this.Wrapper.prototype[name] = doIt;\n      this.Wrapper.prototype[name].toString = function() {\n        return '[' + name + ' operation]';\n      };\n    } else {\n      Object.defineProperty(this.Wrapper.prototype, name, {\n        get: doIt,\n        configurable: true, // So the property can be deleted.\n      });\n      Object.defineProperty(this.attributeKeys, name, {\n        value: util.uniqueId(name),\n      });\n    }\n  }\n\n  extendOperationOrAttribute(type, name, actionDict) {\n    const typePlural = type + 's';\n\n    // Make sure that `name` really is just a name, i.e., that it doesn't also contain formals.\n    parseSignature(name, 'attribute');\n\n    if (!(this.super && name in this.super[typePlural])) {\n      throw new Error(\n          'Cannot extend ' +\n          type +\n          \" '\" +\n          name +\n          \"': did not inherit an \" +\n          type +\n          ' with that name',\n      );\n    }\n    if (hasOwnProperty(this[typePlural], name)) {\n      throw new Error('Cannot extend ' + type + \" '\" + name + \"' again\");\n    }\n\n    // Create a new operation / attribute whose actionDict delegates to the super operation /\n    // attribute's actionDict, and which has all the keys from `inheritedActionDict`.\n    const inheritedFormals = this[typePlural][name].formals;\n    const inheritedActionDict = this[typePlural][name].actionDict;\n    const newActionDict = Object.create(inheritedActionDict);\n    Object.keys(actionDict).forEach(name => {\n      newActionDict[name] = actionDict[name];\n    });\n\n    this[typePlural][name] =\n      type === 'operation' ?\n        new Operation(name, inheritedFormals, newActionDict) :\n        new Attribute(name, newActionDict);\n\n    // The following check is not strictly necessary (it will happen later anyway) but it's better\n    // to catch errors early.\n    this[typePlural][name].checkActionDict(this.grammar);\n  }\n\n  assertNewName(name, type) {\n    if (hasOwnProperty(Wrapper.prototype, name)) {\n      throw new Error('Cannot add ' + type + \" '\" + name + \"': that's a reserved name\");\n    }\n    if (name in this.operations) {\n      throw new Error(\n          'Cannot add ' + type + \" '\" + name + \"': an operation with that name already exists\",\n      );\n    }\n    if (name in this.attributes) {\n      throw new Error(\n          'Cannot add ' + type + \" '\" + name + \"': an attribute with that name already exists\",\n      );\n    }\n  }\n\n  // Returns a wrapper for the given CST `node` in this semantics.\n  // If `node` is already a wrapper, returns `node` itself.  // TODO: why is this needed?\n  wrap(node, source, optBaseInterval) {\n    const baseInterval = optBaseInterval || source;\n    return node instanceof this.Wrapper ? node : new this.Wrapper(node, source, baseInterval);\n  }\n}\n\nfunction parseSignature(signature, type) {\n  if (!Semantics.prototypeGrammar) {\n    // The Operations and Attributes grammar won't be available while Ohm is loading,\n    // but we can get away the following simplification b/c none of the operations\n    // that are used while loading take arguments.\n    common.assert(signature.indexOf('(') === -1);\n    return {\n      name: signature,\n      formals: [],\n    };\n  }\n\n  const r = Semantics.prototypeGrammar.match(\n      signature,\n    type === 'operation' ? 'OperationSignature' : 'AttributeSignature',\n  );\n  if (r.failed()) {\n    throw new Error(r.message);\n  }\n\n  return Semantics.prototypeGrammarSemantics(r).parse();\n}\n\nfunction newDefaultAction(type, name, doIt) {\n  return function(...children) {\n    const thisThing = this._semantics.operations[name] || this._semantics.attributes[name];\n    const args = thisThing.formals.map(formal => this.args[formal]);\n\n    if (!this.isIteration() && children.length === 1) {\n      // This CST node corresponds to a non-terminal in the grammar (e.g., AddExpr). The fact that\n      // we got here means that this action dictionary doesn't have an action for this particular\n      // non-terminal or a generic `_nonterminal` action.\n      // As a convenience, if this node only has one child, we just return the result of applying\n      // this operation / attribute to the child node.\n      return doIt.apply(children[0], args);\n    } else {\n      // Otherwise, we throw an exception to let the programmer know that we don't know what\n      // to do with this node.\n      throw errors.missingSemanticAction(this.ctorName, name, type, globalActionStack);\n    }\n  };\n}\n\n// Creates a new Semantics instance for `grammar`, inheriting operations and attributes from\n// `optSuperSemantics`, if it is specified. Returns a function that acts as a proxy for the new\n// Semantics instance. When that function is invoked with a CST node as an argument, it returns\n// a wrapper for that node which gives access to the operations and attributes provided by this\n// semantics.\nSemantics.createSemantics = function(grammar, optSuperSemantics) {\n  const s = new Semantics(\n      grammar,\n    optSuperSemantics !== undefined ?\n      optSuperSemantics :\n      Semantics.BuiltInSemantics._getSemantics(),\n  );\n\n  // To enable clients to invoke a semantics like a function, return a function that acts as a proxy\n  // for `s`, which is the real `Semantics` instance.\n  const proxy = function ASemantics(matchResult) {\n    if (!(matchResult instanceof MatchResult)) {\n      throw new TypeError(\n          'Semantics expected a MatchResult, but got ' +\n          common.unexpectedObjToString(matchResult),\n      );\n    }\n    if (matchResult.failed()) {\n      throw new TypeError('cannot apply Semantics to ' + matchResult.toString());\n    }\n\n    const cst = matchResult._cst;\n    if (cst.grammar !== grammar) {\n      throw new Error(\n          \"Cannot use a MatchResult from grammar '\" +\n          cst.grammar.name +\n          \"' with a semantics for '\" +\n          grammar.name +\n          \"'\",\n      );\n    }\n    const inputStream = new InputStream(matchResult.input);\n    return s.wrap(cst, inputStream.interval(matchResult._cstOffset, matchResult.input.length));\n  };\n\n  // Forward public methods from the proxy to the semantics instance.\n  proxy.addOperation = function(signature, actionDict) {\n    s.addOperationOrAttribute('operation', signature, actionDict);\n    return proxy;\n  };\n  proxy.extendOperation = function(name, actionDict) {\n    s.extendOperationOrAttribute('operation', name, actionDict);\n    return proxy;\n  };\n  proxy.addAttribute = function(name, actionDict) {\n    s.addOperationOrAttribute('attribute', name, actionDict);\n    return proxy;\n  };\n  proxy.extendAttribute = function(name, actionDict) {\n    s.extendOperationOrAttribute('attribute', name, actionDict);\n    return proxy;\n  };\n  proxy._getActionDict = function(operationOrAttributeName) {\n    const action =\n      s.operations[operationOrAttributeName] || s.attributes[operationOrAttributeName];\n    if (!action) {\n      throw new Error(\n          '\"' +\n          operationOrAttributeName +\n          '\" is not a valid operation or attribute ' +\n          'name in this semantics for \"' +\n          grammar.name +\n          '\"',\n      );\n    }\n    return action.actionDict;\n  };\n  proxy._remove = function(operationOrAttributeName) {\n    let semantic;\n    if (operationOrAttributeName in s.operations) {\n      semantic = s.operations[operationOrAttributeName];\n      delete s.operations[operationOrAttributeName];\n    } else if (operationOrAttributeName in s.attributes) {\n      semantic = s.attributes[operationOrAttributeName];\n      delete s.attributes[operationOrAttributeName];\n    }\n    delete s.Wrapper.prototype[operationOrAttributeName];\n    return semantic;\n  };\n  proxy.getOperationNames = function() {\n    return Object.keys(s.operations);\n  };\n  proxy.getAttributeNames = function() {\n    return Object.keys(s.attributes);\n  };\n  proxy.getGrammar = function() {\n    return s.grammar;\n  };\n  proxy.toRecipe = function(semanticsOnly) {\n    return s.toRecipe(semanticsOnly);\n  };\n\n  // Make the proxy's toString() work.\n  proxy.toString = s.toString.bind(s);\n\n  // Returns the semantics for the proxy.\n  proxy._getSemantics = function() {\n    return s;\n  };\n\n  return proxy;\n};\n\n// ----------------- Operation -----------------\n\n// An Operation represents a function to be applied to a concrete syntax tree (CST) -- it's very\n// similar to a Visitor (http://en.wikipedia.org/wiki/Visitor_pattern). An operation is executed by\n// recursively walking the CST, and at each node, invoking the matching semantic action from\n// `actionDict`. See `Operation.prototype.execute` for details of how a CST node's matching semantic\n// action is found.\nclass Operation {\n  constructor(name, formals, actionDict, builtInDefault) {\n    this.name = name;\n    this.formals = formals;\n    this.actionDict = actionDict;\n    this.builtInDefault = builtInDefault;\n  }\n\n  checkActionDict(grammar) {\n    grammar._checkTopDownActionDict(this.typeName, this.name, this.actionDict);\n  }\n\n  // Execute this operation on the CST node associated with `nodeWrapper` in the context of the\n  // given Semantics instance.\n  execute(semantics, nodeWrapper) {\n    try {\n      // Look for a semantic action whose name matches the node's constructor name, which is either\n      // the name of a rule in the grammar, or '_terminal' (for a terminal node), or '_iter' (for an\n      // iteration node).\n      const {ctorName} = nodeWrapper._node;\n      let actionFn = this.actionDict[ctorName];\n      if (actionFn) {\n        globalActionStack.push([this, ctorName]);\n        return actionFn.apply(nodeWrapper, nodeWrapper._children());\n      }\n\n      // The action dictionary does not contain a semantic action for this specific type of node.\n      // If this is a nonterminal node and the programmer has provided a `_nonterminal` semantic\n      // action, we invoke it:\n      if (nodeWrapper.isNonterminal()) {\n        actionFn = this.actionDict._nonterminal;\n        if (actionFn) {\n          globalActionStack.push([this, '_nonterminal', ctorName]);\n          return actionFn.apply(nodeWrapper, nodeWrapper._children());\n        }\n      }\n\n      // Otherwise, we invoke the '_default' semantic action.\n      globalActionStack.push([this, 'default action', ctorName]);\n      return this.actionDict._default.apply(nodeWrapper, nodeWrapper._children());\n    } finally {\n      globalActionStack.pop();\n    }\n  }\n}\n\nOperation.prototype.typeName = 'operation';\n\n// ----------------- Attribute -----------------\n\n// Attributes are Operations whose results are memoized. This means that, for any given semantics,\n// the semantic action for a CST node will be invoked no more than once.\nclass Attribute extends Operation {\n  constructor(name, actionDict, builtInDefault) {\n    super(name, [], actionDict, builtInDefault);\n  }\n\n  execute(semantics, nodeWrapper) {\n    const node = nodeWrapper._node;\n    const key = semantics.attributeKeys[this.name];\n    if (!hasOwnProperty(node, key)) {\n      // The following is a super-send -- isn't JS beautiful? :/\n      node[key] = Operation.prototype.execute.call(this, semantics, nodeWrapper);\n    }\n    return node[key];\n  }\n}\n\nAttribute.prototype.typeName = 'attribute';\n","import {Matcher} from './Matcher.js';\nimport {Semantics} from './Semantics.js';\nimport * as common from './common.js';\nimport * as errors from './errors.js';\nimport * as pexprs from './pexprs.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nconst SPECIAL_ACTION_NAMES = ['_iter', '_terminal', '_nonterminal', '_default'];\n\nfunction getSortedRuleValues(grammar) {\n  return Object.keys(grammar.rules)\n      .sort()\n      .map(name => grammar.rules[name]);\n}\n\n// Until ES2019, JSON was not a valid subset of JavaScript because U+2028 (line separator)\n// and U+2029 (paragraph separator) are allowed in JSON string literals, but not in JS.\n// This function properly encodes those two characters so that the resulting string is\n// represents both valid JSON, and valid JavaScript (for ES2018 and below).\n// See https://v8.dev/features/subsume-json for more details.\nconst jsonToJS = str => str.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n\nlet ohmGrammar;\nlet buildGrammar;\n\nexport class Grammar {\n  constructor(name, superGrammar, rules, optDefaultStartRule) {\n    this.name = name;\n    this.superGrammar = superGrammar;\n    this.rules = rules;\n    if (optDefaultStartRule) {\n      if (!(optDefaultStartRule in rules)) {\n        throw new Error(\n            \"Invalid start rule: '\" +\n            optDefaultStartRule +\n            \"' is not a rule in grammar '\" +\n            name +\n            \"'\",\n        );\n      }\n      this.defaultStartRule = optDefaultStartRule;\n    }\n    this._matchStateInitializer = undefined;\n    this.supportsIncrementalParsing = true;\n  }\n\n  matcher() {\n    return new Matcher(this);\n  }\n\n  // Return true if the grammar is a built-in grammar, otherwise false.\n  // NOTE: This might give an unexpected result if called before BuiltInRules is defined!\n  isBuiltIn() {\n    return this === Grammar.ProtoBuiltInRules || this === Grammar.BuiltInRules;\n  }\n\n  equals(g) {\n    if (this === g) {\n      return true;\n    }\n    // Do the cheapest comparisons first.\n    if (\n      g == null ||\n      this.name !== g.name ||\n      this.defaultStartRule !== g.defaultStartRule ||\n      !(this.superGrammar === g.superGrammar || this.superGrammar.equals(g.superGrammar))\n    ) {\n      return false;\n    }\n    const myRules = getSortedRuleValues(this);\n    const otherRules = getSortedRuleValues(g);\n    return (\n      myRules.length === otherRules.length &&\n      myRules.every((rule, i) => {\n        return (\n          rule.description === otherRules[i].description &&\n          rule.formals.join(',') === otherRules[i].formals.join(',') &&\n          rule.body.toString() === otherRules[i].body.toString()\n        );\n      })\n    );\n  }\n\n  match(input, optStartApplication) {\n    const m = this.matcher();\n    m.replaceInputRange(0, 0, input);\n    return m.match(optStartApplication);\n  }\n\n  trace(input, optStartApplication) {\n    const m = this.matcher();\n    m.replaceInputRange(0, 0, input);\n    return m.trace(optStartApplication);\n  }\n\n  createSemantics() {\n    return Semantics.createSemantics(this);\n  }\n\n  extendSemantics(superSemantics) {\n    return Semantics.createSemantics(this, superSemantics._getSemantics());\n  }\n\n  // Check that every key in `actionDict` corresponds to a semantic action, and that it maps to\n  // a function of the correct arity. If not, throw an exception.\n  _checkTopDownActionDict(what, name, actionDict) {\n    const problems = [];\n\n    // eslint-disable-next-line guard-for-in\n    for (const k in actionDict) {\n      const v = actionDict[k];\n      const isSpecialAction = SPECIAL_ACTION_NAMES.includes(k);\n\n      if (!isSpecialAction && !(k in this.rules)) {\n        problems.push(`'${k}' is not a valid semantic action for '${this.name}'`);\n        continue;\n      }\n      if (typeof v !== 'function') {\n        problems.push(`'${k}' must be a function in an action dictionary for '${this.name}'`);\n        continue;\n      }\n      const actual = v.length;\n      const expected = this._topDownActionArity(k);\n      if (actual !== expected) {\n        let details;\n        if (k === '_iter' || k === '_nonterminal') {\n          details =\n            `it should use a rest parameter, e.g. \\`${k}(...children) {}\\`. ` +\n            'NOTE: this is new in Ohm v16 — see https://ohmjs.org/d/ati for details.';\n        } else {\n          details = `expected ${expected}, got ${actual}`;\n        }\n        problems.push(`Semantic action '${k}' has the wrong arity: ${details}`);\n      }\n    }\n    if (problems.length > 0) {\n      const prettyProblems = problems.map(problem => '- ' + problem);\n      const error = new Error(\n          [\n            `Found errors in the action dictionary of the '${name}' ${what}:`,\n            ...prettyProblems,\n          ].join('\\n'),\n      );\n      error.problems = problems;\n      throw error;\n    }\n  }\n\n  // Return the expected arity for a semantic action named `actionName`, which\n  // is either a rule name or a special action name like '_nonterminal'.\n  _topDownActionArity(actionName) {\n    // All special actions have an expected arity of 0, though all but _terminal\n    // are expected to use the rest parameter syntax (e.g. `_iter(...children)`).\n    // This is considered to have arity 0, i.e. `((...args) => {}).length` is 0.\n    return SPECIAL_ACTION_NAMES.includes(actionName) ?\n      0 :\n      this.rules[actionName].body.getArity();\n  }\n\n  _inheritsFrom(grammar) {\n    let g = this.superGrammar;\n    while (g) {\n      if (g.equals(grammar, true)) {\n        return true;\n      }\n      g = g.superGrammar;\n    }\n    return false;\n  }\n\n  toRecipe(superGrammarExpr = undefined) {\n    const metaInfo = {};\n    // Include the grammar source if it is available.\n    if (this.source) {\n      metaInfo.source = this.source.contents;\n    }\n\n    let startRule = null;\n    if (this.defaultStartRule) {\n      startRule = this.defaultStartRule;\n    }\n\n    const rules = {};\n    Object.keys(this.rules).forEach(ruleName => {\n      const ruleInfo = this.rules[ruleName];\n      const {body} = ruleInfo;\n      const isDefinition = !this.superGrammar || !this.superGrammar.rules[ruleName];\n\n      let operation;\n      if (isDefinition) {\n        operation = 'define';\n      } else {\n        operation = body instanceof pexprs.Extend ? 'extend' : 'override';\n      }\n\n      const metaInfo = {};\n      if (ruleInfo.source && this.source) {\n        const adjusted = ruleInfo.source.relativeTo(this.source);\n        metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];\n      }\n\n      const description = isDefinition ? ruleInfo.description : null;\n      const bodyRecipe = body.outputRecipe(ruleInfo.formals, this.source);\n\n      rules[ruleName] = [\n        operation, // \"define\"/\"extend\"/\"override\"\n        metaInfo,\n        description,\n        ruleInfo.formals,\n        bodyRecipe,\n      ];\n    });\n\n    // If the caller provided an expression to use for the supergrammar, use that.\n    // Otherwise, if the supergrammar is a user grammar, use its recipe inline.\n    let superGrammarOutput = 'null';\n    if (superGrammarExpr) {\n      superGrammarOutput = superGrammarExpr;\n    } else if (this.superGrammar && !this.superGrammar.isBuiltIn()) {\n      superGrammarOutput = this.superGrammar.toRecipe();\n    }\n\n    const recipeElements = [\n      ...['grammar', metaInfo, this.name].map(JSON.stringify),\n      superGrammarOutput,\n      ...[startRule, rules].map(JSON.stringify),\n    ];\n    return jsonToJS(`[${recipeElements.join(',')}]`);\n  }\n\n  // TODO: Come up with better names for these methods.\n  // TODO: Write the analog of these methods for inherited attributes.\n  toOperationActionDictionaryTemplate() {\n    return this._toOperationOrAttributeActionDictionaryTemplate();\n  }\n  toAttributeActionDictionaryTemplate() {\n    return this._toOperationOrAttributeActionDictionaryTemplate();\n  }\n\n  _toOperationOrAttributeActionDictionaryTemplate() {\n    // TODO: add the super-grammar's templates at the right place, e.g., a case for AddExpr_plus\n    // should appear next to other cases of AddExpr.\n\n    const sb = new common.StringBuffer();\n    sb.append('{');\n\n    let first = true;\n    // eslint-disable-next-line guard-for-in\n    for (const ruleName in this.rules) {\n      const {body} = this.rules[ruleName];\n      if (first) {\n        first = false;\n      } else {\n        sb.append(',');\n      }\n      sb.append('\\n');\n      sb.append('  ');\n      this.addSemanticActionTemplate(ruleName, body, sb);\n    }\n\n    sb.append('\\n}');\n    return sb.contents();\n  }\n\n  addSemanticActionTemplate(ruleName, body, sb) {\n    sb.append(ruleName);\n    sb.append(': function(');\n    const arity = this._topDownActionArity(ruleName);\n    sb.append(common.repeat('_', arity).join(', '));\n    sb.append(') {\\n');\n    sb.append('  }');\n  }\n\n  // Parse a string which expresses a rule application in this grammar, and return the\n  // resulting Apply node.\n  parseApplication(str) {\n    let app;\n    if (str.indexOf('<') === -1) {\n      // simple application\n      app = new pexprs.Apply(str);\n    } else {\n      // parameterized application\n      const cst = ohmGrammar.match(str, 'Base_application');\n      app = buildGrammar(cst, {});\n    }\n\n    // Ensure that the application is valid.\n    if (!(app.ruleName in this.rules)) {\n      throw errors.undeclaredRule(app.ruleName, this.name);\n    }\n    const {formals} = this.rules[app.ruleName];\n    if (formals.length !== app.args.length) {\n      const {source} = this.rules[app.ruleName];\n      throw errors.wrongNumberOfParameters(\n          app.ruleName,\n          formals.length,\n          app.args.length,\n          source,\n      );\n    }\n    return app;\n  }\n\n  _setUpMatchState(state) {\n    if (this._matchStateInitializer) {\n      this._matchStateInitializer(state);\n    }\n  }\n}\n\n// The following grammar contains a few rules that couldn't be written  in \"userland\".\n// At the bottom of src/main.js, we create a sub-grammar of this grammar that's called\n// `BuiltInRules`. That grammar contains several convenience rules, e.g., `letter` and\n// `digit`, and is implicitly the super-grammar of any grammar whose super-grammar\n// isn't specified.\nGrammar.ProtoBuiltInRules = new Grammar(\n    'ProtoBuiltInRules', // name\n    undefined, // supergrammar\n    {\n      any: {\n        body: pexprs.any,\n        formals: [],\n        description: 'any character',\n        primitive: true,\n      },\n      end: {\n        body: pexprs.end,\n        formals: [],\n        description: 'end of input',\n        primitive: true,\n      },\n\n      caseInsensitive: {\n        body: new pexprs.CaseInsensitiveTerminal(new pexprs.Param(0)),\n        formals: ['str'],\n        primitive: true,\n      },\n      lower: {\n        body: new pexprs.UnicodeChar('Ll'),\n        formals: [],\n        description: 'a lowercase letter',\n        primitive: true,\n      },\n      upper: {\n        body: new pexprs.UnicodeChar('Lu'),\n        formals: [],\n        description: 'an uppercase letter',\n        primitive: true,\n      },\n      // Union of Lt (titlecase), Lm (modifier), and Lo (other), i.e. any letter not in Ll or Lu.\n      unicodeLtmo: {\n        body: new pexprs.UnicodeChar('Ltmo'),\n        formals: [],\n        description: 'a Unicode character in Lt, Lm, or Lo',\n        primitive: true,\n      },\n\n      // These rules are not truly primitive (they could be written in userland) but are defined\n      // here for bootstrapping purposes.\n      spaces: {\n        body: new pexprs.Star(new pexprs.Apply('space')),\n        formals: [],\n      },\n      space: {\n        body: new pexprs.Range('\\x00', ' '),\n        formals: [],\n        description: 'a space',\n      },\n    },\n);\n\n// This method is called from main.js once Ohm has loaded.\nGrammar.initApplicationParser = function(grammar, builderFn) {\n  ohmGrammar = grammar;\n  buildGrammar = builderFn;\n};\n","import {Grammar} from './Grammar.js';\nimport {InputStream} from './InputStream.js';\nimport {getDuplicates} from './common.js';\nimport * as errors from './errors.js';\nimport * as pexprs from './pexprs.js';\n\n// --------------------------------------------------------------------\n// Private Stuff\n// --------------------------------------------------------------------\n\n// Constructors\n\nexport class GrammarDecl {\n  constructor(name) {\n    this.name = name;\n  }\n\n  // Helpers\n\n  sourceInterval(startIdx, endIdx) {\n    return this.source.subInterval(startIdx, endIdx - startIdx);\n  }\n\n  ensureSuperGrammar() {\n    if (!this.superGrammar) {\n      this.withSuperGrammar(\n        // TODO: The conditional expression below is an ugly hack. It's kind of ok because\n        // I doubt anyone will ever try to declare a grammar called `BuiltInRules`. Still,\n        // we should try to find a better way to do this.\n        this.name === 'BuiltInRules' ? Grammar.ProtoBuiltInRules : Grammar.BuiltInRules,\n      );\n    }\n    return this.superGrammar;\n  }\n\n  ensureSuperGrammarRuleForOverriding(name, source) {\n    const ruleInfo = this.ensureSuperGrammar().rules[name];\n    if (!ruleInfo) {\n      throw errors.cannotOverrideUndeclaredRule(name, this.superGrammar.name, source);\n    }\n    return ruleInfo;\n  }\n\n  installOverriddenOrExtendedRule(name, formals, body, source) {\n    const duplicateParameterNames = getDuplicates(formals);\n    if (duplicateParameterNames.length > 0) {\n      throw errors.duplicateParameterNames(name, duplicateParameterNames, source);\n    }\n    const ruleInfo = this.ensureSuperGrammar().rules[name];\n    const expectedFormals = ruleInfo.formals;\n    const expectedNumFormals = expectedFormals ? expectedFormals.length : 0;\n    if (formals.length !== expectedNumFormals) {\n      throw errors.wrongNumberOfParameters(name, expectedNumFormals, formals.length, source);\n    }\n    return this.install(name, formals, body, ruleInfo.description, source);\n  }\n\n  install(name, formals, body, description, source, primitive = false) {\n    this.rules[name] = {\n      body: body.introduceParams(formals),\n      formals,\n      description,\n      source,\n      primitive,\n    };\n    return this;\n  }\n\n  // Stuff that you should only do once\n\n  withSuperGrammar(superGrammar) {\n    if (this.superGrammar) {\n      throw new Error('the super grammar of a GrammarDecl cannot be set more than once');\n    }\n    this.superGrammar = superGrammar;\n    this.rules = Object.create(superGrammar.rules);\n\n    // Grammars with an explicit supergrammar inherit a default start rule.\n    if (!superGrammar.isBuiltIn()) {\n      this.defaultStartRule = superGrammar.defaultStartRule;\n    }\n    return this;\n  }\n\n  withDefaultStartRule(ruleName) {\n    this.defaultStartRule = ruleName;\n    return this;\n  }\n\n  withSource(source) {\n    this.source = new InputStream(source).interval(0, source.length);\n    return this;\n  }\n\n  // Creates a Grammar instance, and if it passes the sanity checks, returns it.\n  build() {\n    const grammar = new Grammar(\n        this.name,\n        this.ensureSuperGrammar(),\n        this.rules,\n        this.defaultStartRule,\n    );\n    // Initialize internal props that are inherited from the super grammar.\n    grammar._matchStateInitializer = grammar.superGrammar._matchStateInitializer;\n    grammar.supportsIncrementalParsing = grammar.superGrammar.supportsIncrementalParsing;\n\n    // TODO: change the pexpr.prototype.assert... methods to make them add\n    // exceptions to an array that's provided as an arg. Then we'll be able to\n    // show more than one error of the same type at a time.\n    // TODO: include the offending pexpr in the errors, that way we can show\n    // the part of the source that caused it.\n    const grammarErrors = [];\n    let grammarHasInvalidApplications = false;\n    Object.keys(grammar.rules).forEach(ruleName => {\n      const {body} = grammar.rules[ruleName];\n      try {\n        body.assertChoicesHaveUniformArity(ruleName);\n      } catch (e) {\n        grammarErrors.push(e);\n      }\n      try {\n        body.assertAllApplicationsAreValid(ruleName, grammar);\n      } catch (e) {\n        grammarErrors.push(e);\n        grammarHasInvalidApplications = true;\n      }\n    });\n    if (!grammarHasInvalidApplications) {\n      // The following check can only be done if the grammar has no invalid applications.\n      Object.keys(grammar.rules).forEach(ruleName => {\n        const {body} = grammar.rules[ruleName];\n        try {\n          body.assertIteratedExprsAreNotNullable(grammar, []);\n        } catch (e) {\n          grammarErrors.push(e);\n        }\n      });\n    }\n    if (grammarErrors.length > 0) {\n      errors.throwErrors(grammarErrors);\n    }\n    if (this.source) {\n      grammar.source = this.source;\n    }\n\n    return grammar;\n  }\n\n  // Rule declarations\n\n  define(name, formals, body, description, source, primitive) {\n    this.ensureSuperGrammar();\n    if (this.superGrammar.rules[name]) {\n      throw errors.duplicateRuleDeclaration(name, this.name, this.superGrammar.name, source);\n    } else if (this.rules[name]) {\n      throw errors.duplicateRuleDeclaration(name, this.name, this.name, source);\n    }\n    const duplicateParameterNames = getDuplicates(formals);\n    if (duplicateParameterNames.length > 0) {\n      throw errors.duplicateParameterNames(name, duplicateParameterNames, source);\n    }\n    return this.install(name, formals, body, description, source, primitive);\n  }\n\n  override(name, formals, body, descIgnored, source) {\n    this.ensureSuperGrammarRuleForOverriding(name, source);\n    this.installOverriddenOrExtendedRule(name, formals, body, source);\n    return this;\n  }\n\n  extend(name, formals, fragment, descIgnored, source) {\n    const ruleInfo = this.ensureSuperGrammar().rules[name];\n    if (!ruleInfo) {\n      throw errors.cannotExtendUndeclaredRule(name, this.superGrammar.name, source);\n    }\n    const body = new pexprs.Extend(this.superGrammar, name, fragment);\n    body.source = fragment.source;\n    this.installOverriddenOrExtendedRule(name, formals, body, source);\n    return this;\n  }\n}\n","import {Grammar} from './Grammar.js';\nimport {GrammarDecl} from './GrammarDecl.js';\nimport * as pexprs from './pexprs.js';\n\n// --------------------------------------------------------------------\n// Private stuff\n// --------------------------------------------------------------------\n\nexport class Builder {\n  constructor() {\n    this.currentDecl = null;\n    this.currentRuleName = null;\n  }\n\n  newGrammar(name) {\n    return new GrammarDecl(name);\n  }\n\n  grammar(metaInfo, name, superGrammar, defaultStartRule, rules) {\n    const gDecl = new GrammarDecl(name);\n    if (superGrammar) {\n      // `superGrammar` may be a recipe (i.e. an Array), or an actual grammar instance.\n      gDecl.withSuperGrammar(\n        superGrammar instanceof Grammar ? superGrammar : this.fromRecipe(superGrammar),\n      );\n    }\n    if (defaultStartRule) {\n      gDecl.withDefaultStartRule(defaultStartRule);\n    }\n    if (metaInfo && metaInfo.source) {\n      gDecl.withSource(metaInfo.source);\n    }\n\n    this.currentDecl = gDecl;\n    Object.keys(rules).forEach(ruleName => {\n      this.currentRuleName = ruleName;\n      const ruleRecipe = rules[ruleName];\n\n      const action = ruleRecipe[0]; // define/extend/override\n      const metaInfo = ruleRecipe[1];\n      const description = ruleRecipe[2];\n      const formals = ruleRecipe[3];\n      const body = this.fromRecipe(ruleRecipe[4]);\n\n      let source;\n      if (gDecl.source && metaInfo && metaInfo.sourceInterval) {\n        source = gDecl.source.subInterval(\n            metaInfo.sourceInterval[0],\n            metaInfo.sourceInterval[1] - metaInfo.sourceInterval[0],\n        );\n      }\n      gDecl[action](ruleName, formals, body, description, source);\n    });\n    this.currentRuleName = this.currentDecl = null;\n    return gDecl.build();\n  }\n\n  terminal(x) {\n    return new pexprs.Terminal(x);\n  }\n\n  range(from, to) {\n    return new pexprs.Range(from, to);\n  }\n\n  param(index) {\n    return new pexprs.Param(index);\n  }\n\n  alt(...termArgs) {\n    let terms = [];\n    for (let arg of termArgs) {\n      if (!(arg instanceof pexprs.PExpr)) {\n        arg = this.fromRecipe(arg);\n      }\n      if (arg instanceof pexprs.Alt) {\n        terms = terms.concat(arg.terms);\n      } else {\n        terms.push(arg);\n      }\n    }\n    return terms.length === 1 ? terms[0] : new pexprs.Alt(terms);\n  }\n\n  seq(...factorArgs) {\n    let factors = [];\n    for (let arg of factorArgs) {\n      if (!(arg instanceof pexprs.PExpr)) {\n        arg = this.fromRecipe(arg);\n      }\n      if (arg instanceof pexprs.Seq) {\n        factors = factors.concat(arg.factors);\n      } else {\n        factors.push(arg);\n      }\n    }\n    return factors.length === 1 ? factors[0] : new pexprs.Seq(factors);\n  }\n\n  star(expr) {\n    if (!(expr instanceof pexprs.PExpr)) {\n      expr = this.fromRecipe(expr);\n    }\n    return new pexprs.Star(expr);\n  }\n\n  plus(expr) {\n    if (!(expr instanceof pexprs.PExpr)) {\n      expr = this.fromRecipe(expr);\n    }\n    return new pexprs.Plus(expr);\n  }\n\n  opt(expr) {\n    if (!(expr instanceof pexprs.PExpr)) {\n      expr = this.fromRecipe(expr);\n    }\n    return new pexprs.Opt(expr);\n  }\n\n  not(expr) {\n    if (!(expr instanceof pexprs.PExpr)) {\n      expr = this.fromRecipe(expr);\n    }\n    return new pexprs.Not(expr);\n  }\n\n  lookahead(expr) {\n    if (!(expr instanceof pexprs.PExpr)) {\n      expr = this.fromRecipe(expr);\n    }\n    return new pexprs.Lookahead(expr);\n  }\n\n  lex(expr) {\n    if (!(expr instanceof pexprs.PExpr)) {\n      expr = this.fromRecipe(expr);\n    }\n    return new pexprs.Lex(expr);\n  }\n\n  app(ruleName, optParams) {\n    if (optParams && optParams.length > 0) {\n      optParams = optParams.map(function(param) {\n        return param instanceof pexprs.PExpr ? param : this.fromRecipe(param);\n      }, this);\n    }\n    return new pexprs.Apply(ruleName, optParams);\n  }\n\n  // Note that unlike other methods in this class, this method cannot be used as a\n  // convenience constructor. It only works with recipes, because it relies on\n  // `this.currentDecl` and `this.currentRuleName` being set.\n  splice(beforeTerms, afterTerms) {\n    return new pexprs.Splice(\n        this.currentDecl.superGrammar,\n        this.currentRuleName,\n        beforeTerms.map(term => this.fromRecipe(term)),\n        afterTerms.map(term => this.fromRecipe(term)),\n    );\n  }\n\n  fromRecipe(recipe) {\n    // the meta-info of 'grammar' is processed in Builder.grammar\n    const args = recipe[0] === 'grammar' ? recipe.slice(1) : recipe.slice(2);\n    const result = this[recipe[0]](...args);\n\n    const metaInfo = recipe[1];\n    if (metaInfo) {\n      if (metaInfo.sourceInterval && this.currentDecl) {\n        result.withSource(this.currentDecl.sourceInterval(...metaInfo.sourceInterval));\n      }\n    }\n    return result;\n  }\n}\n","import {Builder} from './Builder.js';\n\nexport function makeRecipe(recipe) {\n  if (typeof recipe === 'function') {\n    return recipe.call(new Builder());\n  } else {\n    if (typeof recipe === 'string') {\n      // stringified JSON recipe\n      recipe = JSON.parse(recipe);\n    }\n    return new Builder().fromRecipe(recipe);\n  }\n}\n","import {makeRecipe} from '../src/makeRecipe.js';\nexport default makeRecipe([\"grammar\",{\"source\":\"BuiltInRules {\\n\\n  alnum  (an alpha-numeric character)\\n    = letter\\n    | digit\\n\\n  letter  (a letter)\\n    = lower\\n    | upper\\n    | unicodeLtmo\\n\\n  digit  (a digit)\\n    = \\\"0\\\"..\\\"9\\\"\\n\\n  hexDigit  (a hexadecimal digit)\\n    = digit\\n    | \\\"a\\\"..\\\"f\\\"\\n    | \\\"A\\\"..\\\"F\\\"\\n\\n  ListOf<elem, sep>\\n    = NonemptyListOf<elem, sep>\\n    | EmptyListOf<elem, sep>\\n\\n  NonemptyListOf<elem, sep>\\n    = elem (sep elem)*\\n\\n  EmptyListOf<elem, sep>\\n    = /* nothing */\\n\\n  listOf<elem, sep>\\n    = nonemptyListOf<elem, sep>\\n    | emptyListOf<elem, sep>\\n\\n  nonemptyListOf<elem, sep>\\n    = elem (sep elem)*\\n\\n  emptyListOf<elem, sep>\\n    = /* nothing */\\n\\n  // Allows a syntactic rule application within a lexical context.\\n  applySyntactic<app> = app\\n}\"},\"BuiltInRules\",null,null,{\"alnum\":[\"define\",{\"sourceInterval\":[18,78]},\"an alpha-numeric character\",[],[\"alt\",{\"sourceInterval\":[60,78]},[\"app\",{\"sourceInterval\":[60,66]},\"letter\",[]],[\"app\",{\"sourceInterval\":[73,78]},\"digit\",[]]]],\"letter\":[\"define\",{\"sourceInterval\":[82,142]},\"a letter\",[],[\"alt\",{\"sourceInterval\":[107,142]},[\"app\",{\"sourceInterval\":[107,112]},\"lower\",[]],[\"app\",{\"sourceInterval\":[119,124]},\"upper\",[]],[\"app\",{\"sourceInterval\":[131,142]},\"unicodeLtmo\",[]]]],\"digit\":[\"define\",{\"sourceInterval\":[146,177]},\"a digit\",[],[\"range\",{\"sourceInterval\":[169,177]},\"0\",\"9\"]],\"hexDigit\":[\"define\",{\"sourceInterval\":[181,254]},\"a hexadecimal digit\",[],[\"alt\",{\"sourceInterval\":[219,254]},[\"app\",{\"sourceInterval\":[219,224]},\"digit\",[]],[\"range\",{\"sourceInterval\":[231,239]},\"a\",\"f\"],[\"range\",{\"sourceInterval\":[246,254]},\"A\",\"F\"]]],\"ListOf\":[\"define\",{\"sourceInterval\":[258,336]},null,[\"elem\",\"sep\"],[\"alt\",{\"sourceInterval\":[282,336]},[\"app\",{\"sourceInterval\":[282,307]},\"NonemptyListOf\",[[\"param\",{\"sourceInterval\":[297,301]},0],[\"param\",{\"sourceInterval\":[303,306]},1]]],[\"app\",{\"sourceInterval\":[314,336]},\"EmptyListOf\",[[\"param\",{\"sourceInterval\":[326,330]},0],[\"param\",{\"sourceInterval\":[332,335]},1]]]]],\"NonemptyListOf\":[\"define\",{\"sourceInterval\":[340,388]},null,[\"elem\",\"sep\"],[\"seq\",{\"sourceInterval\":[372,388]},[\"param\",{\"sourceInterval\":[372,376]},0],[\"star\",{\"sourceInterval\":[377,388]},[\"seq\",{\"sourceInterval\":[378,386]},[\"param\",{\"sourceInterval\":[378,381]},1],[\"param\",{\"sourceInterval\":[382,386]},0]]]]],\"EmptyListOf\":[\"define\",{\"sourceInterval\":[392,434]},null,[\"elem\",\"sep\"],[\"seq\",{\"sourceInterval\":[438,438]}]],\"listOf\":[\"define\",{\"sourceInterval\":[438,516]},null,[\"elem\",\"sep\"],[\"alt\",{\"sourceInterval\":[462,516]},[\"app\",{\"sourceInterval\":[462,487]},\"nonemptyListOf\",[[\"param\",{\"sourceInterval\":[477,481]},0],[\"param\",{\"sourceInterval\":[483,486]},1]]],[\"app\",{\"sourceInterval\":[494,516]},\"emptyListOf\",[[\"param\",{\"sourceInterval\":[506,510]},0],[\"param\",{\"sourceInterval\":[512,515]},1]]]]],\"nonemptyListOf\":[\"define\",{\"sourceInterval\":[520,568]},null,[\"elem\",\"sep\"],[\"seq\",{\"sourceInterval\":[552,568]},[\"param\",{\"sourceInterval\":[552,556]},0],[\"star\",{\"sourceInterval\":[557,568]},[\"seq\",{\"sourceInterval\":[558,566]},[\"param\",{\"sourceInterval\":[558,561]},1],[\"param\",{\"sourceInterval\":[562,566]},0]]]]],\"emptyListOf\":[\"define\",{\"sourceInterval\":[572,682]},null,[\"elem\",\"sep\"],[\"seq\",{\"sourceInterval\":[685,685]}]],\"applySyntactic\":[\"define\",{\"sourceInterval\":[685,710]},null,[\"app\"],[\"param\",{\"sourceInterval\":[707,710]},0]]}]);\n","import BuiltInRules from '../dist/built-in-rules.js';\nimport {Grammar} from './Grammar.js';\nimport {announceBuiltInRules} from './util.js';\n\nGrammar.BuiltInRules = BuiltInRules;\nannounceBuiltInRules(Grammar.BuiltInRules);\n\n// During the bootstrap process, we instantiate some grammars that require\n// the built-in rules to be loaded first (e.g., ohm-grammar.ohm). By\n// exporting `makeRecipe` here, the recipes for those grammars can encode\n// that dependency by importing it from this module.\nexport {makeRecipe} from './makeRecipe.js';\n","import {makeRecipe} from '../src/main-kernel.js';\nexport default makeRecipe([\"grammar\",{\"source\":\"Ohm {\\n\\n  Grammars\\n    = Grammar*\\n\\n  Grammar\\n    = ident SuperGrammar? \\\"{\\\" Rule* \\\"}\\\"\\n\\n  SuperGrammar\\n    = \\\"<:\\\" ident\\n\\n  Rule\\n    = ident Formals? ruleDescr? \\\"=\\\"  RuleBody  -- define\\n    | ident Formals?            \\\":=\\\" OverrideRuleBody  -- override\\n    | ident Formals?            \\\"+=\\\" RuleBody  -- extend\\n\\n  RuleBody\\n    = \\\"|\\\"? NonemptyListOf<TopLevelTerm, \\\"|\\\">\\n\\n  TopLevelTerm\\n    = Seq caseName  -- inline\\n    | Seq\\n\\n  OverrideRuleBody\\n    = \\\"|\\\"? NonemptyListOf<OverrideTopLevelTerm, \\\"|\\\">\\n\\n  OverrideTopLevelTerm\\n    = \\\"...\\\"  -- superSplice\\n    | TopLevelTerm\\n\\n  Formals\\n    = \\\"<\\\" ListOf<ident, \\\",\\\"> \\\">\\\"\\n\\n  Params\\n    = \\\"<\\\" ListOf<Seq, \\\",\\\"> \\\">\\\"\\n\\n  Alt\\n    = NonemptyListOf<Seq, \\\"|\\\">\\n\\n  Seq\\n    = Iter*\\n\\n  Iter\\n    = Pred \\\"*\\\"  -- star\\n    | Pred \\\"+\\\"  -- plus\\n    | Pred \\\"?\\\"  -- opt\\n    | Pred\\n\\n  Pred\\n    = \\\"~\\\" Lex  -- not\\n    | \\\"&\\\" Lex  -- lookahead\\n    | Lex\\n\\n  Lex\\n    = \\\"#\\\" Base  -- lex\\n    | Base\\n\\n  Base\\n    = ident Params? ~(ruleDescr? \\\"=\\\" | \\\":=\\\" | \\\"+=\\\")  -- application\\n    | oneCharTerminal \\\"..\\\" oneCharTerminal           -- range\\n    | terminal                                       -- terminal\\n    | \\\"(\\\" Alt \\\")\\\"                                    -- paren\\n\\n  ruleDescr  (a rule description)\\n    = \\\"(\\\" ruleDescrText \\\")\\\"\\n\\n  ruleDescrText\\n    = (~\\\")\\\" any)*\\n\\n  caseName\\n    = \\\"--\\\" (~\\\"\\\\n\\\" space)* name (~\\\"\\\\n\\\" space)* (\\\"\\\\n\\\" | &\\\"}\\\")\\n\\n  name  (a name)\\n    = nameFirst nameRest*\\n\\n  nameFirst\\n    = \\\"_\\\"\\n    | letter\\n\\n  nameRest\\n    = \\\"_\\\"\\n    | alnum\\n\\n  ident  (an identifier)\\n    = name\\n\\n  terminal\\n    = \\\"\\\\\\\"\\\" terminalChar* \\\"\\\\\\\"\\\"\\n\\n  oneCharTerminal\\n    = \\\"\\\\\\\"\\\" terminalChar \\\"\\\\\\\"\\\"\\n\\n  terminalChar\\n    = escapeChar\\n      | ~\\\"\\\\\\\\\\\" ~\\\"\\\\\\\"\\\" ~\\\"\\\\n\\\" \\\"\\\\u{0}\\\"..\\\"\\\\u{10FFFF}\\\"\\n\\n  escapeChar  (an escape sequence)\\n    = \\\"\\\\\\\\\\\\\\\\\\\"                                     -- backslash\\n    | \\\"\\\\\\\\\\\\\\\"\\\"                                     -- doubleQuote\\n    | \\\"\\\\\\\\\\\\'\\\"                                     -- singleQuote\\n    | \\\"\\\\\\\\b\\\"                                      -- backspace\\n    | \\\"\\\\\\\\n\\\"                                      -- lineFeed\\n    | \\\"\\\\\\\\r\\\"                                      -- carriageReturn\\n    | \\\"\\\\\\\\t\\\"                                      -- tab\\n    | \\\"\\\\\\\\u{\\\" hexDigit hexDigit? hexDigit?\\n             hexDigit? hexDigit? hexDigit? \\\"}\\\"   -- unicodeCodePoint\\n    | \\\"\\\\\\\\u\\\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\\n    | \\\"\\\\\\\\x\\\" hexDigit hexDigit                    -- hexEscape\\n\\n  space\\n   += comment\\n\\n  comment\\n    = \\\"//\\\" (~\\\"\\\\n\\\" any)* &(\\\"\\\\n\\\" | end)  -- singleLine\\n    | \\\"/*\\\" (~\\\"*/\\\" any)* \\\"*/\\\"  -- multiLine\\n\\n  tokens = token*\\n\\n  token = caseName | comment | ident | operator | punctuation | terminal | any\\n\\n  operator = \\\"<:\\\" | \\\"=\\\" | \\\":=\\\" | \\\"+=\\\" | \\\"*\\\" | \\\"+\\\" | \\\"?\\\" | \\\"~\\\" | \\\"&\\\"\\n\\n  punctuation = \\\"<\\\" | \\\">\\\" | \\\",\\\" | \\\"--\\\"\\n}\"},\"Ohm\",null,\"Grammars\",{\"Grammars\":[\"define\",{\"sourceInterval\":[9,32]},null,[],[\"star\",{\"sourceInterval\":[24,32]},[\"app\",{\"sourceInterval\":[24,31]},\"Grammar\",[]]]],\"Grammar\":[\"define\",{\"sourceInterval\":[36,83]},null,[],[\"seq\",{\"sourceInterval\":[50,83]},[\"app\",{\"sourceInterval\":[50,55]},\"ident\",[]],[\"opt\",{\"sourceInterval\":[56,69]},[\"app\",{\"sourceInterval\":[56,68]},\"SuperGrammar\",[]]],[\"terminal\",{\"sourceInterval\":[70,73]},\"{\"],[\"star\",{\"sourceInterval\":[74,79]},[\"app\",{\"sourceInterval\":[74,78]},\"Rule\",[]]],[\"terminal\",{\"sourceInterval\":[80,83]},\"}\"]]],\"SuperGrammar\":[\"define\",{\"sourceInterval\":[87,116]},null,[],[\"seq\",{\"sourceInterval\":[106,116]},[\"terminal\",{\"sourceInterval\":[106,110]},\"<:\"],[\"app\",{\"sourceInterval\":[111,116]},\"ident\",[]]]],\"Rule_define\":[\"define\",{\"sourceInterval\":[131,181]},null,[],[\"seq\",{\"sourceInterval\":[131,170]},[\"app\",{\"sourceInterval\":[131,136]},\"ident\",[]],[\"opt\",{\"sourceInterval\":[137,145]},[\"app\",{\"sourceInterval\":[137,144]},\"Formals\",[]]],[\"opt\",{\"sourceInterval\":[146,156]},[\"app\",{\"sourceInterval\":[146,155]},\"ruleDescr\",[]]],[\"terminal\",{\"sourceInterval\":[157,160]},\"=\"],[\"app\",{\"sourceInterval\":[162,170]},\"RuleBody\",[]]]],\"Rule_override\":[\"define\",{\"sourceInterval\":[188,248]},null,[],[\"seq\",{\"sourceInterval\":[188,235]},[\"app\",{\"sourceInterval\":[188,193]},\"ident\",[]],[\"opt\",{\"sourceInterval\":[194,202]},[\"app\",{\"sourceInterval\":[194,201]},\"Formals\",[]]],[\"terminal\",{\"sourceInterval\":[214,218]},\":=\"],[\"app\",{\"sourceInterval\":[219,235]},\"OverrideRuleBody\",[]]]],\"Rule_extend\":[\"define\",{\"sourceInterval\":[255,305]},null,[],[\"seq\",{\"sourceInterval\":[255,294]},[\"app\",{\"sourceInterval\":[255,260]},\"ident\",[]],[\"opt\",{\"sourceInterval\":[261,269]},[\"app\",{\"sourceInterval\":[261,268]},\"Formals\",[]]],[\"terminal\",{\"sourceInterval\":[281,285]},\"+=\"],[\"app\",{\"sourceInterval\":[286,294]},\"RuleBody\",[]]]],\"Rule\":[\"define\",{\"sourceInterval\":[120,305]},null,[],[\"alt\",{\"sourceInterval\":[131,305]},[\"app\",{\"sourceInterval\":[131,170]},\"Rule_define\",[]],[\"app\",{\"sourceInterval\":[188,235]},\"Rule_override\",[]],[\"app\",{\"sourceInterval\":[255,294]},\"Rule_extend\",[]]]],\"RuleBody\":[\"define\",{\"sourceInterval\":[309,362]},null,[],[\"seq\",{\"sourceInterval\":[324,362]},[\"opt\",{\"sourceInterval\":[324,328]},[\"terminal\",{\"sourceInterval\":[324,327]},\"|\"]],[\"app\",{\"sourceInterval\":[329,362]},\"NonemptyListOf\",[[\"app\",{\"sourceInterval\":[344,356]},\"TopLevelTerm\",[]],[\"terminal\",{\"sourceInterval\":[358,361]},\"|\"]]]]],\"TopLevelTerm_inline\":[\"define\",{\"sourceInterval\":[385,408]},null,[],[\"seq\",{\"sourceInterval\":[385,397]},[\"app\",{\"sourceInterval\":[385,388]},\"Seq\",[]],[\"app\",{\"sourceInterval\":[389,397]},\"caseName\",[]]]],\"TopLevelTerm\":[\"define\",{\"sourceInterval\":[366,418]},null,[],[\"alt\",{\"sourceInterval\":[385,418]},[\"app\",{\"sourceInterval\":[385,397]},\"TopLevelTerm_inline\",[]],[\"app\",{\"sourceInterval\":[415,418]},\"Seq\",[]]]],\"OverrideRuleBody\":[\"define\",{\"sourceInterval\":[422,491]},null,[],[\"seq\",{\"sourceInterval\":[445,491]},[\"opt\",{\"sourceInterval\":[445,449]},[\"terminal\",{\"sourceInterval\":[445,448]},\"|\"]],[\"app\",{\"sourceInterval\":[450,491]},\"NonemptyListOf\",[[\"app\",{\"sourceInterval\":[465,485]},\"OverrideTopLevelTerm\",[]],[\"terminal\",{\"sourceInterval\":[487,490]},\"|\"]]]]],\"OverrideTopLevelTerm_superSplice\":[\"define\",{\"sourceInterval\":[522,543]},null,[],[\"terminal\",{\"sourceInterval\":[522,527]},\"...\"]],\"OverrideTopLevelTerm\":[\"define\",{\"sourceInterval\":[495,562]},null,[],[\"alt\",{\"sourceInterval\":[522,562]},[\"app\",{\"sourceInterval\":[522,527]},\"OverrideTopLevelTerm_superSplice\",[]],[\"app\",{\"sourceInterval\":[550,562]},\"TopLevelTerm\",[]]]],\"Formals\":[\"define\",{\"sourceInterval\":[566,606]},null,[],[\"seq\",{\"sourceInterval\":[580,606]},[\"terminal\",{\"sourceInterval\":[580,583]},\"<\"],[\"app\",{\"sourceInterval\":[584,602]},\"ListOf\",[[\"app\",{\"sourceInterval\":[591,596]},\"ident\",[]],[\"terminal\",{\"sourceInterval\":[598,601]},\",\"]]],[\"terminal\",{\"sourceInterval\":[603,606]},\">\"]]],\"Params\":[\"define\",{\"sourceInterval\":[610,647]},null,[],[\"seq\",{\"sourceInterval\":[623,647]},[\"terminal\",{\"sourceInterval\":[623,626]},\"<\"],[\"app\",{\"sourceInterval\":[627,643]},\"ListOf\",[[\"app\",{\"sourceInterval\":[634,637]},\"Seq\",[]],[\"terminal\",{\"sourceInterval\":[639,642]},\",\"]]],[\"terminal\",{\"sourceInterval\":[644,647]},\">\"]]],\"Alt\":[\"define\",{\"sourceInterval\":[651,685]},null,[],[\"app\",{\"sourceInterval\":[661,685]},\"NonemptyListOf\",[[\"app\",{\"sourceInterval\":[676,679]},\"Seq\",[]],[\"terminal\",{\"sourceInterval\":[681,684]},\"|\"]]]],\"Seq\":[\"define\",{\"sourceInterval\":[689,704]},null,[],[\"star\",{\"sourceInterval\":[699,704]},[\"app\",{\"sourceInterval\":[699,703]},\"Iter\",[]]]],\"Iter_star\":[\"define\",{\"sourceInterval\":[719,736]},null,[],[\"seq\",{\"sourceInterval\":[719,727]},[\"app\",{\"sourceInterval\":[719,723]},\"Pred\",[]],[\"terminal\",{\"sourceInterval\":[724,727]},\"*\"]]],\"Iter_plus\":[\"define\",{\"sourceInterval\":[743,760]},null,[],[\"seq\",{\"sourceInterval\":[743,751]},[\"app\",{\"sourceInterval\":[743,747]},\"Pred\",[]],[\"terminal\",{\"sourceInterval\":[748,751]},\"+\"]]],\"Iter_opt\":[\"define\",{\"sourceInterval\":[767,783]},null,[],[\"seq\",{\"sourceInterval\":[767,775]},[\"app\",{\"sourceInterval\":[767,771]},\"Pred\",[]],[\"terminal\",{\"sourceInterval\":[772,775]},\"?\"]]],\"Iter\":[\"define\",{\"sourceInterval\":[708,794]},null,[],[\"alt\",{\"sourceInterval\":[719,794]},[\"app\",{\"sourceInterval\":[719,727]},\"Iter_star\",[]],[\"app\",{\"sourceInterval\":[743,751]},\"Iter_plus\",[]],[\"app\",{\"sourceInterval\":[767,775]},\"Iter_opt\",[]],[\"app\",{\"sourceInterval\":[790,794]},\"Pred\",[]]]],\"Pred_not\":[\"define\",{\"sourceInterval\":[809,824]},null,[],[\"seq\",{\"sourceInterval\":[809,816]},[\"terminal\",{\"sourceInterval\":[809,812]},\"~\"],[\"app\",{\"sourceInterval\":[813,816]},\"Lex\",[]]]],\"Pred_lookahead\":[\"define\",{\"sourceInterval\":[831,852]},null,[],[\"seq\",{\"sourceInterval\":[831,838]},[\"terminal\",{\"sourceInterval\":[831,834]},\"&\"],[\"app\",{\"sourceInterval\":[835,838]},\"Lex\",[]]]],\"Pred\":[\"define\",{\"sourceInterval\":[798,862]},null,[],[\"alt\",{\"sourceInterval\":[809,862]},[\"app\",{\"sourceInterval\":[809,816]},\"Pred_not\",[]],[\"app\",{\"sourceInterval\":[831,838]},\"Pred_lookahead\",[]],[\"app\",{\"sourceInterval\":[859,862]},\"Lex\",[]]]],\"Lex_lex\":[\"define\",{\"sourceInterval\":[876,892]},null,[],[\"seq\",{\"sourceInterval\":[876,884]},[\"terminal\",{\"sourceInterval\":[876,879]},\"#\"],[\"app\",{\"sourceInterval\":[880,884]},\"Base\",[]]]],\"Lex\":[\"define\",{\"sourceInterval\":[866,903]},null,[],[\"alt\",{\"sourceInterval\":[876,903]},[\"app\",{\"sourceInterval\":[876,884]},\"Lex_lex\",[]],[\"app\",{\"sourceInterval\":[899,903]},\"Base\",[]]]],\"Base_application\":[\"define\",{\"sourceInterval\":[918,979]},null,[],[\"seq\",{\"sourceInterval\":[918,963]},[\"app\",{\"sourceInterval\":[918,923]},\"ident\",[]],[\"opt\",{\"sourceInterval\":[924,931]},[\"app\",{\"sourceInterval\":[924,930]},\"Params\",[]]],[\"not\",{\"sourceInterval\":[932,963]},[\"alt\",{\"sourceInterval\":[934,962]},[\"seq\",{\"sourceInterval\":[934,948]},[\"opt\",{\"sourceInterval\":[934,944]},[\"app\",{\"sourceInterval\":[934,943]},\"ruleDescr\",[]]],[\"terminal\",{\"sourceInterval\":[945,948]},\"=\"]],[\"terminal\",{\"sourceInterval\":[951,955]},\":=\"],[\"terminal\",{\"sourceInterval\":[958,962]},\"+=\"]]]]],\"Base_range\":[\"define\",{\"sourceInterval\":[986,1041]},null,[],[\"seq\",{\"sourceInterval\":[986,1022]},[\"app\",{\"sourceInterval\":[986,1001]},\"oneCharTerminal\",[]],[\"terminal\",{\"sourceInterval\":[1002,1006]},\"..\"],[\"app\",{\"sourceInterval\":[1007,1022]},\"oneCharTerminal\",[]]]],\"Base_terminal\":[\"define\",{\"sourceInterval\":[1048,1106]},null,[],[\"app\",{\"sourceInterval\":[1048,1056]},\"terminal\",[]]],\"Base_paren\":[\"define\",{\"sourceInterval\":[1113,1168]},null,[],[\"seq\",{\"sourceInterval\":[1113,1124]},[\"terminal\",{\"sourceInterval\":[1113,1116]},\"(\"],[\"app\",{\"sourceInterval\":[1117,1120]},\"Alt\",[]],[\"terminal\",{\"sourceInterval\":[1121,1124]},\")\"]]],\"Base\":[\"define\",{\"sourceInterval\":[907,1168]},null,[],[\"alt\",{\"sourceInterval\":[918,1168]},[\"app\",{\"sourceInterval\":[918,963]},\"Base_application\",[]],[\"app\",{\"sourceInterval\":[986,1022]},\"Base_range\",[]],[\"app\",{\"sourceInterval\":[1048,1056]},\"Base_terminal\",[]],[\"app\",{\"sourceInterval\":[1113,1124]},\"Base_paren\",[]]]],\"ruleDescr\":[\"define\",{\"sourceInterval\":[1172,1231]},\"a rule description\",[],[\"seq\",{\"sourceInterval\":[1210,1231]},[\"terminal\",{\"sourceInterval\":[1210,1213]},\"(\"],[\"app\",{\"sourceInterval\":[1214,1227]},\"ruleDescrText\",[]],[\"terminal\",{\"sourceInterval\":[1228,1231]},\")\"]]],\"ruleDescrText\":[\"define\",{\"sourceInterval\":[1235,1266]},null,[],[\"star\",{\"sourceInterval\":[1255,1266]},[\"seq\",{\"sourceInterval\":[1256,1264]},[\"not\",{\"sourceInterval\":[1256,1260]},[\"terminal\",{\"sourceInterval\":[1257,1260]},\")\"]],[\"app\",{\"sourceInterval\":[1261,1264]},\"any\",[]]]]],\"caseName\":[\"define\",{\"sourceInterval\":[1270,1338]},null,[],[\"seq\",{\"sourceInterval\":[1285,1338]},[\"terminal\",{\"sourceInterval\":[1285,1289]},\"--\"],[\"star\",{\"sourceInterval\":[1290,1304]},[\"seq\",{\"sourceInterval\":[1291,1302]},[\"not\",{\"sourceInterval\":[1291,1296]},[\"terminal\",{\"sourceInterval\":[1292,1296]},\"\\n\"]],[\"app\",{\"sourceInterval\":[1297,1302]},\"space\",[]]]],[\"app\",{\"sourceInterval\":[1305,1309]},\"name\",[]],[\"star\",{\"sourceInterval\":[1310,1324]},[\"seq\",{\"sourceInterval\":[1311,1322]},[\"not\",{\"sourceInterval\":[1311,1316]},[\"terminal\",{\"sourceInterval\":[1312,1316]},\"\\n\"]],[\"app\",{\"sourceInterval\":[1317,1322]},\"space\",[]]]],[\"alt\",{\"sourceInterval\":[1326,1337]},[\"terminal\",{\"sourceInterval\":[1326,1330]},\"\\n\"],[\"lookahead\",{\"sourceInterval\":[1333,1337]},[\"terminal\",{\"sourceInterval\":[1334,1337]},\"}\"]]]]],\"name\":[\"define\",{\"sourceInterval\":[1342,1382]},\"a name\",[],[\"seq\",{\"sourceInterval\":[1363,1382]},[\"app\",{\"sourceInterval\":[1363,1372]},\"nameFirst\",[]],[\"star\",{\"sourceInterval\":[1373,1382]},[\"app\",{\"sourceInterval\":[1373,1381]},\"nameRest\",[]]]]],\"nameFirst\":[\"define\",{\"sourceInterval\":[1386,1418]},null,[],[\"alt\",{\"sourceInterval\":[1402,1418]},[\"terminal\",{\"sourceInterval\":[1402,1405]},\"_\"],[\"app\",{\"sourceInterval\":[1412,1418]},\"letter\",[]]]],\"nameRest\":[\"define\",{\"sourceInterval\":[1422,1452]},null,[],[\"alt\",{\"sourceInterval\":[1437,1452]},[\"terminal\",{\"sourceInterval\":[1437,1440]},\"_\"],[\"app\",{\"sourceInterval\":[1447,1452]},\"alnum\",[]]]],\"ident\":[\"define\",{\"sourceInterval\":[1456,1489]},\"an identifier\",[],[\"app\",{\"sourceInterval\":[1485,1489]},\"name\",[]]],\"terminal\":[\"define\",{\"sourceInterval\":[1493,1531]},null,[],[\"seq\",{\"sourceInterval\":[1508,1531]},[\"terminal\",{\"sourceInterval\":[1508,1512]},\"\\\"\"],[\"star\",{\"sourceInterval\":[1513,1526]},[\"app\",{\"sourceInterval\":[1513,1525]},\"terminalChar\",[]]],[\"terminal\",{\"sourceInterval\":[1527,1531]},\"\\\"\"]]],\"oneCharTerminal\":[\"define\",{\"sourceInterval\":[1535,1579]},null,[],[\"seq\",{\"sourceInterval\":[1557,1579]},[\"terminal\",{\"sourceInterval\":[1557,1561]},\"\\\"\"],[\"app\",{\"sourceInterval\":[1562,1574]},\"terminalChar\",[]],[\"terminal\",{\"sourceInterval\":[1575,1579]},\"\\\"\"]]],\"terminalChar\":[\"define\",{\"sourceInterval\":[1583,1660]},null,[],[\"alt\",{\"sourceInterval\":[1602,1660]},[\"app\",{\"sourceInterval\":[1602,1612]},\"escapeChar\",[]],[\"seq\",{\"sourceInterval\":[1621,1660]},[\"not\",{\"sourceInterval\":[1621,1626]},[\"terminal\",{\"sourceInterval\":[1622,1626]},\"\\\\\"]],[\"not\",{\"sourceInterval\":[1627,1632]},[\"terminal\",{\"sourceInterval\":[1628,1632]},\"\\\"\"]],[\"not\",{\"sourceInterval\":[1633,1638]},[\"terminal\",{\"sourceInterval\":[1634,1638]},\"\\n\"]],[\"range\",{\"sourceInterval\":[1639,1660]},\"\\u0000\",\"􏿿\"]]]],\"escapeChar_backslash\":[\"define\",{\"sourceInterval\":[1703,1758]},null,[],[\"terminal\",{\"sourceInterval\":[1703,1709]},\"\\\\\\\\\"]],\"escapeChar_doubleQuote\":[\"define\",{\"sourceInterval\":[1765,1822]},null,[],[\"terminal\",{\"sourceInterval\":[1765,1771]},\"\\\\\\\"\"]],\"escapeChar_singleQuote\":[\"define\",{\"sourceInterval\":[1829,1886]},null,[],[\"terminal\",{\"sourceInterval\":[1829,1835]},\"\\\\'\"]],\"escapeChar_backspace\":[\"define\",{\"sourceInterval\":[1893,1948]},null,[],[\"terminal\",{\"sourceInterval\":[1893,1898]},\"\\\\b\"]],\"escapeChar_lineFeed\":[\"define\",{\"sourceInterval\":[1955,2009]},null,[],[\"terminal\",{\"sourceInterval\":[1955,1960]},\"\\\\n\"]],\"escapeChar_carriageReturn\":[\"define\",{\"sourceInterval\":[2016,2076]},null,[],[\"terminal\",{\"sourceInterval\":[2016,2021]},\"\\\\r\"]],\"escapeChar_tab\":[\"define\",{\"sourceInterval\":[2083,2132]},null,[],[\"terminal\",{\"sourceInterval\":[2083,2088]},\"\\\\t\"]],\"escapeChar_unicodeCodePoint\":[\"define\",{\"sourceInterval\":[2139,2243]},null,[],[\"seq\",{\"sourceInterval\":[2139,2221]},[\"terminal\",{\"sourceInterval\":[2139,2145]},\"\\\\u{\"],[\"app\",{\"sourceInterval\":[2146,2154]},\"hexDigit\",[]],[\"opt\",{\"sourceInterval\":[2155,2164]},[\"app\",{\"sourceInterval\":[2155,2163]},\"hexDigit\",[]]],[\"opt\",{\"sourceInterval\":[2165,2174]},[\"app\",{\"sourceInterval\":[2165,2173]},\"hexDigit\",[]]],[\"opt\",{\"sourceInterval\":[2188,2197]},[\"app\",{\"sourceInterval\":[2188,2196]},\"hexDigit\",[]]],[\"opt\",{\"sourceInterval\":[2198,2207]},[\"app\",{\"sourceInterval\":[2198,2206]},\"hexDigit\",[]]],[\"opt\",{\"sourceInterval\":[2208,2217]},[\"app\",{\"sourceInterval\":[2208,2216]},\"hexDigit\",[]]],[\"terminal\",{\"sourceInterval\":[2218,2221]},\"}\"]]],\"escapeChar_unicodeEscape\":[\"define\",{\"sourceInterval\":[2250,2309]},null,[],[\"seq\",{\"sourceInterval\":[2250,2291]},[\"terminal\",{\"sourceInterval\":[2250,2255]},\"\\\\u\"],[\"app\",{\"sourceInterval\":[2256,2264]},\"hexDigit\",[]],[\"app\",{\"sourceInterval\":[2265,2273]},\"hexDigit\",[]],[\"app\",{\"sourceInterval\":[2274,2282]},\"hexDigit\",[]],[\"app\",{\"sourceInterval\":[2283,2291]},\"hexDigit\",[]]]],\"escapeChar_hexEscape\":[\"define\",{\"sourceInterval\":[2316,2371]},null,[],[\"seq\",{\"sourceInterval\":[2316,2339]},[\"terminal\",{\"sourceInterval\":[2316,2321]},\"\\\\x\"],[\"app\",{\"sourceInterval\":[2322,2330]},\"hexDigit\",[]],[\"app\",{\"sourceInterval\":[2331,2339]},\"hexDigit\",[]]]],\"escapeChar\":[\"define\",{\"sourceInterval\":[1664,2371]},\"an escape sequence\",[],[\"alt\",{\"sourceInterval\":[1703,2371]},[\"app\",{\"sourceInterval\":[1703,1709]},\"escapeChar_backslash\",[]],[\"app\",{\"sourceInterval\":[1765,1771]},\"escapeChar_doubleQuote\",[]],[\"app\",{\"sourceInterval\":[1829,1835]},\"escapeChar_singleQuote\",[]],[\"app\",{\"sourceInterval\":[1893,1898]},\"escapeChar_backspace\",[]],[\"app\",{\"sourceInterval\":[1955,1960]},\"escapeChar_lineFeed\",[]],[\"app\",{\"sourceInterval\":[2016,2021]},\"escapeChar_carriageReturn\",[]],[\"app\",{\"sourceInterval\":[2083,2088]},\"escapeChar_tab\",[]],[\"app\",{\"sourceInterval\":[2139,2221]},\"escapeChar_unicodeCodePoint\",[]],[\"app\",{\"sourceInterval\":[2250,2291]},\"escapeChar_unicodeEscape\",[]],[\"app\",{\"sourceInterval\":[2316,2339]},\"escapeChar_hexEscape\",[]]]],\"space\":[\"extend\",{\"sourceInterval\":[2375,2394]},null,[],[\"app\",{\"sourceInterval\":[2387,2394]},\"comment\",[]]],\"comment_singleLine\":[\"define\",{\"sourceInterval\":[2412,2458]},null,[],[\"seq\",{\"sourceInterval\":[2412,2443]},[\"terminal\",{\"sourceInterval\":[2412,2416]},\"//\"],[\"star\",{\"sourceInterval\":[2417,2429]},[\"seq\",{\"sourceInterval\":[2418,2427]},[\"not\",{\"sourceInterval\":[2418,2423]},[\"terminal\",{\"sourceInterval\":[2419,2423]},\"\\n\"]],[\"app\",{\"sourceInterval\":[2424,2427]},\"any\",[]]]],[\"lookahead\",{\"sourceInterval\":[2430,2443]},[\"alt\",{\"sourceInterval\":[2432,2442]},[\"terminal\",{\"sourceInterval\":[2432,2436]},\"\\n\"],[\"app\",{\"sourceInterval\":[2439,2442]},\"end\",[]]]]]],\"comment_multiLine\":[\"define\",{\"sourceInterval\":[2465,2501]},null,[],[\"seq\",{\"sourceInterval\":[2465,2487]},[\"terminal\",{\"sourceInterval\":[2465,2469]},\"/*\"],[\"star\",{\"sourceInterval\":[2470,2482]},[\"seq\",{\"sourceInterval\":[2471,2480]},[\"not\",{\"sourceInterval\":[2471,2476]},[\"terminal\",{\"sourceInterval\":[2472,2476]},\"*/\"]],[\"app\",{\"sourceInterval\":[2477,2480]},\"any\",[]]]],[\"terminal\",{\"sourceInterval\":[2483,2487]},\"*/\"]]],\"comment\":[\"define\",{\"sourceInterval\":[2398,2501]},null,[],[\"alt\",{\"sourceInterval\":[2412,2501]},[\"app\",{\"sourceInterval\":[2412,2443]},\"comment_singleLine\",[]],[\"app\",{\"sourceInterval\":[2465,2487]},\"comment_multiLine\",[]]]],\"tokens\":[\"define\",{\"sourceInterval\":[2505,2520]},null,[],[\"star\",{\"sourceInterval\":[2514,2520]},[\"app\",{\"sourceInterval\":[2514,2519]},\"token\",[]]]],\"token\":[\"define\",{\"sourceInterval\":[2524,2600]},null,[],[\"alt\",{\"sourceInterval\":[2532,2600]},[\"app\",{\"sourceInterval\":[2532,2540]},\"caseName\",[]],[\"app\",{\"sourceInterval\":[2543,2550]},\"comment\",[]],[\"app\",{\"sourceInterval\":[2553,2558]},\"ident\",[]],[\"app\",{\"sourceInterval\":[2561,2569]},\"operator\",[]],[\"app\",{\"sourceInterval\":[2572,2583]},\"punctuation\",[]],[\"app\",{\"sourceInterval\":[2586,2594]},\"terminal\",[]],[\"app\",{\"sourceInterval\":[2597,2600]},\"any\",[]]]],\"operator\":[\"define\",{\"sourceInterval\":[2604,2669]},null,[],[\"alt\",{\"sourceInterval\":[2615,2669]},[\"terminal\",{\"sourceInterval\":[2615,2619]},\"<:\"],[\"terminal\",{\"sourceInterval\":[2622,2625]},\"=\"],[\"terminal\",{\"sourceInterval\":[2628,2632]},\":=\"],[\"terminal\",{\"sourceInterval\":[2635,2639]},\"+=\"],[\"terminal\",{\"sourceInterval\":[2642,2645]},\"*\"],[\"terminal\",{\"sourceInterval\":[2648,2651]},\"+\"],[\"terminal\",{\"sourceInterval\":[2654,2657]},\"?\"],[\"terminal\",{\"sourceInterval\":[2660,2663]},\"~\"],[\"terminal\",{\"sourceInterval\":[2666,2669]},\"&\"]]],\"punctuation\":[\"define\",{\"sourceInterval\":[2673,2709]},null,[],[\"alt\",{\"sourceInterval\":[2687,2709]},[\"terminal\",{\"sourceInterval\":[2687,2690]},\"<\"],[\"terminal\",{\"sourceInterval\":[2693,2696]},\">\"],[\"terminal\",{\"sourceInterval\":[2699,2702]},\",\"],[\"terminal\",{\"sourceInterval\":[2705,2709]},\"--\"]]]}]);\n","import ohmGrammar from '../dist/ohm-grammar.js';\nimport {Builder} from './Builder.js';\nimport * as common from './common.js';\nimport * as errors from './errors.js';\nimport {Grammar} from './Grammar.js';\nimport * as pexprs from './pexprs.js';\n\nconst superSplicePlaceholder = Object.create(pexprs.PExpr.prototype);\n\nfunction namespaceHas(ns, name) {\n  // Look for an enumerable property, anywhere in the prototype chain.\n  for (const prop in ns) {\n    if (prop === name) return true;\n  }\n  return false;\n}\n\n// Returns a Grammar instance (i.e., an object with a `match` method) for\n// `tree`, which is the concrete syntax tree of a user-written grammar.\n// The grammar will be assigned into `namespace` under the name of the grammar\n// as specified in the source.\nexport function buildGrammar(match, namespace, optOhmGrammarForTesting) {\n  const builder = new Builder();\n  let decl;\n  let currentRuleName;\n  let currentRuleFormals;\n  let overriding = false;\n  const metaGrammar = optOhmGrammarForTesting || ohmGrammar;\n\n  // A visitor that produces a Grammar instance from the CST.\n  const helpers = metaGrammar.createSemantics().addOperation('visit', {\n    Grammars(grammarIter) {\n      return grammarIter.children.map(c => c.visit());\n    },\n    Grammar(id, s, _open, rules, _close) {\n      const grammarName = id.visit();\n      decl = builder.newGrammar(grammarName);\n      s.child(0) && s.child(0).visit();\n      rules.children.map(c => c.visit());\n      const g = decl.build();\n      g.source = this.source.trimmed();\n      if (namespaceHas(namespace, grammarName)) {\n        throw errors.duplicateGrammarDeclaration(g, namespace);\n      }\n      namespace[grammarName] = g;\n      return g;\n    },\n\n    SuperGrammar(_, n) {\n      const superGrammarName = n.visit();\n      if (superGrammarName === 'null') {\n        decl.withSuperGrammar(null);\n      } else {\n        if (!namespace || !namespaceHas(namespace, superGrammarName)) {\n          throw errors.undeclaredGrammar(superGrammarName, namespace, n.source);\n        }\n        decl.withSuperGrammar(namespace[superGrammarName]);\n      }\n    },\n\n    Rule_define(n, fs, d, _, b) {\n      currentRuleName = n.visit();\n      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];\n      // If there is no default start rule yet, set it now. This must be done before visiting\n      // the body, because it might contain an inline rule definition.\n      if (!decl.defaultStartRule && decl.ensureSuperGrammar() !== Grammar.ProtoBuiltInRules) {\n        decl.withDefaultStartRule(currentRuleName);\n      }\n      const body = b.visit();\n      const description = d.children.map(c => c.visit())[0];\n      const source = this.source.trimmed();\n      return decl.define(currentRuleName, currentRuleFormals, body, description, source);\n    },\n    Rule_override(n, fs, _, b) {\n      currentRuleName = n.visit();\n      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];\n\n      const source = this.source.trimmed();\n      decl.ensureSuperGrammarRuleForOverriding(currentRuleName, source);\n\n      overriding = true;\n      const body = b.visit();\n      overriding = false;\n      return decl.override(currentRuleName, currentRuleFormals, body, null, source);\n    },\n    Rule_extend(n, fs, _, b) {\n      currentRuleName = n.visit();\n      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];\n      const body = b.visit();\n      const source = this.source.trimmed();\n      return decl.extend(currentRuleName, currentRuleFormals, body, null, source);\n    },\n    RuleBody(_, terms) {\n      return builder.alt(...terms.visit()).withSource(this.source);\n    },\n    OverrideRuleBody(_, terms) {\n      const args = terms.visit();\n\n      // Check if the super-splice operator (`...`) appears in the terms.\n      const expansionPos = args.indexOf(superSplicePlaceholder);\n      if (expansionPos >= 0) {\n        const beforeTerms = args.slice(0, expansionPos);\n        const afterTerms = args.slice(expansionPos + 1);\n\n        // Ensure it appears no more than once.\n        afterTerms.forEach(t => {\n          if (t === superSplicePlaceholder) throw errors.multipleSuperSplices(t);\n        });\n\n        return new pexprs.Splice(\n            decl.superGrammar,\n            currentRuleName,\n            beforeTerms,\n            afterTerms,\n        ).withSource(this.source);\n      } else {\n        return builder.alt(...args).withSource(this.source);\n      }\n    },\n    Formals(opointy, fs, cpointy) {\n      return fs.visit();\n    },\n\n    Params(opointy, ps, cpointy) {\n      return ps.visit();\n    },\n\n    Alt(seqs) {\n      return builder.alt(...seqs.visit()).withSource(this.source);\n    },\n\n    TopLevelTerm_inline(b, n) {\n      const inlineRuleName = currentRuleName + '_' + n.visit();\n      const body = b.visit();\n      const source = this.source.trimmed();\n      const isNewRuleDeclaration = !(\n        decl.superGrammar && decl.superGrammar.rules[inlineRuleName]\n      );\n      if (overriding && !isNewRuleDeclaration) {\n        decl.override(inlineRuleName, currentRuleFormals, body, null, source);\n      } else {\n        decl.define(inlineRuleName, currentRuleFormals, body, null, source);\n      }\n      const params = currentRuleFormals.map(formal => builder.app(formal));\n      return builder.app(inlineRuleName, params).withSource(body.source);\n    },\n    OverrideTopLevelTerm_superSplice(_) {\n      return superSplicePlaceholder;\n    },\n\n    Seq(expr) {\n      return builder.seq(...expr.children.map(c => c.visit())).withSource(this.source);\n    },\n\n    Iter_star(x, _) {\n      return builder.star(x.visit()).withSource(this.source);\n    },\n    Iter_plus(x, _) {\n      return builder.plus(x.visit()).withSource(this.source);\n    },\n    Iter_opt(x, _) {\n      return builder.opt(x.visit()).withSource(this.source);\n    },\n\n    Pred_not(_, x) {\n      return builder.not(x.visit()).withSource(this.source);\n    },\n    Pred_lookahead(_, x) {\n      return builder.lookahead(x.visit()).withSource(this.source);\n    },\n\n    Lex_lex(_, x) {\n      return builder.lex(x.visit()).withSource(this.source);\n    },\n\n    Base_application(rule, ps) {\n      const params = ps.children.map(c => c.visit())[0] || [];\n      return builder.app(rule.visit(), params).withSource(this.source);\n    },\n    Base_range(from, _, to) {\n      return builder.range(from.visit(), to.visit()).withSource(this.source);\n    },\n    Base_terminal(expr) {\n      return builder.terminal(expr.visit()).withSource(this.source);\n    },\n    Base_paren(open, x, close) {\n      return x.visit();\n    },\n\n    ruleDescr(open, t, close) {\n      return t.visit();\n    },\n    ruleDescrText(_) {\n      return this.sourceString.trim();\n    },\n\n    caseName(_, space1, n, space2, end) {\n      return n.visit();\n    },\n\n    name(first, rest) {\n      return this.sourceString;\n    },\n    nameFirst(expr) {},\n    nameRest(expr) {},\n\n    terminal(open, cs, close) {\n      return cs.children.map(c => c.visit()).join('');\n    },\n\n    oneCharTerminal(open, c, close) {\n      return c.visit();\n    },\n\n    escapeChar(c) {\n      try {\n        return common.unescapeCodePoint(this.sourceString);\n      } catch (err) {\n        if (err instanceof RangeError && err.message.startsWith('Invalid code point ')) {\n          throw errors.invalidCodePoint(c);\n        }\n        throw err; // Rethrow\n      }\n    },\n\n    NonemptyListOf(x, _, xs) {\n      return [x.visit()].concat(xs.children.map(c => c.visit()));\n    },\n    EmptyListOf() {\n      return [];\n    },\n\n    _terminal() {\n      return this.sourceString;\n    },\n  });\n  return helpers(match).visit();\n}\n","import {makeRecipe} from '../src/main-kernel.js';\nexport default makeRecipe([\"grammar\",{\"source\":\"OperationsAndAttributes {\\n\\n  AttributeSignature =\\n    name\\n\\n  OperationSignature =\\n    name Formals?\\n\\n  Formals\\n    = \\\"(\\\" ListOf<name, \\\",\\\"> \\\")\\\"\\n\\n  name  (a name)\\n    = nameFirst nameRest*\\n\\n  nameFirst\\n    = \\\"_\\\"\\n    | letter\\n\\n  nameRest\\n    = \\\"_\\\"\\n    | alnum\\n\\n}\"},\"OperationsAndAttributes\",null,\"AttributeSignature\",{\"AttributeSignature\":[\"define\",{\"sourceInterval\":[29,58]},null,[],[\"app\",{\"sourceInterval\":[54,58]},\"name\",[]]],\"OperationSignature\":[\"define\",{\"sourceInterval\":[62,100]},null,[],[\"seq\",{\"sourceInterval\":[87,100]},[\"app\",{\"sourceInterval\":[87,91]},\"name\",[]],[\"opt\",{\"sourceInterval\":[92,100]},[\"app\",{\"sourceInterval\":[92,99]},\"Formals\",[]]]]],\"Formals\":[\"define\",{\"sourceInterval\":[104,143]},null,[],[\"seq\",{\"sourceInterval\":[118,143]},[\"terminal\",{\"sourceInterval\":[118,121]},\"(\"],[\"app\",{\"sourceInterval\":[122,139]},\"ListOf\",[[\"app\",{\"sourceInterval\":[129,133]},\"name\",[]],[\"terminal\",{\"sourceInterval\":[135,138]},\",\"]]],[\"terminal\",{\"sourceInterval\":[140,143]},\")\"]]],\"name\":[\"define\",{\"sourceInterval\":[147,187]},\"a name\",[],[\"seq\",{\"sourceInterval\":[168,187]},[\"app\",{\"sourceInterval\":[168,177]},\"nameFirst\",[]],[\"star\",{\"sourceInterval\":[178,187]},[\"app\",{\"sourceInterval\":[178,186]},\"nameRest\",[]]]]],\"nameFirst\":[\"define\",{\"sourceInterval\":[191,223]},null,[],[\"alt\",{\"sourceInterval\":[207,223]},[\"terminal\",{\"sourceInterval\":[207,210]},\"_\"],[\"app\",{\"sourceInterval\":[217,223]},\"letter\",[]]]],\"nameRest\":[\"define\",{\"sourceInterval\":[227,257]},null,[],[\"alt\",{\"sourceInterval\":[242,257]},[\"terminal\",{\"sourceInterval\":[242,245]},\"_\"],[\"app\",{\"sourceInterval\":[252,257]},\"alnum\",[]]]]}]);\n","import operationsAndAttributesGrammar from '../dist/operations-and-attributes.js';\nimport {Grammar} from './Grammar.js';\nimport {Semantics} from './Semantics.js';\n\ninitBuiltInSemantics(Grammar.BuiltInRules);\ninitPrototypeParser(operationsAndAttributesGrammar); // requires BuiltInSemantics\n\nfunction initBuiltInSemantics(builtInRules) {\n  const actions = {\n    empty() {\n      return this.iteration();\n    },\n    nonEmpty(first, _, rest) {\n      return this.iteration([first].concat(rest.children));\n    },\n  };\n\n  Semantics.BuiltInSemantics = Semantics.createSemantics(builtInRules, null).addOperation(\n      'asIteration',\n      {\n        emptyListOf: actions.empty,\n        nonemptyListOf: actions.nonEmpty,\n        EmptyListOf: actions.empty,\n        NonemptyListOf: actions.nonEmpty,\n      },\n  );\n}\n\nfunction initPrototypeParser(grammar) {\n  Semantics.prototypeGrammarSemantics = grammar.createSemantics().addOperation('parse', {\n    AttributeSignature(name) {\n      return {\n        name: name.parse(),\n        formals: [],\n      };\n    },\n    OperationSignature(name, optFormals) {\n      return {\n        name: name.parse(),\n        formals: optFormals.children.map(c => c.parse())[0] || [],\n      };\n    },\n    Formals(oparen, fs, cparen) {\n      return fs.asIteration().children.map(c => c.parse());\n    },\n    name(first, rest) {\n      return this.sourceString;\n    },\n  });\n  Semantics.prototypeGrammar = grammar;\n}\n","export function findIndentation(input) {\n  let pos = 0;\n  const stack = [0];\n  const topOfStack = () => stack[stack.length - 1];\n\n  const result = {};\n\n  const regex = /( *).*(?:$|\\r?\\n|\\r)/g;\n  let match;\n  while ((match = regex.exec(input)) != null) {\n    const [line, indent] = match;\n\n    // The last match will always have length 0. In every other case, some\n    // characters will be matched (possibly only the end of line chars).\n    if (line.length === 0) break;\n\n    const indentSize = indent.length;\n    const prevSize = topOfStack();\n\n    const indentPos = pos + indentSize;\n\n    if (indentSize > prevSize) {\n      // Indent -- always only 1.\n      stack.push(indentSize);\n      result[indentPos] = 1;\n    } else if (indentSize < prevSize) {\n      // Dedent -- can be multiple levels.\n      const prevLength = stack.length;\n      while (topOfStack() !== indentSize) {\n        stack.pop();\n      }\n      result[indentPos] = -1 * (prevLength - stack.length);\n    }\n    pos += line.length;\n  }\n  // Ensure that there is a matching DEDENT for every remaining INDENT.\n  if (stack.length > 1) {\n    result[pos] = 1 - stack.length;\n  }\n  return result;\n}\n","import BuiltInRules from '../dist/built-in-rules.js';\nimport {Builder} from '../src/Builder.js';\nimport {Failure} from '../src/Failure.js';\nimport {TerminalNode} from '../src/nodes.js';\nimport * as pexprs from '../src/pexprs.js';\nimport {findIndentation} from './findIndentation.js';\nimport {InputStream} from './InputStream.js';\n\nconst INDENT_DESCRIPTION = 'an indented block';\nconst DEDENT_DESCRIPTION = 'a dedent';\n\n// A sentinel value that is out of range for both charCodeAt() and codePointAt().\nconst INVALID_CODE_POINT = 0x10ffff + 1;\n\nclass InputStreamWithIndentation extends InputStream {\n  constructor(state) {\n    super(state.input);\n    this.state = state;\n  }\n\n  _indentationAt(pos) {\n    return this.state.userData[pos] || 0;\n  }\n\n  atEnd() {\n    return super.atEnd() && this._indentationAt(this.pos) === 0;\n  }\n\n  next() {\n    if (this._indentationAt(this.pos) !== 0) {\n      this.examinedLength = Math.max(this.examinedLength, this.pos);\n      return undefined;\n    }\n    return super.next();\n  }\n\n  nextCharCode() {\n    if (this._indentationAt(this.pos) !== 0) {\n      this.examinedLength = Math.max(this.examinedLength, this.pos);\n      return INVALID_CODE_POINT;\n    }\n    return super.nextCharCode();\n  }\n\n  nextCodePoint() {\n    if (this._indentationAt(this.pos) !== 0) {\n      this.examinedLength = Math.max(this.examinedLength, this.pos);\n      return INVALID_CODE_POINT;\n    }\n    return super.nextCodePoint();\n  }\n}\n\nclass Indentation extends pexprs.PExpr {\n  constructor(isIndent = true) {\n    super();\n    this.isIndent = isIndent;\n  }\n\n  allowsSkippingPrecedingSpace() {\n    return true;\n  }\n\n  eval(state) {\n    const {inputStream} = state;\n    const pseudoTokens = state.userData;\n    state.doNotMemoize = true;\n\n    const origPos = inputStream.pos;\n\n    const sign = this.isIndent ? 1 : -1;\n    const count = (pseudoTokens[origPos] || 0) * sign;\n    if (count > 0) {\n      // Update the count to consume the pseudotoken.\n      state.userData = Object.create(pseudoTokens);\n      state.userData[origPos] -= sign;\n\n      state.pushBinding(new TerminalNode(0), origPos);\n      return true;\n    } else {\n      state.processFailure(origPos, this);\n      return false;\n    }\n  }\n\n  getArity() {\n    return 1;\n  }\n\n  _assertAllApplicationsAreValid(ruleName, grammar) {}\n\n  _isNullable(grammar, memo) {\n    return false;\n  }\n\n  assertChoicesHaveUniformArity(ruleName) {}\n\n  assertIteratedExprsAreNotNullable(grammar) {}\n\n  introduceParams(formals) {\n    return this;\n  }\n\n  substituteParams(actuals) {\n    return this;\n  }\n\n  toString() {\n    return this.isIndent ? 'indent' : 'dedent';\n  }\n\n  toDisplayString() {\n    return this.toString();\n  }\n\n  toFailure(grammar) {\n    const description = this.isIndent ? INDENT_DESCRIPTION : DEDENT_DESCRIPTION;\n    return new Failure(this, description, 'description');\n  }\n}\n\n// Create a new definition for `any` that can consume indent & dedent.\nconst applyIndent = new pexprs.Apply('indent');\nconst applyDedent = new pexprs.Apply('dedent');\nconst newAnyBody = new pexprs.Splice(BuiltInRules, 'any', [applyIndent, applyDedent], []);\n\nexport const IndentationSensitive = new Builder()\n    .newGrammar('IndentationSensitive')\n    .withSuperGrammar(BuiltInRules)\n    .define('indent', [], new Indentation(true), INDENT_DESCRIPTION, undefined, true)\n    .define('dedent', [], new Indentation(false), DEDENT_DESCRIPTION, undefined, true)\n    .extend('any', [], newAnyBody, 'any character', undefined)\n    .build();\n\nObject.assign(IndentationSensitive, {\n  _matchStateInitializer(state) {\n    state.userData = findIndentation(state.input);\n    state.inputStream = new InputStreamWithIndentation(state);\n  },\n  supportsIncrementalParsing: false,\n});\n","import ohmGrammar from '../dist/ohm-grammar.js';\nimport {buildGrammar} from './buildGrammar.js';\nimport * as common from './common.js';\nimport * as errors from './errors.js';\nimport {Grammar} from './Grammar.js';\nimport * as pexprs from './pexprs.js';\nimport * as util from './util.js';\n\n// Late initialization for stuff that is bootstrapped.\n\nimport './semanticsDeferredInit.js'; // TODO: Clean this up.\nGrammar.initApplicationParser(ohmGrammar, buildGrammar);\n\nconst isBuffer = obj =>\n  !!obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj);\n\nfunction compileAndLoad(source, namespace) {\n  const m = ohmGrammar.match(source, 'Grammars');\n  if (m.failed()) {\n    throw errors.grammarSyntaxError(m);\n  }\n  return buildGrammar(m, namespace);\n}\n\nexport function grammar(source, optNamespace) {\n  const ns = grammars(source, optNamespace);\n\n  // Ensure that the source contained no more than one grammar definition.\n  const grammarNames = Object.keys(ns);\n  if (grammarNames.length === 0) {\n    throw new Error('Missing grammar definition');\n  } else if (grammarNames.length > 1) {\n    const secondGrammar = ns[grammarNames[1]];\n    const interval = secondGrammar.source;\n    throw new Error(\n        util.getLineAndColumnMessage(interval.sourceString, interval.startIdx) +\n        'Found more than one grammar definition -- use ohm.grammars() instead.',\n    );\n  }\n  return ns[grammarNames[0]]; // Return the one and only grammar.\n}\n\nexport function grammars(source, optNamespace) {\n  const ns = Object.create(optNamespace || {});\n  if (typeof source !== 'string') {\n    // For convenience, detect Node.js Buffer objects and automatically call toString().\n    if (isBuffer(source)) {\n      source = source.toString();\n    } else {\n      throw new TypeError(\n          'Expected string as first argument, got ' + common.unexpectedObjToString(source),\n      );\n    }\n  }\n  compileAndLoad(source, ns);\n  return ns;\n}\n\n// This is used by ohm-editor to instantiate grammars after incremental\n// parsing, which is not otherwise supported in the public API.\nexport {buildGrammar as _buildGrammar};\n\nexport * from './main-kernel.js';\nexport {IndentationSensitive as ExperimentalIndentationSensitive} from './IndentationSensitive.js';\nexport {ohmGrammar};\nexport {pexprs};\nexport {version} from './version.js';\n"],"names":["abstract","optMethodName","methodName","assert","cond","message","defineLazyProperty","obj","propName","getterFn","memo","clone","repeatFn","fn","n","arr","repeatStr","str","repeat","x","getDuplicates","array","duplicates","idx","copyWithoutDuplicates","noDuplicates","entry","isSyntactic","ruleName","firstChar","isLexical","padLeft","len","optChar","ch","StringBuffer","escapeUnicode","unescapeCodePoint","s","unexpectedObjToString","baseToString","typeName","common","UnicodeCategories","PExpr","interval","any","end","Terminal","Range","from","to","Param","index","Alt","terms","Extend","superGrammar","name","body","origBody","Splice","beforeTerms","afterTerms","Seq","factors","Iter","expr","Star","Plus","Opt","Not","Lookahead","Lex","Apply","args","common.isSyntactic","UnicodeChar","category","createError","optInterval","e","intervalSourcesDontMatch","grammarSyntaxError","matchFailure","undeclaredGrammar","grammarName","namespace","duplicateGrammarDeclaration","grammar","grammarDoesNotSupportIncrementalParsing","undeclaredRule","cannotOverrideUndeclaredRule","optSource","cannotExtendUndeclaredRule","duplicateRuleDeclaration","declGrammarName","wrongNumberOfParameters","expected","actual","source","wrongNumberOfArguments","duplicateParameterNames","invalidParameter","syntacticVsLexicalNote","applicationOfSyntacticRuleFromLexicalContext","applyExpr","applySyntacticWithLexicalRuleApplication","unnecessaryExperimentalApplySyntactic","incorrectArgumentType","expectedType","multipleSuperSplices","invalidCodePoint","applyWrapper","node","digitIntervals","d","fullInterval","kleeneExprHasNullableOperand","kleeneExpr","applicationStack","actuals","stackTrace","app","pexprs.Apply","inconsistentArity","multipleErrors","errors","messages","missingSemanticAction","ctorName","type","stack","info","ans","moreInfo","throwErrors","padNumbersToEqualLength","maxLen","common.padLeft","strcpy","dest","src","offset","origDestLen","start","lineAndColumnToMessage","ranges","lineAndCol","sb","common.StringBuffer","lineNumbers","appendLine","num","content","prefix","lineLen","indicationLine","i","startIdx","endIdx","common.assert","lineStartOffset","gutterWidth","builtInRulesCallbacks","awaitBuiltInRules","cb","announceBuiltInRules","getLineAndColumn","lineNum","colNum","currOffset","nextLine","prevLine","prevLineStartOffset","c","lineEndOffset","nextLineEndOffset","line","getLineAndColumnMessage","uniqueId","idCounter","Interval","sourceString","intervals","util.getLineAndColumn","range","util.getLineAndColumnMessage","that","errors.intervalSourcesDontMatch","contents","newStartIdx","firstInterval","MAX_CHAR_CODE","InputStream","nextChar","cp","optIgnoreCase","optEndIdx","MatchResult","matcher","input","startExpr","cst","cstOffset","rightmostFailurePosition","optRecordedFailures","common.defineLazyProperty","detail","errorInfo","matchResultWithFailures","failures","failure","pos","PosInfo","application","headApplication","memoRec","applicationMemoKeyStack","indexOfFirstInvolvedRule","involvedApplicationMemoKeys","applicationMemoKey","memoKey","invalidatedIdx","k","BALLOT_X","CHECK_MARK","DOT_OPERATOR","RIGHTWARDS_DOUBLE_ARROW","SYMBOL_FOR_HORIZONTAL_TABULATION","SYMBOL_FOR_LINE_FEED","SYMBOL_FOR_CARRIAGE_RETURN","Flags","spaces","common.repeat","getInputExcerpt","excerpt","asEscapedString","Trace","pos1","pos2","succeeded","bindings","optChildren","ruleBodyTrace","value","visitorObjOrFn","optThisArg","visitor","_walk","parent","depth","recurse","child","mask","val","pexprs.PExpr","pexprs.any","pexprs.end","pexprs.Terminal","pexprs.Range","pexprs.UnicodeChar","pexprs.Alt","pexprs.Iter","pexprs.Lex","pexprs.Lookahead","pexprs.Not","pexprs.Param","pexprs.Seq","BuiltInRules","util.awaitBuiltInRules","g","lexifyCount","skipSyntacticCheck","ruleInfo","isContextSyntactic","errors.undeclaredRule","errors.applicationOfSyntacticRuleFromLexicalContext","errors.wrongNumberOfArguments","isBuiltInApplySyntactic","errors.incorrectArgumentType","arg","errors.applySyntacticWithLexicalRuleApplication","errors.unnecessaryExperimentalApplySyntactic","errors.invalidParameter","arity","term","otherArity","errors.inconsistentArity","pexprs.Extend","actualArity","expectedArity","errors.kleeneExprHasNullableOperand","pexprs.Opt","Node","matchLength","childIdx","TerminalNode","NonterminalNode","children","childOffsets","common.isLexical","IterationNode","isOptional","common.abstract","state","inputStream","origPos","factor","cols","colOffsets","numMatches","prevPos","row","rowOffsets","lastCol","lastColOffsets","endOffset","caller","posInfo","currentLeftRecursion","origPosInfo","description","origInputStreamExaminedLength","currentLR","isHeadOfLeftRecursion","offsets","lrMemoRec","newValue","seedTrace","getMetaInfo","grammarInterval","metaInfo","adjusted","formals","pexprs.Splice","pexprs.Star","pexprs.Plus","key","inlined","isRestrictedJSIdentifier","resolveDuplicatedNames","argumentNameList","count","argName","dupArgName","subscript","firstArgIndex","noDupCheck","termArgNameLists","numArgs","colIdx","col","rowIdx","uniqueNames","factorArgumentNameList","exprArgumentString","ps","isValidType","Failure","pexpr","text","t","f","CaseInsensitiveTerminal","param","terminal","matchStr","builtInApplySyntacticBody","builtInRules","applySpaces","MatchState","optPositionToRecordFailures","optNode","currentApplication","newLength","shouldCloneIfNew","memoRecRightmostFailurePosition","origNumBindings","origUserData","origRecordedFailures","memoPos","origTrace","traceEntry","rightmostFailures","matchResult","rootTrace","Matcher","prevInput","memoTable","restOfMemoTable","optStartApplicationStr","options","opts","applicationStr","startApp","globalActionStack","hasOwnProperty","prop","Wrapper","sourceInterval","baseInterval","attributeName","childWrapper","childNode","base","optChildWrappers","childWrappers","childNodes","iter","wrapper","Semantics","superSemantics","self","util.uniqueId","semanticsOnly","hasSuperSemantics","superSemanticsGrammar","relatedGrammar","semanticOperations","actionDict","builtInDefault","signature","method","srcArray","actionName","typePlural","parsedNameAndFormalArgs","parseSignature","newDefaultAction","doIt","realActionDict","Operation","Attribute","thisThing","argsObj","formal","oldArgs","inheritedFormals","inheritedActionDict","newActionDict","optBaseInterval","r","errors.missingSemanticAction","optSuperSemantics","proxy","common.unexpectedObjToString","operationOrAttributeName","action","semantic","semantics","nodeWrapper","actionFn","SPECIAL_ACTION_NAMES","getSortedRuleValues","jsonToJS","ohmGrammar","buildGrammar","Grammar","rules","optDefaultStartRule","myRules","otherRules","rule","optStartApplication","m","what","problems","v","details","prettyProblems","problem","error","superGrammarExpr","startRule","isDefinition","operation","bodyRecipe","superGrammarOutput","recipeElements","first","errors.wrongNumberOfParameters","pexprs.CaseInsensitiveTerminal","builderFn","GrammarDecl","errors.cannotOverrideUndeclaredRule","errors.duplicateParameterNames","expectedFormals","expectedNumFormals","primitive","grammarErrors","grammarHasInvalidApplications","errors.throwErrors","errors.duplicateRuleDeclaration","descIgnored","fragment","errors.cannotExtendUndeclaredRule","Builder","defaultStartRule","gDecl","ruleRecipe","termArgs","factorArgs","optParams","recipe","result","makeRecipe","superSplicePlaceholder","namespaceHas","ns","match","optOhmGrammarForTesting","builder","decl","currentRuleName","currentRuleFormals","overriding","grammarIter","id","_open","_close","errors.duplicateGrammarDeclaration","_","superGrammarName","errors.undeclaredGrammar","fs","b","expansionPos","errors.multipleSuperSplices","opointy","cpointy","seqs","inlineRuleName","isNewRuleDeclaration","params","open","close","space1","space2","rest","cs","common.unescapeCodePoint","err","errors.invalidCodePoint","xs","operationsAndAttributesGrammar","initBuiltInSemantics","initPrototypeParser","actions","optFormals","oparen","cparen","findIndentation","topOfStack","regex","indent","indentSize","prevSize","indentPos","prevLength","INDENT_DESCRIPTION","DEDENT_DESCRIPTION","INVALID_CODE_POINT","InputStreamWithIndentation","Indentation","isIndent","pseudoTokens","sign","applyIndent","applyDedent","newAnyBody","IndentationSensitive","isBuffer","compileAndLoad","errors.grammarSyntaxError","optNamespace","grammars","grammarNames"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]}