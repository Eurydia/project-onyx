{"version":3,"file":"index-DC15vHoa.js","sources":["../../src/types/ast.ts","../../src/assets/ohm.ts","../../src/core/interpreter/parser.ts","../../src/components/StyledLatex.tsx","../../src/components/StyledTooltipButton.tsx","../../src/components/EditorRibbonInsert.tsx","../../src/components/EditorRibbon.tsx","../../src/components/EditorSimplConfigGroup.tsx","../../src/components/EditorTextField.tsx","../../src/components/Editor.tsx","../../src/core/tree/conversion.ts","../../src/core/tree/expr/augment.ts","../../src/components/LatexDisplay.tsx","../../src/core/tree/expr/evaluate.ts","../../src/core/tree/expr/latex.ts","../../src/components/PlaygroundDialogConfig.tsx","../../src/components/PlaygroundDialog.tsx","../../src/components/StyledIconButton.tsx","../../src/components/PlaygroundPlaybackControl.tsx","../../src/components/StyledFAB.tsx","../../src/components/TreeGraphLink.tsx","../../src/components/TreeGraphNode.tsx","../../src/components/TreeGraph.tsx","../../src/components/Playground.tsx","../../src/core/tree/syntax/normalize.ts","../../src/core/tree/syntax/compare.ts","../../src/core/tree/syntax/simplify.ts","../../src/locales/en/translation.ts","../../src/locales/th/translation.ts","../../src/locales/config.ts","../../src/views/EditorView.tsx","../../src/assets/blogs/BooleanAlgebraSummary/en.txt","../../src/assets/blogs/UserManual/en.txt","../../src/components/StyledMarkdown.tsx","../../src/hooks/useFetchMarkdown.ts","../../src/views/TheoremBlogView.tsx","../../src/App/theme.ts","../../src/App/App.tsx","../../src/main.tsx"],"sourcesContent":["export type ExprTree = {\r\n  label: string;\r\n  isError?: boolean | undefined;\r\n  children: ExprTree[];\r\n  fn: (table: Map<string, boolean>) => boolean;\r\n  order: number;\r\n};\r\n\r\nexport enum SyntaxTreeNodeKind {\r\n  IDEN = \"IDEN\",\r\n  UNARY = \"UNARY\",\r\n  BINARY = \"BINARY\",\r\n}\r\n\r\nexport enum Operator {\r\n  IFF = \"IFF\",\r\n  IMPL = \"IMPL\",\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  NOT = \"NOT\",\r\n}\r\n\r\nexport type SyntaxTreeNodeId = {\r\n  nodeType: SyntaxTreeNodeKind.IDEN;\r\n  symbol: string;\r\n};\r\nexport type SyntaxTreeNodeBinary = {\r\n  nodeType: SyntaxTreeNodeKind.BINARY;\r\n  operator: Exclude<Operator, Operator.NOT>;\r\n  left: SyntaxTree;\r\n  right: SyntaxTree;\r\n};\r\nexport type SyntaxTreeNodeUnary = {\r\n  nodeType: SyntaxTreeNodeKind.UNARY;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type SyntaxTree =\r\n  | SyntaxTreeNodeBinary\r\n  | SyntaxTreeNodeUnary\r\n  | SyntaxTreeNodeId;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n","import { Operator, SyntaxTreeNodeKind } from \"$types/ast\";\r\nimport * as ohm from \"ohm-js\";\r\n\r\nexport const grammar = ohm.grammar(String.raw`\r\nBooleanExpressions {\r\n  Expression\r\n    = Iff \r\n\r\n  Iff\r\n    = Implies (iff_sym Implies)*\r\n\r\n  Implies\r\n    = Or (implies_sym Or)*\r\n\r\n  Or\r\n    = And (or_sym And)*\r\n\r\n  And\r\n    = Not (and_sym Not)*\r\n\r\n  Not\r\n    = not_sym Not                   --not\r\n    | Primary\r\n\r\n  Primary\r\n    = \"(\" Expression \")\"          --group\r\n    | identifier                  --variable\r\n\r\n  identifier\r\n    = letter+\r\n  \r\n  iff_sym \r\n    = \"iff\"\r\n    | \"⇔\"\r\n  \r\n  implies_sym \r\n    = \"implies\"\r\n    | \"⇒\"\r\n  \r\n  or_sym\r\n    = \"or\"\r\n    | \"∨\"\r\n\r\n  and_sym\r\n    = \"and\"\r\n    | \"∧\"\r\n  \r\n  not_sym\r\n    = \"not\"\r\n    | \"¬\"\r\n}\r\n`);\r\n\r\nexport const semantics = grammar.createSemantics();\r\nsemantics.addOperation(\"buildTree\", {\r\n  Expression(e) {\r\n    return e.buildTree();\r\n  },\r\n\r\n  Iff(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (rightTree.length === 0) {\r\n      return leftTree;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: Operator.IFF,\r\n      left: leftTree,\r\n      right: rightTree[0],\r\n    };\r\n  },\r\n\r\n  Implies(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (rightTree.length === 0) {\r\n      return leftTree;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: Operator.IMPL,\r\n      left: leftTree,\r\n      right: rightTree[0],\r\n    };\r\n  },\r\n\r\n  Or(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (rightTree.length === 0) {\r\n      return leftTree;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: Operator.OR,\r\n      left: leftTree,\r\n      right: rightTree[0],\r\n    };\r\n  },\r\n\r\n  And(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n\r\n    if (rightTree.length === 0) {\r\n      return leftTree;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: Operator.AND,\r\n      left: leftTree,\r\n      right: rightTree[0],\r\n    };\r\n  },\r\n\r\n  Not_not(_, expr) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: expr.buildTree(),\r\n    };\r\n  },\r\n\r\n  Primary_group(_open, expr, _close) {\r\n    return expr.buildTree();\r\n  },\r\n\r\n  Primary_variable(id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.IDEN,\r\n      symbol: id.sourceString,\r\n    };\r\n  },\r\n\r\n  identifier(_) {\r\n    return this.sourceString;\r\n  },\r\n\r\n  _iter(...children) {\r\n    return children.map((n) => n.buildTree());\r\n  },\r\n});\r\n","import { grammar, semantics } from \"$assets/ohm\";\r\nimport { SyntaxTree } from \"$types/ast\";\r\nimport { Maybe } from \"$types/common\";\r\n\r\nexport const parse = (\r\n  content: string\r\n): Maybe<SyntaxTree, string> => {\r\n  const m = grammar.match(content);\r\n  if (m.succeeded()) {\r\n    const tree = semantics(m).buildTree();\r\n    return { ok: true, data: tree };\r\n  } else {\r\n    return {\r\n      ok: false,\r\n      other: m.shortMessage ?? \"\",\r\n    };\r\n  }\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport katex, { KatexOptions } from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  options?: KatexOptions;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { tex, options } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, options);\r\n    }\r\n  }, [ref, tex, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      sx={{\r\n        textWrap: \"nowrap\",\r\n      }}\r\n      component=\"span\"\r\n      overflow=\"auto\"\r\n    />\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonProps,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\n\r\ntype StyledTooltipButtonProps = {\r\n  onClick: () => void;\r\n  title: string;\r\n  variant: ButtonProps[\"variant\"];\r\n  children: ReactNode;\r\n  startIcon?: ReactNode;\r\n};\r\nexport const StyledTooltipButton: FC<\r\n  StyledTooltipButtonProps\r\n> = (props) => {\r\n  const { children, variant, startIcon, onClick, title } =\r\n    props;\r\n\r\n  return (\r\n    <Tooltip title={<Typography>{title}</Typography>}>\r\n      <Button\r\n        disableElevation\r\n        variant={variant}\r\n        startIcon={startIcon}\r\n        onClick={onClick}\r\n      >\r\n        {children}\r\n      </Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { ButtonGroup } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\nconst OPERATOR = [\r\n  {\r\n    name: \"negation\",\r\n    label: \"\\\\lnot\",\r\n    insertChar: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    name: \"conjunction\",\r\n    label: \"\\\\land\",\r\n    insertChar: \"\\u{2227}\",\r\n  },\r\n  {\r\n    name: \"disjunction\",\r\n    label: \"\\\\lor\",\r\n    insertChar: \"\\u{2228}\",\r\n  },\r\n  {\r\n    name: \"implication\",\r\n    label: \"\\\\implies\",\r\n    insertChar: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    name: \"equivalence\",\r\n    label: \"\\\\iff\",\r\n    insertChar: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonInsertProps = {\r\n  onInsertChar: (char: string) => void;\r\n};\r\nexport const EditorRibbonInsert: FC<\r\n  EditorRibbonInsertProps\r\n> = (props) => {\r\n  const { onInsertChar } = props;\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common.connectives\",\r\n  });\r\n\r\n  return (\r\n    <ButtonGroup\r\n      disableElevation\r\n      variant=\"outlined\"\r\n    >\r\n      {OPERATOR.map((btn, index) => (\r\n        <StyledTooltipButton\r\n          variant=\"outlined\"\r\n          key={\"insert-btn-\" + index}\r\n          title={t(btn.name)}\r\n          onClick={() => onInsertChar(btn.insertChar)}\r\n        >\r\n          <StyledLatex tex={btn.label} />\r\n        </StyledTooltipButton>\r\n      ))}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n","import { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport { Stack, Toolbar, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EditorRibbonInsert } from \"./EditorRibbonInsert\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\ntype EditorRibbonProps = {\r\n  onExecute: () => void;\r\n  onInsertChar: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { onExecute, onInsertChar } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Toolbar\r\n      variant=\"dense\"\r\n      disableGutters\r\n      sx={{\r\n        gap: 1,\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Stack\r\n        sx={{ width: \"100%\" }}\r\n        gap={1}\r\n        useFlexGap\r\n        flexWrap=\"wrap\"\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <EditorRibbonInsert onInsertChar={onInsertChar} />\r\n        <StyledTooltipButton\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={onExecute}\r\n          title={\"CTRL + ENTER\"}\r\n        >\r\n          {t(\"editor.run\")}\r\n        </StyledTooltipButton>\r\n      </Stack>\r\n      <Typography\r\n        color=\"primary\"\r\n        component=\"a\"\r\n        href=\"#user-manual\"\r\n        sx={{\r\n          textDecorationLine: \"underline\",\r\n        }}\r\n      >\r\n        {t(\"editor.howToUse\")}\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\n","import { Operator } from \"$types/ast\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SYMBOL_LABEL = new Map<Operator, string>([\r\n  [Operator.AND, \"conjunction\"],\r\n  [Operator.OR, \"disjunction\"],\r\n  [Operator.IMPL, \"implication\"],\r\n  [Operator.IFF, \"equivalence\"],\r\n]);\r\n\r\ntype EditorSimplConfigGroupProps = {\r\n  values: Map<Operator, boolean>;\r\n  onChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const EditorSimplConfigGroup: FC<\r\n  EditorSimplConfigGroupProps\r\n> = (props) => {\r\n  const { onChange, values } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      flexWrap=\"wrap\"\r\n      alignItems=\"center\"\r\n    >\r\n      <FormLabel>\r\n        <Typography color=\"textPrimary\">\r\n          {t(\"editor.allowedOperatorLabel\")}:\r\n        </Typography>\r\n      </FormLabel>\r\n      <FormControlLabel\r\n        disabled\r\n        checked\r\n        control={<Checkbox />}\r\n        label={t(\"common.connectives.negation\")}\r\n      />\r\n      {[...SYMBOL_LABEL.entries()].map(([k, l], index) => {\r\n        const checked = values.get(k) ?? false;\r\n        const label = t(`common.connectives.${l}`);\r\n\r\n        return (\r\n          <FormControlLabel\r\n            key={\"include-op\" + index}\r\n            label={label}\r\n            control={<Checkbox />}\r\n            checked={checked}\r\n            onChange={(_, v) => onChange(k, v)}\r\n          />\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n","import { TextField } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype EditorTextFieldProps = {\r\n  value: string;\r\n  rows: number;\r\n  onChange: (value: string) => void;\r\n  onKeyDown: (e: React.KeyboardEvent) => void;\r\n};\r\nexport const EditorTextField: FC<EditorTextFieldProps> = (\r\n  props\r\n) => {\r\n  const { rows, value, onChange, onKeyDown } = props;\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      multiline\r\n      rows={rows}\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      onKeyDown={onKeyDown}\r\n      slotProps={{\r\n        input: {\r\n          autoComplete: \"off\",\r\n          autoCorrect: \"off\",\r\n          autoCapitalize: \"none\",\r\n          spellCheck: false,\r\n          sx: {\r\n            fontFamily: \"monospace\",\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Operator } from \"$types/ast\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\nimport { EditorSimplConfigGroup } from \"./EditorSimplConfigGroup\";\r\nimport { EditorTextField } from \"./EditorTextField\";\r\n\r\ntype EditorProps = {\r\n  operators: Map<Operator, boolean>;\r\n  onExecute: (value: string) => void;\r\n  onOperatorChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const Editor: FC<EditorProps> = (props) => {\r\n  const { onExecute, onOperatorChange, operators } = props;\r\n\r\n  const [value, setValue] = useState(\r\n    \"not (p and q) iff (not p) or (not q)\"\r\n  );\r\n\r\n  const handleExecute = () => {\r\n    onExecute(value);\r\n  };\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    setValue((prev) => `${prev} ${char}`);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && e.ctrlKey) {\r\n      handleExecute();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon\r\n        onExecute={handleExecute}\r\n        onInsertChar={handleInsertChar}\r\n      />\r\n      <EditorTextField\r\n        value={value}\r\n        onChange={setValue}\r\n        onKeyDown={handleKeyDown}\r\n        rows={5}\r\n      />\r\n      <EditorSimplConfigGroup\r\n        values={operators}\r\n        onChange={onOperatorChange}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  ExprTree,\r\n  Operator,\r\n  SymbolTable,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/ast\";\r\n\r\nconst _syntaxTreeToLatex = (tree: SyntaxTree): string => {\r\n  const { nodeType } = tree;\r\n  if (nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    return tree.symbol;\r\n  }\r\n  if (nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    const { operand } = tree;\r\n    const value = _syntaxTreeToLatex(operand);\r\n    if (operand.nodeType === SyntaxTreeNodeKind.IDEN) {\r\n      return `\\\\lnot ${value}`;\r\n    }\r\n    return `\\\\lnot (${value})`;\r\n  }\r\n\r\n  const { left, right } = tree;\r\n\r\n  let labelLeft = _syntaxTreeToLatex(left);\r\n  if (left.nodeType === SyntaxTreeNodeKind.BINARY) {\r\n    labelLeft = `(${labelLeft})`;\r\n  }\r\n\r\n  let labelRight = _syntaxTreeToLatex(right);\r\n  if (right.nodeType === SyntaxTreeNodeKind.BINARY) {\r\n    labelRight = `(${labelRight})`;\r\n  }\r\n\r\n  let label = \"\";\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      break;\r\n    case Operator.IMPL:\r\n      label = \"\\\\implies\";\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      break;\r\n  }\r\n  return `${labelLeft} ${label} ${labelRight}`;\r\n};\r\n\r\nexport const syntaxTreeToLatex = (tree: SyntaxTree) => {\r\n  return _syntaxTreeToLatex(tree);\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  orderStart: number\r\n) => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    const exprNode: ExprTree = {\r\n      label: tree.symbol,\r\n      order: orderStart + 1,\r\n      fn: (t) => t.get(tree.symbol) ?? false,\r\n      children: [],\r\n    };\r\n    return exprNode;\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    const child = _syntaxTreetoExprTree(\r\n      tree.operand,\r\n      orderStart\r\n    );\r\n    const exprNode: ExprTree = {\r\n      label: \"\\\\lnot\",\r\n      children: [child],\r\n      fn: (t) => !child.fn(t),\r\n      order: child.order + 1,\r\n    };\r\n\r\n    return exprNode;\r\n  }\r\n\r\n  const left = _syntaxTreetoExprTree(tree.left, orderStart);\r\n  const right = _syntaxTreetoExprTree(\r\n    tree.right,\r\n    left.order\r\n  );\r\n\r\n  let label;\r\n  let fn: (t: SymbolTable) => boolean;\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      fn = (t) => left.fn(t) && right.fn(t);\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      fn = (t) => left.fn(t) || right.fn(t);\r\n      break;\r\n    case Operator.IMPL:\r\n      label = \"\\\\implies\";\r\n      fn = (t) => !left.fn(t) || right.fn(t);\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      fn = (t) => left.fn(t) === right.fn(t);\r\n      break;\r\n  }\r\n\r\n  const exprNode: ExprTree = {\r\n    label,\r\n    fn,\r\n    children: [left, right],\r\n    order: right.order + 1,\r\n  };\r\n  return exprNode;\r\n};\r\n\r\nexport const syntaxTreetoExprTree = (tree: SyntaxTree) => {\r\n  return _syntaxTreetoExprTree(tree, 1);\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nexport const augmentExprTree = (tree: ExprTree) => {\r\n  const { fn, order } = tree;\r\n  const augmented: ExprTree = {\r\n    order,\r\n    fn,\r\n    label: `\\\\S`,\r\n    children: [tree],\r\n  };\r\n  return augmented;\r\n};\r\n","import {\r\n  alpha,\r\n  Box,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype LatexDisplayProps = {\r\n  text: string | null;\r\n  emptyText: string;\r\n};\r\nexport const LatexDisplay: FC<LatexDisplayProps> = (\r\n  props\r\n) => {\r\n  const { text, emptyText } = props;\r\n  const { palette, shape } = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      paddingX={2}\r\n      paddingY={0.5}\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      minHeight={100} // Otherwise the size of the box will be smaller in its empty state\r\n      sx={{\r\n        borderRadius: shape.borderRadius,\r\n        backgroundColor: alpha(\r\n          palette.secondary.light,\r\n          0.4\r\n        ),\r\n      }}\r\n    >\r\n      {text === null ? (\r\n        <Typography component=\"span\">\r\n          <pre>{emptyText}</pre>\r\n        </Typography>\r\n      ) : (\r\n        <StyledLatex tex={text} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _exprTreeCollectSymbols = (\r\n  exprTree: ExprTree,\r\n  symbols: Set<string>\r\n): void => {\r\n  if (exprTree.isError) {\r\n    return symbols.clear();\r\n  }\r\n  if (exprTree.children.length === 0) {\r\n    symbols.add(exprTree.label);\r\n    return;\r\n  }\r\n  for (const child of exprTree.children) {\r\n    _exprTreeCollectSymbols(child, symbols);\r\n  }\r\n};\r\n\r\nexport const exprTreeCollectSymbols = (\r\n  exprTree: ExprTree\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  _exprTreeCollectSymbols(exprTree, symbols);\r\n  return symbols;\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _exprTreeToLatex = (exprTree: ExprTree): string => {\r\n  if (exprTree.isError) {\r\n    return exprTree.label;\r\n  }\r\n  if (exprTree.children.length === 0) {\r\n    return exprTree.label;\r\n  }\r\n\r\n  if (exprTree.children.length === 1) {\r\n    if (exprTree.label !== \"\\\\lnot\") {\r\n      return _exprTreeToLatex(exprTree.children[0]);\r\n    }\r\n    const child = exprTree.children[0];\r\n    let childLatex = _exprTreeToLatex(child);\r\n    if (child.children.length > 1) {\r\n      childLatex = `(${childLatex})`;\r\n    }\r\n    return `${exprTree.label} ${childLatex}`;\r\n  }\r\n  const left = exprTree.children[0];\r\n  const right = exprTree.children[1];\r\n  let leftLatex = _exprTreeToLatex(left);\r\n  if (left.children.length > 1) {\r\n    leftLatex = `(${leftLatex})`;\r\n  }\r\n  let rightLatex = _exprTreeToLatex(right);\r\n  if (right.children.length > 1) {\r\n    rightLatex = `(${rightLatex})`;\r\n  }\r\n  return `${leftLatex} ${exprTree.label} ${rightLatex}`;\r\n};\r\nexport const exprTreeToLatex = (\r\n  exprTree: ExprTree | null\r\n) => {\r\n  if (exprTree === null) {\r\n    return \"\";\r\n  }\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n","import {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype PlaygroundDialogConfigProps = {\r\n  table: Map<string, boolean>;\r\n  selected: Set<string>;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const PlaygroundDialogConfig: FC<\r\n  PlaygroundDialogConfigProps\r\n> = (props) => {\r\n  const { table, selected, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common\",\r\n  });\r\n\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={1}\r\n      width=\"100%\"\r\n    >\r\n      {[...selected].map((symbol) => (\r\n        <FormControl\r\n          key={\"symbol-\" + symbol}\r\n          fullWidth\r\n        >\r\n          <FormLabel\r\n            sx={{\r\n              width: \"100%\",\r\n              overflowX: \"auto\",\r\n            }}\r\n          >\r\n            <StyledLatex\r\n              tex={`\\\\text{\\`\\`$${symbol}$''}`}\r\n            />\r\n          </FormLabel>\r\n          <RadioGroup\r\n            row\r\n            value={table.get(symbol) ? \"T\" : \"F\"}\r\n            onChange={(e) =>\r\n              onChange(symbol, e.target.value === \"T\")\r\n            }\r\n          >\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"T\"\r\n              label={t(\"true\")}\r\n            />\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"F\"\r\n              label={t(\"false\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n","import { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/ast\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { PlaygroundDialogConfig } from \"./PlaygroundDialogConfig\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype PlaygroundDialogProps = {\r\n  node: ExprTree;\r\n  open: boolean;\r\n  value: Map<string, boolean>;\r\n  onChange: (k: string, v: boolean) => void;\r\n  onClose: () => void;\r\n};\r\nexport const PlaygroundDialog: FC<PlaygroundDialogProps> = (\r\n  props\r\n) => {\r\n  const { node, open, onClose, onChange, value } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const { palette, shape } = useTheme();\r\n\r\n  const selected = exprTreeCollectSymbols(node);\r\n\r\n  const evalValue = node.fn(value)\r\n    ? t(\"common.true\")\r\n    : t(\"common.false\");\r\n  const evalText = t(\"common.truthValue\");\r\n  const text = `${evalText}: ${evalValue}`;\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n      open={open}\r\n      scroll=\"body\"\r\n      onClose={onClose}\r\n      PaperProps={{\r\n        elevation: 0,\r\n        sx: {\r\n          borderRadius: shape.borderRadius,\r\n          borderStyle: \"solid\",\r\n          borderWidth: 4,\r\n          borderColor: palette.primary.main,\r\n        },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <StyledLatex\r\n          tex={exprTreeToLatex(node)}\r\n          options={{\r\n            displayMode: true,\r\n            output: \"htmlAndMathml\",\r\n          }}\r\n        />\r\n        <Typography fontStyle=\"italic\">{text}</Typography>\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n        <PlaygroundDialogConfig\r\n          selected={selected}\r\n          table={value}\r\n          onChange={onChange}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          disableElevation\r\n          disableRipple\r\n          variant=\"text\"\r\n          onClick={onClose}\r\n        >\r\n          {t(\"playground.dialog.close\")}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import {\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledIconButtonProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  onKeyPress: (e: KeyboardEvent<HTMLButtonElement>) => void;\r\n};\r\nexport const StyledIconButton: FC<StyledIconButtonProps> = (\r\n  props\r\n) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip\r\n      placement=\"top\"\r\n      title={<Typography>{title}</Typography>}\r\n    >\r\n      <span>\r\n        <IconButton\r\n          disableRipple={disabled}\r\n          color=\"primary\"\r\n          onClick={onClick}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledIconButton } from \"./StyledIconButton\";\r\n\r\ntype PlaygroundPlaybackControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  disabled: boolean;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n};\r\nexport const PlaygroundPlaybackControl: FC<\r\n  PlaygroundPlaybackControlProps\r\n> = (props) => {\r\n  const { disabled, maxValue, minValue, onChange, value } =\r\n    props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"playground.playback\",\r\n  });\r\n\r\n  const handleForward = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  const handleKeyPress = (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      handleForward();\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      handleRewind();\r\n    }\r\n  };\r\n\r\n  // There is a possibility for the ui to fall apart due to overflow\r\n  // **IF** the order is large enough eg 20 digits long\r\n  // in such a case, the label would over and pushes the forward arrow\r\n  // and the slider out of view\r\n  // but let's be real, we run into other problem any way\r\n  // if the evaluation of a tree that large\r\n  const maxLabel = disabled ? \"0\" : maxValue.toString();\r\n  const valueLabel = disabled\r\n    ? \"0\"\r\n    : value.toString().padStart(maxLabel.length, \"0\");\r\n  const label = `${valueLabel}/${maxLabel}`;\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      paddingX={2}\r\n      paddingY={1}\r\n    >\r\n      <StyledIconButton\r\n        disabled={value <= minValue}\r\n        title={t(\"rewind\")}\r\n        onClick={handleRewind}\r\n        onKeyPress={handleKeyPress}\r\n      >\r\n        <KeyboardArrowLeftRounded />\r\n      </StyledIconButton>\r\n      <Typography fontFamily=\"monospace\">\r\n        {label}\r\n      </Typography>\r\n      <StyledIconButton\r\n        disabled={value >= maxValue}\r\n        title={t(\"forward\")}\r\n        onKeyPress={handleKeyPress}\r\n        onClick={handleForward}\r\n      >\r\n        <KeyboardArrowRightRounded />\r\n      </StyledIconButton>\r\n      <Slider\r\n        disabled={disabled}\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Fab, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactElement } from \"react\";\r\n\r\ntype StyledFABProps = {\r\n  title: string;\r\n  onClick: () => void;\r\n  children: ReactElement;\r\n};\r\nexport const StyledFAB: FC<StyledFABProps> = (props) => {\r\n  const { children, onClick, title } = props;\r\n  return (\r\n    <Fab\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: 16,\r\n        bottom: 16,\r\n      }}\r\n    >\r\n      <Tooltip\r\n        placement=\"right\"\r\n        title={<Typography>{title}</Typography>}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    </Fab>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { ExprTree, SymbolTable } from \"$types/ast\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, MouseEvent, useEffect, useRef } from \"react\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  onClick: (node: ExprTree) => void;\r\n  order: number;\r\n  onMouseLeave: () => void;\r\n  onMouseEnter: (\r\n    x: number,\r\n    y: number,\r\n    data: (t: SymbolTable) => boolean\r\n  ) => void;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const {\r\n    order,\r\n    node,\r\n    onClick,\r\n    onMouseLeave,\r\n    onMouseEnter,\r\n  } = props;\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.label)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.label]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n\r\n  const handleMouseLeave = (\r\n    e: MouseEvent<SVGGElement> & MouseEvent\r\n  ) => {\r\n    e.stopPropagation();\r\n    onMouseLeave();\r\n  };\r\n\r\n  const handleMouseEnter = (\r\n    e: MouseEvent<SVGGElement> & MouseEvent\r\n  ) => {\r\n    e.stopPropagation();\r\n    onMouseEnter(x, y, data.fn);\r\n  };\r\n\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseEnter={handleMouseEnter}\r\n      onClick={() => onClick(data)}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        opacity={isNodeVisibleNow ? 1 : 0.5}\r\n        r={30}\r\n        fill={palette.secondary.light}\r\n        stroke={palette.primary.light}\r\n        strokeOpacity={0.8}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        color={palette.secondary.contrastText}\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n    </Group>\r\n  );\r\n};\r\n","import { ExprTree, SymbolTable } from \"$types/ast\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport {\r\n  TooltipWithBounds,\r\n  useTooltip,\r\n  useTooltipInPortal,\r\n} from \"@visx/tooltip\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledFAB } from \"./StyledFAB\";\r\nimport { TreeGraphLink } from \"./TreeGraphLink\";\r\nimport { TreeGraphNode } from \"./TreeGraphNode\";\r\n\r\ntype TreeGraphProps = {\r\n  symbolTable: SymbolTable;\r\n  tree: ExprTree;\r\n  order: number;\r\n  onNodeClick: (node: ExprTree) => void;\r\n  onKeyDown: (e: KeyboardEvent<SVGSVGElement>) => void;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const {\r\n    tree,\r\n    symbolTable,\r\n    order,\r\n    onNodeClick,\r\n    onKeyDown,\r\n  } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const data = hierarchy(tree);\r\n  const height = (data.height + 1) * 75;\r\n  const width = (data.leaves().length + 1) * 100;\r\n\r\n  const { containerRef } = useTooltipInPortal({\r\n    scroll: true,\r\n    detectBounds: true,\r\n  });\r\n\r\n  const {\r\n    showTooltip,\r\n    hideTooltip,\r\n    tooltipData,\r\n    tooltipOpen,\r\n    tooltipLeft,\r\n    tooltipTop,\r\n  } = useTooltip<(t: SymbolTable) => boolean>();\r\n\r\n  const handleMouseHoverNode = (\r\n    x: number,\r\n    y: number,\r\n    fn: (t: SymbolTable) => boolean\r\n  ) => {\r\n    showTooltip({\r\n      tooltipLeft: x,\r\n      tooltipTop: y,\r\n      tooltipData: fn,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Zoom<SVGSVGElement>\r\n      width={width}\r\n      height={height}\r\n      scaleXMin={1 / 3}\r\n      scaleXMax={4}\r\n      scaleYMin={1 / 3}\r\n      scaleYMax={4}\r\n    >\r\n      {(zoom) => (\r\n        <>\r\n          <svg\r\n            tabIndex={0} // Need tabindex otherwise svg will not send keyboard event\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            ref={zoom.containerRef}\r\n            style={{\r\n              touchAction: \"none\",\r\n            }}\r\n            onKeyDown={onKeyDown}\r\n          >\r\n            <g\r\n              ref={containerRef}\r\n              onTouchStart={zoom.dragStart}\r\n              onTouchMove={zoom.dragMove}\r\n              onTouchEnd={zoom.dragEnd}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={() => {\r\n                zoom.dragEnd();\r\n                hideTooltip();\r\n              }}\r\n              onMouseLeave={zoom.dragEnd}\r\n              transform={zoom.toString()}\r\n            >\r\n              <Tree\r\n                root={data}\r\n                size={[width, height]}\r\n              >\r\n                {(treeHeir) => (\r\n                  <Group>\r\n                    {treeHeir.links().map((link, i) => (\r\n                      <TreeGraphLink\r\n                        key={`link-${i}`}\r\n                        order={order}\r\n                        link={link}\r\n                      />\r\n                    ))}\r\n                    {treeHeir\r\n                      .descendants()\r\n                      .map((node, i) => (\r\n                        <TreeGraphNode\r\n                          key={`node-${i}`}\r\n                          order={order}\r\n                          node={node}\r\n                          onClick={onNodeClick}\r\n                          onMouseEnter={\r\n                            handleMouseHoverNode\r\n                          }\r\n                          onMouseLeave={hideTooltip}\r\n                        />\r\n                      ))}\r\n                  </Group>\r\n                )}\r\n              </Tree>\r\n            </g>\r\n          </svg>\r\n          <StyledFAB\r\n            onClick={zoom.center}\r\n            title={t(\"playground.graph.center\")}\r\n          >\r\n            <ControlCameraRounded />\r\n          </StyledFAB>\r\n          {!zoom.isDragging &&\r\n            tooltipOpen &&\r\n            tooltipData !== undefined &&\r\n            tooltipLeft !== undefined &&\r\n            tooltipTop !== undefined && (\r\n              <TooltipWithBounds\r\n                left={\r\n                  zoom.transformMatrix.scaleX *\r\n                    tooltipLeft +\r\n                  zoom.transformMatrix.translateX\r\n                }\r\n                top={\r\n                  zoom.transformMatrix.scaleY * tooltipTop +\r\n                  zoom.transformMatrix.translateY\r\n                }\r\n              >\r\n                <Typography>\r\n                  {tooltipData(symbolTable)\r\n                    ? t(\"common.true\")\r\n                    : t(\"common.false\")}\r\n                </Typography>\r\n              </TooltipWithBounds>\r\n            )}\r\n        </>\r\n      )}\r\n    </Zoom>\r\n  );\r\n};\r\n","import {\r\n  syntaxTreetoExprTree,\r\n  syntaxTreeToLatex,\r\n} from \"$core/tree/conversion\";\r\nimport { augmentExprTree } from \"$core/tree/expr/augment\";\r\nimport { ExprTree, SyntaxTree } from \"$types/ast\";\r\nimport { Maybe } from \"$types/common\";\r\nimport {\r\n  alpha,\r\n  Box,\r\n  Divider,\r\n  Stack,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  KeyboardEvent,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LatexDisplay } from \"./LatexDisplay\";\r\nimport { PlaygroundDialog } from \"./PlaygroundDialog\";\r\nimport { PlaygroundPlaybackControl } from \"./PlaygroundPlaybackControl\";\r\nimport { TreeGraph } from \"./TreeGraph\";\r\n\r\ntype PlaygroundProps = {\r\n  maybeTree: Maybe<SyntaxTree, string> | null;\r\n};\r\nexport const Playground: FC<PlaygroundProps> = (props) => {\r\n  const { maybeTree } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const { palette, shape } = useTheme();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [symbolTable, setSymbolTable] = useState(\r\n    new Map<string, boolean>()\r\n  );\r\n\r\n  const [order, setOrder] = useState(0);\r\n  const [maxOrder, setMaxOrder] = useState(0);\r\n\r\n  const [selectedNode, setSelectedNode] =\r\n    useState<ExprTree | null>(null);\r\n  const [exprTree, setExprTree] = useState<ExprTree | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (maybeTree === null || !maybeTree.ok) {\r\n      setOrder(0);\r\n      setMaxOrder(0);\r\n      setExprTree(null);\r\n      return;\r\n    }\r\n    const nextExprTree = syntaxTreetoExprTree(\r\n      maybeTree.data\r\n    );\r\n    setOrder(1);\r\n    setMaxOrder(nextExprTree.order + 1);\r\n    setExprTree(nextExprTree);\r\n  }, [maybeTree]);\r\n\r\n  const handleNodeClick = (node: ExprTree) => {\r\n    setDialogOpen(true);\r\n    setSelectedNode(node);\r\n  };\r\n\r\n  const handleTableChange = (k: string, v: boolean) => {\r\n    if (maybeTree === null || !maybeTree.ok) {\r\n      return;\r\n    }\r\n    setSymbolTable((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n    // Changing the truth value of the same tree should not cause the playback to reset\r\n    const nextExprTree = syntaxTreetoExprTree(\r\n      maybeTree.data\r\n    );\r\n    setExprTree(nextExprTree);\r\n  };\r\n\r\n  const handleOrderChange = (value: number) => {\r\n    setOrder(value);\r\n    if (containerRef.current !== null) {\r\n      containerRef.current.scrollIntoView();\r\n    }\r\n  };\r\n\r\n  const handleGraphKeyPress = (\r\n    e: KeyboardEvent<SVGSVGElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      setOrder((prev) => Math.min(maxOrder, prev + 1));\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      setOrder((prev) => Math.max(0, prev - 1));\r\n    }\r\n  };\r\n\r\n  let text: string | null = null;\r\n  if (maybeTree !== null) {\r\n    if (maybeTree.ok) {\r\n      text = syntaxTreeToLatex(maybeTree.data);\r\n    } else {\r\n      text = maybeTree.other.replaceAll(/\"(.*)\"/g, '``$1\"');\r\n    }\r\n  }\r\n  return (\r\n    <Stack spacing={1}>\r\n      <LatexDisplay\r\n        text={text}\r\n        emptyText={t(\"common.noPropositionToDisplay\")}\r\n      />\r\n      <Box\r\n        ref={containerRef}\r\n        sx={{\r\n          borderWidth: 4,\r\n          borderStyle: \"solid\",\r\n          borderRadius: shape.borderRadius,\r\n          borderColor: alpha(palette.secondary.main, 0.4),\r\n        }}\r\n      >\r\n        <Box\r\n          position=\"relative\"\r\n          height=\"75vh\"\r\n          width=\"100%\"\r\n        >\r\n          {exprTree !== null && (\r\n            <TreeGraph\r\n              symbolTable={symbolTable}\r\n              order={order}\r\n              tree={augmentExprTree(exprTree)}\r\n              onNodeClick={handleNodeClick}\r\n              onKeyDown={handleGraphKeyPress}\r\n            />\r\n          )}\r\n        </Box>\r\n        <Divider flexItem />\r\n        <PlaygroundPlaybackControl\r\n          disabled={exprTree === null}\r\n          maxValue={maxOrder}\r\n          minValue={1}\r\n          value={order}\r\n          onChange={handleOrderChange}\r\n        />\r\n      </Box>\r\n      {selectedNode !== null && (\r\n        <PlaygroundDialog\r\n          node={selectedNode}\r\n          open={dialogOpen}\r\n          value={symbolTable}\r\n          onChange={handleTableChange}\r\n          onClose={() => setDialogOpen(false)}\r\n        />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  Operator,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/ast\";\r\n\r\nconst normalizeDisjunction = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n): SyntaxTree => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeKind.UNARY,\r\n    operator: Operator.NOT,\r\n    operand: {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: Operator.AND,\r\n      left: {\r\n        nodeType: SyntaxTreeNodeKind.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: left,\r\n      },\r\n      right: {\r\n        nodeType: SyntaxTreeNodeKind.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: right,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst normalizeImplication = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n): SyntaxTree => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeKind.UNARY,\r\n    operator: Operator.NOT,\r\n    operand: {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: Operator.AND,\r\n      left: left,\r\n      right: {\r\n        nodeType: SyntaxTreeNodeKind.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: right,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst normalizeEquivalence = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n): SyntaxTree => {\r\n  const branchLeft: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: Operator.AND,\r\n    left: left,\r\n    right: {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: right,\r\n    },\r\n  };\r\n\r\n  const branchRight: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: Operator.AND,\r\n    left: right,\r\n    right: {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: left,\r\n    },\r\n  };\r\n\r\n  return {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: Operator.AND,\r\n    left: {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: branchLeft,\r\n    },\r\n    right: {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: branchRight,\r\n    },\r\n  };\r\n};\r\n\r\nconst _normalizeTree = (tree: SyntaxTree): SyntaxTree => {\r\n  if (tree.nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    const operand = _normalizeTree(tree.operand);\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator: tree.operator,\r\n      operand,\r\n    };\r\n  }\r\n\r\n  const left = _normalizeTree(tree.left);\r\n  const right = _normalizeTree(tree.right);\r\n\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      return {\r\n        nodeType: SyntaxTreeNodeKind.BINARY,\r\n        operator: Operator.AND,\r\n        left: left,\r\n        right: right,\r\n      };\r\n    case Operator.OR:\r\n      return normalizeDisjunction(left, right);\r\n    case Operator.IMPL:\r\n      return normalizeImplication(left, right);\r\n    case Operator.IFF:\r\n      return normalizeEquivalence(left, right);\r\n  }\r\n};\r\n\r\nexport const normalizeSyntaxTree = (tree: SyntaxTree) => {\r\n  return _normalizeTree(tree);\r\n};\r\n","import { SyntaxTree, SyntaxTreeNodeKind } from \"$types/ast\";\r\n\r\nconst _compareSyntaxTree = (\r\n  a: SyntaxTree,\r\n  b: SyntaxTree\r\n): boolean => {\r\n  if (a.nodeType !== b.nodeType) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    a.nodeType === SyntaxTreeNodeKind.IDEN &&\r\n    b.nodeType === SyntaxTreeNodeKind.IDEN\r\n  ) {\r\n    return a.symbol.localeCompare(b.symbol) === 0;\r\n  }\r\n\r\n  if (\r\n    a.nodeType === SyntaxTreeNodeKind.UNARY &&\r\n    b.nodeType === SyntaxTreeNodeKind.UNARY\r\n  ) {\r\n    return _compareSyntaxTree(a.operand, b.operand);\r\n  }\r\n\r\n  if (\r\n    a.nodeType === SyntaxTreeNodeKind.BINARY &&\r\n    b.nodeType === SyntaxTreeNodeKind.BINARY\r\n  ) {\r\n    if (a.operator !== b.operator) {\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      _compareSyntaxTree(a.left, b.left) &&\r\n      _compareSyntaxTree(a.right, b.right)\r\n    );\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const compareSyntaxTree = (\r\n  a: SyntaxTree,\r\n  b: SyntaxTree\r\n) => {\r\n  return _compareSyntaxTree(a, b);\r\n};\r\n","import {\r\n  Operator,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeBinary,\r\n  SyntaxTreeNodeKind,\r\n} from \"$types/ast\";\r\nimport { compareSyntaxTree } from \"./compare\";\r\n\r\nconst collapseToDisjunction = (tree: SyntaxTree) => {\r\n  if (tree.nodeType !== SyntaxTreeNodeKind.UNARY) {\r\n    return null;\r\n  }\r\n  const c = tree.operand;\r\n  if (c.nodeType !== SyntaxTreeNodeKind.BINARY) {\r\n    return null;\r\n  }\r\n  const lc = c.left;\r\n  if (lc.nodeType !== SyntaxTreeNodeKind.UNARY) {\r\n    return null;\r\n  }\r\n  const rc = c.right;\r\n  if (rc.nodeType !== SyntaxTreeNodeKind.UNARY) {\r\n    return null;\r\n  }\r\n\r\n  const node: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: Operator.OR,\r\n    left: lc.operand,\r\n    right: rc.operand,\r\n  };\r\n\r\n  return node;\r\n};\r\n\r\nconst collapseToImplication = (\r\n  tree: SyntaxTree\r\n): SyntaxTreeNodeBinary | null => {\r\n  if (tree.nodeType !== SyntaxTreeNodeKind.UNARY) {\r\n    return null;\r\n  }\r\n\r\n  const c = tree.operand;\r\n  if (c.nodeType !== SyntaxTreeNodeKind.BINARY) {\r\n    return null;\r\n  }\r\n\r\n  const rc = c.right;\r\n  if (rc.nodeType !== SyntaxTreeNodeKind.UNARY) {\r\n    return null;\r\n  }\r\n\r\n  const node: SyntaxTreeNodeBinary = {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: Operator.IMPL,\r\n    left: c.left,\r\n    right: rc.operand,\r\n  };\r\n  return node;\r\n};\r\n\r\nconst collapseToEquivalence = (\r\n  normalizedTree: SyntaxTreeNodeBinary\r\n): SyntaxTreeNodeBinary | null => {\r\n  const root = normalizedTree;\r\n  const l = root.left;\r\n  const r = root.right;\r\n\r\n  if (\r\n    l.nodeType !== SyntaxTreeNodeKind.UNARY ||\r\n    r.nodeType !== SyntaxTreeNodeKind.UNARY\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const cl = l.operand;\r\n  const cr = r.operand;\r\n  if (\r\n    cl.nodeType !== SyntaxTreeNodeKind.BINARY ||\r\n    cr.nodeType !== SyntaxTreeNodeKind.BINARY\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const lcl = cl.left;\r\n  const lcr = cr.left;\r\n  if (!compareSyntaxTree(lcl, lcr)) {\r\n    return null;\r\n  }\r\n\r\n  const rcl = cl.right;\r\n  const rcr = cr.right;\r\n  if (!compareSyntaxTree(rcl, rcr)) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: Operator.IFF,\r\n    left: lcl,\r\n    right: lcr,\r\n  };\r\n};\r\n\r\nconst _collapseNormalizedTree = (\r\n  tree: SyntaxTree,\r\n  target: Set<Operator>\r\n): SyntaxTree | null => {\r\n  if (tree.nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    let collapsed: SyntaxTreeNodeBinary | null = null;\r\n    if (target.has(Operator.OR)) {\r\n      collapsed = collapseToDisjunction(tree);\r\n    }\r\n\r\n    if (collapsed === null && target.has(Operator.IMPL)) {\r\n      collapsed = collapseToImplication(tree);\r\n    }\r\n\r\n    if (collapsed === null) {\r\n      const child = _collapseNormalizedTree(\r\n        tree.operand,\r\n        target\r\n      );\r\n      if (child === null) {\r\n        return null;\r\n      }\r\n      return {\r\n        nodeType: SyntaxTreeNodeKind.UNARY,\r\n        operator: Operator.NOT,\r\n        operand: child,\r\n      };\r\n    }\r\n\r\n    const left = _collapseNormalizedTree(\r\n      collapsed.left,\r\n      target\r\n    );\r\n    if (left === null) {\r\n      return null;\r\n    }\r\n    const right = _collapseNormalizedTree(\r\n      collapsed.right,\r\n      target\r\n    );\r\n    if (right === null) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: collapsed.operator,\r\n      left: left,\r\n      right: right,\r\n    };\r\n  }\r\n\r\n  let collapsed: SyntaxTreeNodeBinary | null = null;\r\n  if (target.has(Operator.AND)) {\r\n    collapsed = tree;\r\n  }\r\n\r\n  if (collapsed === null && target.has(Operator.IFF)) {\r\n    collapsed = collapseToEquivalence(tree);\r\n  }\r\n\r\n  if (collapsed !== null) {\r\n    const left = _collapseNormalizedTree(\r\n      collapsed.left,\r\n      target\r\n    );\r\n    if (left === null) {\r\n      return null;\r\n    }\r\n    const right = _collapseNormalizedTree(\r\n      collapsed.right,\r\n      target\r\n    );\r\n    if (right === null) {\r\n      return null;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.BINARY,\r\n      operator: collapsed.operator,\r\n      left: left,\r\n      right: right,\r\n    };\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const collapseSyntaxTree = (\r\n  normalizedTree: SyntaxTree,\r\n  target: Set<Operator>\r\n) => {\r\n  return _collapseNormalizedTree(normalizedTree, target);\r\n};\r\n\r\nconst _simplifySyntaxTree = (\r\n  tree: SyntaxTree\r\n): SyntaxTree => {\r\n  if (tree.nodeType === SyntaxTreeNodeKind.IDEN) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeKind.UNARY) {\r\n    const { operand, operator } = tree;\r\n    // Skip double negation\r\n    if (operand.nodeType === SyntaxTreeNodeKind.UNARY) {\r\n      return _simplifySyntaxTree(operand.operand);\r\n    }\r\n    const child = _simplifySyntaxTree(operand);\r\n    return {\r\n      nodeType: SyntaxTreeNodeKind.UNARY,\r\n      operator,\r\n      operand: child,\r\n    };\r\n  }\r\n\r\n  const left = _simplifySyntaxTree(tree.left);\r\n  const right = _simplifySyntaxTree(tree.right);\r\n  if (compareSyntaxTree(left, right)) {\r\n    return left;\r\n  }\r\n  return {\r\n    nodeType: SyntaxTreeNodeKind.BINARY,\r\n    operator: tree.operator,\r\n    left: left,\r\n    right: right,\r\n  };\r\n};\r\n\r\nexport const simplifySyntaxTree = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  return _simplifySyntaxTree(tree);\r\n};\r\n","export const en = {\r\n  translation: {\r\n    common: {\r\n      truthValue: \"Truth value\",\r\n      true: \"True\",\r\n      false: \"False\",\r\n      connectives: {\r\n        negation: \"Negation\",\r\n        conjunction: \"Conjunction\",\r\n        disjunction: \"Disjunction\",\r\n        implication: \"Implication\",\r\n        equivalence: \"Equivalence\",\r\n      },\r\n      noPropositionToDisplay: \"Nothing to see here\",\r\n    },\r\n    editor: {\r\n      originalPanel: \"Original\",\r\n      simplifiedPanel: \"Simplified\",\r\n      howToUse: \"How to use?\",\r\n      run: \" Run\",\r\n      allowedOperatorLabel: \"Connectives to keep\",\r\n    },\r\n    playground: {\r\n      graph: {\r\n        center: \"Center Graph\",\r\n      },\r\n      dialog: {\r\n        close: \"Close\",\r\n      },\r\n      playback: {\r\n        forward: \"Forward\",\r\n        rewind: \"Rewind\",\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const th = {\r\n  translation: {\r\n    common: {\r\n      truthValue: \"ค่าความจริง\",\r\n      true: \"จริง\",\r\n      false: \"เท็จ\",\r\n      connectives: {\r\n        negation: \"นิเสธ\",\r\n        conjunction: \"และ\",\r\n        disjunction: \"หรือ\",\r\n        implication: \"ถ้า แล้ว\",\r\n        equivalence: \"ก็ต่อเมื่อ\",\r\n      },\r\n      noPropositionToDisplay: \"ไม่มีประพจน์ให้แสดง\",\r\n    },\r\n    editor: {\r\n      originalPanel: \"รูปเดิม\",\r\n      simplifiedPanel: \"รูปอย่างง่าย\",\r\n      howToUse: \"คู่มือการใช้งาน\",\r\n      run: \"คำนวณ\",\r\n      allowedOperatorLabel: \"ตัวเชื่อมที่คงไว้\",\r\n    },\r\n    playground: {\r\n      graph: {\r\n        center: \"กลับสู่ศูนย์กลาง\",\r\n      },\r\n      dialog: {\r\n        close: \"ปิด\",\r\n      },\r\n      playback: {\r\n        // start: \"Start\",\r\n        // end: \"End\",\r\n        forward: \"เดินหน้า\",\r\n        rewind: \"ถอยหลัง\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","import i18next from \"i18next\";\r\nimport {\r\n  default as Backend,\r\n  default as LangDectector,\r\n} from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { en } from \"./en/translation\";\r\nimport { th } from \"./th/translation\";\r\n\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    debug: true,\r\n    resources: {\r\n      en,\r\n      th,\r\n    },\r\n  });\r\n\r\nexport default i18next;\r\n","import { Editor } from \"$components/Editor\";\r\nimport { Playground } from \"$components/Playground\";\r\nimport { parse } from \"$core/interpreter/parser\";\r\nimport { normalizeSyntaxTree } from \"$core/tree/syntax/normalize\";\r\nimport {\r\n  collapseSyntaxTree,\r\n  simplifySyntaxTree,\r\n} from \"$core/tree/syntax/simplify\";\r\nimport i18nInstance from \"$locales/config\";\r\nimport { Operator, SyntaxTree } from \"$types/ast\";\r\nimport { Maybe } from \"$types/common\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  Container,\r\n  Stack,\r\n  Tab,\r\n  Toolbar,\r\n} from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const EditorView: FC = () => {\r\n  const { t, i18n } = useTranslation(\"translation\", {\r\n    i18n: i18nInstance,\r\n  });\r\n\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [operators, setOperators] = useState(\r\n    new Map<Operator, boolean>([\r\n      [Operator.AND, true],\r\n      [Operator.OR, true],\r\n      [Operator.IMPL, true],\r\n      [Operator.IFF, true],\r\n    ])\r\n  );\r\n  const [tree, setTree] = useState<Maybe<\r\n    SyntaxTree,\r\n    string\r\n  > | null>(null);\r\n\r\n  const [simplifiedTree, setSimplifiedTree] =\r\n    useState<Maybe<SyntaxTree, string> | null>(null);\r\n\r\n  const handleExecute = (value: string) => {\r\n    if (value.trim().length === 0) {\r\n      setTree(null);\r\n      setSimplifiedTree(null);\r\n      return;\r\n    }\r\n    const maybeTree = parse(value);\r\n    setTree(maybeTree);\r\n    if (maybeTree.ok) {\r\n      const op = new Set<Operator>();\r\n      for (const [k, v] of operators.entries()) {\r\n        if (v) {\r\n          op.add(k);\r\n        }\r\n      }\r\n      const simplTree = simplifySyntaxTree(\r\n        collapseSyntaxTree(\r\n          normalizeSyntaxTree(maybeTree.data),\r\n          op\r\n        )\r\n      );\r\n      if (simplTree === null) {\r\n        setSimplifiedTree({\r\n          ok: false,\r\n          other:\r\n            \"Cannot simplified expression to desired form\",\r\n        });\r\n      } else {\r\n        setSimplifiedTree({\r\n          ok: true,\r\n          data: simplTree,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOperatorChange = (\r\n    k: Operator,\r\n    v: boolean\r\n  ) => {\r\n    setOperators((p) => {\r\n      const next = new Map(p);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Stack\r\n        useFlexGap\r\n        spacing={1}\r\n        padding={2}\r\n      >\r\n        <Toolbar\r\n          variant=\"dense\"\r\n          disableGutters\r\n        >\r\n          <ButtonGroup variant=\"text\">\r\n            <Button\r\n              onClick={() => i18n.changeLanguage(\"en\")}\r\n            >\r\n              EN\r\n            </Button>\r\n            <Button\r\n              onClick={() => i18n.changeLanguage(\"th\")}\r\n            >\r\n              TH\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Toolbar>\r\n        <Editor\r\n          operators={operators}\r\n          onExecute={handleExecute}\r\n          onOperatorChange={handleOperatorChange}\r\n        />\r\n        <TabContext value={activeTab}>\r\n          <Box\r\n            sx={{ borderBottom: 1, borderColor: \"divider\" }}\r\n          >\r\n            <TabList\r\n              onChange={(_, v) => setActiveTab(v)}\r\n              variant=\"scrollable\"\r\n            >\r\n              <Tab\r\n                label={t(\"editor.originalPanel\")}\r\n                value={0}\r\n              />\r\n              <Tab\r\n                label={t(\"editor.simplifiedPanel\")}\r\n                value={1}\r\n              />\r\n            </TabList>\r\n          </Box>\r\n          <TabPanel\r\n            keepMounted\r\n            value={0}\r\n            sx={{ padding: 0 }}\r\n          >\r\n            <Playground maybeTree={tree} />\r\n          </TabPanel>\r\n          <TabPanel\r\n            keepMounted\r\n            value={1}\r\n            sx={{ padding: 0 }}\r\n          >\r\n            <Playground maybeTree={simplifiedTree} />\r\n          </TabPanel>\r\n        </TabContext>\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n","export default \"data:text/plain;base64,IyMgVXNlZnVsIFRoZW9yZW1z8J+agA0KDQojIyMgRGUgTW9yZ2FuJ3MgTGF3DQoNCioqVGhlb3JlbSoqOiBOZWdhdGlvbiBpcyBkaXN0cmlidXRpdmUgb3ZlciBjb25qdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChQIFxsYW5kIFEpIFxlcXVpdiBcbG5vdCBQIFxsb3IgXGxub3QgUS4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IE5lZ2F0aW9uIGlzIGRpc3RyaWJ1dGl2ZSBvdmVyIGRpc2p1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KXGxub3QgKFAgXGxvciBRKSBcZXF1aXYgXGxub3QgUCBcbGFuZCBcbG5vdCBRLg0KXGVuZHthbGlnbip9DQokJA0KDQpSZWxhdGVkIHJlc291cmNlczoNCi0gW0RlIE1vcmdhbidzIGxhdyAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvRGVfTW9yZ2FuJTI3c19MYXdzXyhMb2dpYykpDQoNCiMjIyBSdWxlIG9mIERvdWJsZSBOZWdhdGlvbg0KDQoqKlRoZW9yZW0qKjogVGhlIHRydXRoIHZhbHVlIG9mIHRoZSBkb3VibGUgbmVnYXRpb24gb2YgYSBwcm9wb3NpdGlvbiBpcyBlcXVpdmFsZW50IHRvIGl0c2VsZg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChcbG5vdCBQKSBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtEb3VibGUgbmVnYXRpb24gKFByb29md2lraSldKGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL0RvdWJsZV9OZWdhdGlvbikNCg0KIyMjIFJ1bGUgb2YgSWRlbXBvdGVuY2UNCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGlkZW1wb3RlbnQNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsb3IgUCBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IENvbmp1bmN0aW9uIGlzIGlkZW1wb3RlbnQNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsYW5kIFAgXGVxdWl2IFAuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBJZGVtcG90ZW5jZSAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvUnVsZV9vZl9JZGVtcG90ZW5jZSkNCi0gW0lkZW1wb3RlbmNlIChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JZGVtcG90ZW5jZSkNCg0KIyMjIFJ1bGUgb2YgQ29tbXV0YXRpb24NCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGNvbW11dGF0aXZlDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIFEgXGVxdWl2IFEgXGxvciBQLg0KXGVuZHthbGlnbip9DQokJA0KDQoqKlRoZW9yZW0qKjogQ29uanVuY3Rpb24gaXMgY29tbXV0YXRpdmUNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsYW5kIFEgXGVxdWl2IFEgXGxhbmQgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtSdWxlIG9mIENvbW11dGF0aW9uIChQcm9vZndpa2kpXShodHRwczovL3Byb29md2lraS5vcmcvd2lraS9SdWxlX29mX0NvbW11dGF0aW9uKQ0KLSBbQ29tbXV0YXRpdmUgcHJvcGVydHkgKFdpa2lwZWRpYSldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbW11dGF0aXZlX3Byb3BlcnR5KQ0KDQojIyMgUnVsZSBvZiBBc3NvY2lhdGlvbg0KDQoqKlRoZW9yZW0qKjogRGlzanVuY3Rpb24gaXMgYXNzb2NpYXRpdmUNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsb3IgKFEgXGxvciBSKSBcZXF1aXYgKFAgXGxvciBRKSBcbG9yIFIuDQpcZW5ke2FsaWduKn0NCiQkDQoNCioqVGhlb3JlbSoqOiBDb25qdW5jdGlvbiBpcyBhc3NvY2lhdGl2ZQ0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFEgXGxhbmQgUikgXGVxdWl2IChQIFxsYW5kIFEpIFxsYW5kIFIuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBBc3NvY2lhdGlvbiAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvUnVsZV9vZl9Bc3NvY2lhdGlvbikNCi0gW0Fzc29jaWF0aXZlIHByb3BlcnR5IChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Bc3NvY2lhdGl2ZV9wcm9wZXJ0eSkNCg0KIyMjIFJ1bGUgb2YgRGlzdHJpYnV0aW9uDQoNCioqVGhlb3JlbSoqOiBDb25qdW5jdGlvbiBpcyBkaXN0cmlidXRpdmUgb3ZlciBkaXNqdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFEgXGxvciBSKSBcZXF1aXYgKFAgXGxhbmQgUSkgXGxvciAoUCBcbGFuZCBSKS4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGRpc3RyaWJ1dGl2ZSBvdmVyIGNvbmp1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIChRIFxsYW5kIFIpIFxlcXVpdiAoUCBcbG9yIFEpIFxsYW5kIChQIFxsb3IgUikuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBkaXN0cmlidXRpb24gKFByb29md2lraSldKGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1J1bGVfb2ZfRGlzdHJpYnV0aW9uKQ0KLSBbRGlzdHJpYnV0aXZlIHByb3BlcnR5IChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaXN0cmlidXRpdmVfcHJvcGVydHkpDQoNCiMjIyBBYnNvcnB0aW9uIExhd3MgDQoNCioqVGhlb3JlbSoqOiBEaXNqdW5jdGlvbiBhYnNvcmJzIGNvbmp1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIChQIFxsYW5kIFEpIFxlcXVpdiBQLg0KXGVuZHthbGlnbip9DQokJA0KDQoqKlRoZW9yZW0qKjogQ29uanVuY3Rpb24gYWJzb3JicyBkaXNqdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFAgXGxvciBRKSBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtBYnNvcnB0aW9uIExhd3MgIChQcm9vZndpa2kpXShodHRwczovL3Byb29md2lraS5vcmcvd2lraS9BYnNvcnB0aW9uX0xhd3NfKEJvb2xlYW5fQWxnZWJyYXMpKQ0KDQojIyMgTGF3IG9mIEV4Y2x1ZGVkIE1pZGRsZQ0KDQoqKlRoZW9yZW0qKjogRXZlcnkgcHJvcG9zaXRpb24gaXMgZWl0aGVyIHRydWUgb3IgZmFsc2UuDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIFxsbm90IFAgXGVxdWl2IFx0b3AuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbTGF3IG9mIEV4Y2x1ZGVkIE1pZGRsZSAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvTGF3X29mX0V4Y2x1ZGVkX01pZGRsZSkNCg0KIyMjIFByaW5jaXBsZSBvZiBOb24tQ29udHJhZGljdGlvbg0KDQoqKlRoZW9yZW0qKjogQSBwcm9wb3NpdGlvbiBjYW5ub3QgYmUgYm90aCB0cnVlIGFuZCBmYWxzZSBhdCB0aGUgc2FtZSB0aW1lLg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChQIFxsYW5kIFxsbm90IFApIFxlcXVpdiBcdG9wLg0KXGVuZHthbGlnbip9DQokJA0KDQpSZWxhdGVkIHJlc291cmNlczoNCi0gW1ByaW5jaXBsZSBvZiBOb24tQ29udHJhZGljdGlvbiAoUHJvb2Z3aWtpKV0oIGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1ByaW5jaXBsZV9vZl9Ob24tQ29udHJhZGljdGlvbikNCg0K\"","export default \"data:text/plain;base64,IyMg8J+TmlVzZXIgTWFudWFsDQoNClRvIHVzZSB0aGUgaW50ZXJwcmV0ZXIsIHNpbXBseSB0eXBlIGluIGEgQm9vbGVhbiBleHByZXNpb24gaW50byB0aGUgaW5wdXQgZmllbGQgYW5kIHByZXNzIHJ1biEgSWYgeW91IGV4cHJlc3Npb24gaXMgd2VsbC1mb3JtZWQsIHlvdSBzaG91bGQgc2VlIGEgdmVyc2lvbiBvZiB5b3VyIGV4cHJlc3Npb24gdGhlIGludGVycHJldGVyIHNlZXMsIGJ1dCBpZiB5b3Ugc2VlIG5vdGhpbmcsIHlvdSBtaWdodCB3YW50IHRvIGRvdWJsZSBjaGVjayB5b3VyIGV4cHJlc3Npb24uDQoNCllvdSBjYW4gYWxzbyBwbGF5IGFyb3VuZCB3aXRoIHRoZSB0cnV0aCB2YWx1ZSBvZiB5b3VyIGV4cHJlc3Npb24gYnkgY2hhbmdpbmcgdGhlIHRydXRoIHZhbHVlcyBvZiB5b3VyIHByb3Bvc2l0aW9ucy4NCg0KV2hpbGUgeW91IGFyZSBoZXJlLCBsZXQgbWUgdGVsbCB5b3UgYSBmZXcgdGlwcy4gWW91IGNhbiBwcmVzcyBgQ1RSTGAgKyBgRU5URVJgIHRvIHRyaWdnZXIgdGhlIHJ1biBidXR0b24uIFRoZSBtYXRoIHN5bWJvbHMgY2FuIGJlIHRyaWNreSB0byB3cml0ZSwgc28geW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZzsgDQoNCg0KDQotICphbmQqIGlzIGFuIGFsaWFzIGZvciAmYW5kOywgDQotICpvciogaXMgYW4gYWxpYXMgZm9yICZvcjssIA0KLSAqaW1wbGllcyogaXMgYW4gYWxpYXMgZm9yICZyYXJyOywgDQotICppZmYqIGlzIGFuIGFsaWFzIGZvciAmaEFycjssIGFuZCANCi0gKm5vdCogaXMgYW4gYWxpYXMgZm9yICZub3Q7LiANCg0KQmV3YXJlIHNpbmNlIHRoZXNlIGFyZSBjYXNlLXNlbnNpdGl2ZS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4gd3JpdGUgYW4gZXhwcmVzaW9uIGxpa2UgdGhpczsgYG5vdCAocCBhbmQgcSkgaWZmIG5vdCBwIG9yIG5vdCBxYC4NCg0KDQo=\"","import { Divider, Typography } from \"@mui/material\";\r\nimport { JsxRuntimeComponents } from \"node_modules/react-markdown/lib\";\r\nimport { FC } from \"react\";\r\nimport Markdown from \"react-markdown\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkMath from \"remark-math\";\r\n\r\nconst COMPONENTS_OVERRIDE: Partial<JsxRuntimeComponents> = {\r\n  h2: ({ children, id }) => (\r\n    <Typography\r\n      variant=\"h2\"\r\n      id={id}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h3: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h3\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h4: ({ id, children }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h4\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  p: ({ children }) => (\r\n    <Typography\r\n      component=\"p\"\r\n      gutterBottom\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  // code: ({ children }) => <StyledKBD>{children}</StyledKBD>,\r\n  em: ({ children }) => (\r\n    <Typography\r\n      fontWeight=\"bold\"\r\n      component=\"em\"\r\n      fontStyle=\"normal\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  hr: () => (\r\n    <Divider\r\n      flexItem\r\n      sx={{ marginY: 4 }}\r\n      variant=\"middle\"\r\n    />\r\n  ),\r\n  a: ({ href, hrefLang, referrerPolicy, children }) => (\r\n    <Typography\r\n      component=\"a\"\r\n      target=\"_blank\"\r\n      href={href}\r\n      hrefLang={hrefLang}\r\n      referrerPolicy={referrerPolicy}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n};\r\n\r\ntype StyledMarkdownProps = {\r\n  children: string;\r\n};\r\nexport const StyledMarkdown: FC<StyledMarkdownProps> = (\r\n  props\r\n) => {\r\n  const { children } = props;\r\n  return (\r\n    <Markdown\r\n      components={COMPONENTS_OVERRIDE}\r\n      rehypePlugins={[rehypeKatex, rehypeSlug]}\r\n      remarkPlugins={[remarkMath]}\r\n    >\r\n      {children}\r\n    </Markdown>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetchMarkdown = (path: string) => {\r\n  const [content, setContent] = useState<string | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    let isWorking = true;\r\n    fetch(path)\r\n      .then((res) => res.text())\r\n      .then((text) => {\r\n        if (!isWorking) {\r\n          return;\r\n        }\r\n        setContent(text);\r\n      });\r\n    return () => {\r\n      isWorking = false;\r\n    };\r\n  }, [path]);\r\n\r\n  return content;\r\n};\r\n","import AboutBlog from \"$assets/blogs/BooleanAlgebraSummary/en.txt\";\r\nimport UserManualBlog from \"$assets/blogs/UserManual/en.txt\";\r\nimport { StyledMarkdown } from \"$components/StyledMarkdown\";\r\nimport { useFetchMarkdown } from \"$hooks/useFetchMarkdown\";\r\nimport { Box, Container, Typography } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nexport const BlogView: FC = () => {\r\n  const userManualContent =\r\n    useFetchMarkdown(UserManualBlog);\r\n  const content = useFetchMarkdown(AboutBlog);\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          backgroundColor: (t) => t.palette.secondary.light,\r\n          paddingY: 2,\r\n          marginY: 8,\r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <Typography\r\n            variant=\"h1\"\r\n            component=\"h1\"\r\n          >\r\n            Hi there! 👋\r\n          </Typography>\r\n          <StyledMarkdown>\r\n            {userManualContent ?? \"\"}\r\n          </StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n      <Box marginBottom={4}>\r\n        <Container maxWidth=\"md\">\r\n          <StyledMarkdown>{content ?? \"\"}</StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  createTheme,\r\n  responsiveFontSizes,\r\n} from \"@mui/material\";\r\nimport { brown, green } from \"@mui/material/colors\";\r\n\r\nexport let theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: brown[\"600\"],\r\n    },\r\n    secondary: {\r\n      light: \"#abcbad\",\r\n      main: green[\"800\"],\r\n    },\r\n  },\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: t.palette.primary.dark,\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: t.palette.primary.dark,\r\n        }),\r\n      },\r\n    },\r\n    MuiTypography: {\r\n      defaultProps: {\r\n        sx: {\r\n          userSelect: \"none\",\r\n        },\r\n      },\r\n    },\r\n    MuiDialogActions: {\r\n      defaultProps: {\r\n        sx: { justifyContent: \"flex-start\" },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n","import \"$core/interpreter/parser\";\r\nimport { EditorView } from \"$views/EditorView\";\r\nimport { BlogView } from \"$views/TheoremBlogView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { theme } from \"./theme\";\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <EditorView />\r\n      <BlogView />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import { App } from \"$App/App\";\nimport \"$locales/config\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport \"$assets/ohm\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["SyntaxTreeNodeKind","Operator","grammar","ohm.grammar","semantics","leftExpr","_","rightExpr","leftTree","rightTree","expr","_open","_close","id","children","n","parse","content","m","StyledLatex","props","tex","options","ref","useRef","useEffect","katex","jsx","Typography","StyledTooltipButton","variant","startIcon","onClick","title","Tooltip","Button","OPERATOR","EditorRibbonInsert","onInsertChar","t","useTranslation","ButtonGroup","btn","index","EditorRibbon","onExecute","jsxs","Toolbar","Stack","PlayArrowRounded","SYMBOL_LABEL","EditorSimplConfigGroup","onChange","values","FormLabel","FormControlLabel","Checkbox","k","l","checked","label","v","EditorTextField","rows","value","onKeyDown","TextField","e","Editor","onOperatorChange","operators","setValue","useState","handleExecute","handleInsertChar","char","prev","handleKeyDown","_syntaxTreeToLatex","tree","nodeType","operand","left","right","labelLeft","labelRight","syntaxTreeToLatex","_syntaxTreetoExprTree","orderStart","exprNode","child","fn","syntaxTreetoExprTree","augmentExprTree","order","LatexDisplay","text","emptyText","palette","shape","useTheme","Box","alpha","_exprTreeCollectSymbols","exprTree","symbols","exprTreeCollectSymbols","_exprTreeToLatex","childLatex","leftLatex","rightLatex","exprTreeToLatex","PlaygroundDialogConfig","table","selected","symbol","FormControl","RadioGroup","Radio","PlaygroundDialog","node","open","onClose","evalValue","Dialog","DialogTitle","DialogContent","DialogActions","StyledIconButton","onKeyPress","disabled","IconButton","PlaygroundPlaybackControl","maxValue","minValue","handleForward","handleRewind","handleKeyPress","key","maxLabel","KeyboardArrowLeftRounded","KeyboardArrowRightRounded","Slider","StyledFAB","Fab","TreeGraphLink","link","source","target","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","onMouseLeave","onMouseEnter","x","y","data","typography","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","handleMouseLeave","handleMouseEnter","Group","TreeGraph","symbolTable","onNodeClick","hierarchy","height","width","containerRef","useTooltipInPortal","showTooltip","hideTooltip","tooltipData","tooltipOpen","tooltipLeft","tooltipTop","useTooltip","handleMouseHoverNode","Zoom","zoom","Fragment","Tree","treeHeir","i","ControlCameraRounded","TooltipWithBounds","Playground","maybeTree","dialogOpen","setDialogOpen","setSymbolTable","setOrder","maxOrder","setMaxOrder","selectedNode","setSelectedNode","setExprTree","nextExprTree","handleNodeClick","handleTableChange","next","handleOrderChange","handleGraphKeyPress","Divider","normalizeDisjunction","normalizeImplication","normalizeEquivalence","branchLeft","branchRight","_normalizeTree","normalizeSyntaxTree","_compareSyntaxTree","a","b","compareSyntaxTree","collapseToDisjunction","c","lc","rc","collapseToImplication","collapseToEquivalence","normalizedTree","root","r","cl","cr","lcl","lcr","rcl","rcr","_collapseNormalizedTree","collapsed","collapseSyntaxTree","_simplifySyntaxTree","operator","simplifySyntaxTree","en","th","i18next","Backend","LangDectector","initReactI18next","EditorView","i18n","i18nInstance","activeTab","setActiveTab","setOperators","setTree","simplifiedTree","setSimplifiedTree","op","simplTree","handleOperatorChange","p","Container","TabContext","TabList","Tab","TabPanel","AboutBlog","COMPONENTS_OVERRIDE","href","hrefLang","referrerPolicy","StyledMarkdown","Markdown","rehypeKatex","rehypeSlug","remarkMath","useFetchMarkdown","path","setContent","isWorking","res","BlogView","userManualContent","UserManualBlog","theme","createTheme","brown","green","responsiveFontSizes","globalStyles","GlobalStyles","App","ThemeProvider","CssBaseline","createRoot","StrictMode"],"mappings":"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"}