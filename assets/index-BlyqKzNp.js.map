{"version":3,"file":"index-BlyqKzNp.js","sources":["../../src/types/operators.ts","../../src/types/syntax-tree.ts","../../src/core/interpreter/grammar.ts","../../src/core/interpreter/parser.ts","../../src/core/syntax-tree/node.ts","../../src/core/syntax-tree/to-string.ts","../../src/core/syntax-tree/normalize.ts","../../src/core/operator.ts","../../src/core/syntax-tree/to-latex.ts","../../src/controllers/checker-controller.tsx","../../src/controllers/comparator-controller.tsx","../../src/core/syntax-tree/collect-symbols.ts","../../src/controllers/evaluator-controller.tsx","../../src/controllers/rewriter-controller.tsx","../../src/theme/palette-base.ts","../../src/theme/palette-checker-route.ts","../../src/theme/palette-comparator-route.ts","../../src/theme/palette-evaluator-route.ts","../../src/theme/palette-rewriter-route.ts","../../src/theme/index.ts","../../src/components/AppNavMenu.tsx","../../src/components/styled/StyledLatex.tsx","../../src/components/Editor/EditorRibbonButton.tsx","../../src/components/Editor/EditorRibbon.tsx","../../src/components/Editor/Editor.tsx","../../src/layouts/BaseLayout.tsx","../../src/components/styled/StyledAlert.tsx","../../src/components/InputDisplay/InputDisplayMany.tsx","../../src/components/VerdictDisplay/VerdictDisplay.tsx","../../src/components/ExpressionCard.tsx","../../src/core/eval.ts","../../src/core/tree/expr/evaluate.ts","../../src/core/tree/expr/latex.ts","../../src/core/tree/flatten.ts","../../src/components/TruthTable/TruthTableCell.tsx","../../src/components/TruthTable/TruthTable.tsx","../../src/core/tree/conversion.ts","../../src/components/VerdictDisplay/VerdictDisplayMany.tsx","../../src/layouts/CheckerViewLayout.tsx","../../src/views/CheckerView.tsx","../../src/core/expr-tree/verify-tautology.ts","../../src/layouts/ComparatorViewLayout.tsx","../../src/views/ComparatorView.tsx","../../src/views/ErrorView.tsx","../../src/components/styled/StyledIconButton.tsx","../../src/components/EvaluationGraph/GraphControl.tsx","../../src/components/EvaluationGraph/TreeLink.tsx","../../src/components/EvaluationGraph/TreeNode.tsx","../../src/components/EvaluationGraph/Tree.tsx","../../src/components/EvaluationGraph/Graph.tsx","../../src/core/exprTreeFlattenStepByStep.ts","../../src/components/EvaluationDisplay/EvaluationDisplayStepMini.tsx","../../src/components/EvaluationDisplay/EvaluationDisplayStep.tsx","../../src/components/EvaluationDisplay/EvaluationDisplay.tsx","../../src/components/EvaluationDisplay/EvaluationDisplayMany.tsx","../../src/components/PropositionConfig.tsx","../../src/layouts/EvaluatorViewLayout.tsx","../../src/views/EvaluatorView.tsx","../../src/views/HomeView.tsx","../../src/core/syntax-tree/helper/rewrite-rules.ts","../../src/core/syntax-tree/rewrite.ts","../../src/layouts/RewriterViewLayout.tsx","../../src/views/RewriterView.tsx","../../src/App/App.tsx","../../src/locales/en/component.ts","../../src/locales/en/nav.ts","../../src/locales/en/views.ts","../../src/locales/th/component.ts","../../src/locales/th/nav.ts","../../src/locales/th/views.ts","../../src/locales/config.ts","../../src/main.tsx"],"sourcesContent":["export enum Operator {\r\n  IFF = \"IFF\",\r\n  IMPL = \"IMPL\",\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  NOT = \"NOT\",\r\n}\r\n","import { Operator } from \"./operators\";\r\n\r\nexport enum SyntaxTreeNodeType {\r\n  CONST = \"CONSTANT\",\r\n  IDEN = \"IDEN\",\r\n  UNARY = \"UNARY\",\r\n  BINARY = \"BINARY\",\r\n}\r\n\r\nexport type SyntaxTreeNodeConst = {\r\n  nodeType: SyntaxTreeNodeType.CONST;\r\n  value: boolean;\r\n};\r\n\r\nexport type SyntaxTreeNodeIden = {\r\n  nodeType: SyntaxTreeNodeType.IDEN;\r\n  symbol: string;\r\n};\r\n\r\nexport type SyntaxTreeNodeBinary = {\r\n  nodeType: SyntaxTreeNodeType.BINARY;\r\n  operator:\r\n    | Operator.AND\r\n    | Operator.OR\r\n    | Operator.IMPL\r\n    | Operator.IFF;\r\n  left: SyntaxTree;\r\n  right: SyntaxTree;\r\n};\r\nexport type SyntaxTreeNodeUnary = {\r\n  nodeType: SyntaxTreeNodeType.UNARY;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type SyntaxTree =\r\n  | SyntaxTreeNodeBinary\r\n  | SyntaxTreeNodeUnary\r\n  | SyntaxTreeNodeIden\r\n  | SyntaxTreeNodeConst;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport * as ohm from \"ohm-js\";\r\n\r\nconst collectBinaryNodes = (\r\n  operator: Exclude<Operator, Operator.NOT>,\r\n  left: SyntaxTree,\r\n  right: SyntaxTree[]\r\n) => {\r\n  let node: SyntaxTree = {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator,\r\n    left,\r\n    right: right[0],\r\n  };\r\n  for (let i = 1; i < right.length; i++) {\r\n    node = {\r\n      nodeType: SyntaxTreeNodeType.BINARY,\r\n      operator,\r\n      left: node,\r\n      right: right[i],\r\n    };\r\n  }\r\n  return node;\r\n};\r\n\r\nexport const grammar = ohm.grammar(String.raw`\r\nBooleanExpressions {\r\n  Expression\r\n    = Iff \r\n\r\n  Iff\r\n    = Implies (iff_sym Implies)*\r\n\r\n  Implies\r\n    = Or (implies_sym Or)*\r\n\r\n  Or\r\n    = And (or_sym And)*\r\n\r\n  And\r\n    = Not (and_sym Not)*\r\n\r\n  Not\r\n    = not_sym Not                   --not\r\n    | Primary\r\n\r\n  Primary\r\n    = \"(\" Expression \")\" --group\r\n    | true_sym    --lit_true\r\n    | false_sym   --lit_false\r\n    | identifier  --variable\r\n\r\n  identifier\r\n    = letter\r\n  \r\n  iff_sym \r\n    = \"iff\"\r\n    | \"⇔\"\r\n  \r\n  implies_sym \r\n    = \"implies\"\r\n    | \"⇒\"\r\n  \r\n  or_sym\r\n    = \"or\"\r\n    | \"∨\"\r\n\r\n  and_sym\r\n    = \"and\"\r\n    | \"∧\"\r\n  \r\n  not_sym\r\n    = \"not\"\r\n    | \"¬\"\r\n\r\n  true_sym\r\n    = \"⊤\"\r\n    | \"T\"\r\n    | \"1\"\r\n\r\n  false_sym\r\n    = \"⊥\"\r\n    | \"F\"\r\n    | \"0\"\r\n}\r\n`);\r\n\r\nexport const semantics = grammar.createSemantics();\r\nsemantics.addOperation(\"buildTree\", {\r\n  Expression(e) {\r\n    return e.buildTree();\r\n  },\r\n\r\n  Iff(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IFF,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Implies(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.IMPL,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Or(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.OR,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  And(leftExpr, _, rightExpr) {\r\n    const leftTree = leftExpr.buildTree();\r\n    const rightTree = rightExpr.buildTree();\r\n    if (\r\n      !Array.isArray(rightTree) ||\r\n      rightTree.length === 0\r\n    ) {\r\n      return leftTree;\r\n    }\r\n    return collectBinaryNodes(\r\n      Operator.AND,\r\n      leftTree,\r\n      rightTree\r\n    );\r\n  },\r\n\r\n  Not_not(_, expr) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.UNARY,\r\n      operator: Operator.NOT,\r\n      operand: expr.buildTree(),\r\n    };\r\n  },\r\n\r\n  Primary_group(_open, expr, _close) {\r\n    return expr.buildTree();\r\n  },\r\n\r\n  Primary_lit_true(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.CONST,\r\n      value: true,\r\n    };\r\n  },\r\n\r\n  Primary_lit_false(_id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.CONST,\r\n      value: false,\r\n    };\r\n  },\r\n\r\n  Primary_variable(id) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.IDEN,\r\n      symbol: id.sourceString,\r\n    };\r\n  },\r\n\r\n  identifier(_) {\r\n    return this.sourceString;\r\n  },\r\n\r\n  _iter(...children) {\r\n    return children.map((n) => n.buildTree());\r\n  },\r\n});\r\n","import {\r\n  grammar,\r\n  semantics,\r\n} from \"$core/interpreter/grammar\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport { SyntaxTree } from \"$types/syntax-tree\";\r\n\r\nexport const parse = (\r\n  content: string\r\n): Maybe<{ tree: SyntaxTree }> => {\r\n  const m = grammar.match(content);\r\n  if (m.succeeded()) {\r\n    const tree = semantics(m).buildTree();\r\n    return { ok: true, tree };\r\n  }\r\n  return {\r\n    ok: false,\r\n  };\r\n};\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeBinary,\r\n  SyntaxTreeNodeConst,\r\n  SyntaxTreeNodeType,\r\n  SyntaxTreeNodeUnary,\r\n} from \"$types/syntax-tree\";\r\n\r\nexport const NOT = (operand: SyntaxTree) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.UNARY,\r\n    operator: Operator.NOT,\r\n    operand,\r\n  } as SyntaxTreeNodeUnary;\r\n};\r\n\r\nexport const BINARY = (\r\n  operator: Exclude<Operator, Operator.NOT>,\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.BINARY,\r\n    operator,\r\n    left,\r\n    right,\r\n  } as SyntaxTreeNodeBinary;\r\n};\r\n\r\nexport const AND = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return BINARY(Operator.AND, left, right);\r\n};\r\n\r\nexport const OR = (left: SyntaxTree, right: SyntaxTree) => {\r\n  return BINARY(Operator.OR, left, right);\r\n};\r\n\r\nexport const IMPLIES = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return BINARY(Operator.IMPL, left, right);\r\n};\r\nexport const IFF = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n) => {\r\n  return BINARY(Operator.IFF, left, right);\r\n};\r\n\r\nexport const CONST = (value: boolean) => {\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.CONST,\r\n    value,\r\n  } as SyntaxTreeNodeConst;\r\n};\r\n","import {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\n\r\nexport const syntaxTreeToString = (\r\n  tree: SyntaxTree\r\n): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return String(tree.value);\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree.symbol;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      let operandRepr = syntaxTreeToString(tree.operand);\r\n      if (\r\n        tree.operand.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        operandRepr = `( ${operandRepr} )`;\r\n      }\r\n      return `${tree.operator} ${operandRepr}`;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      let leftRepr = syntaxTreeToString(tree.left);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        leftRepr = `( ${leftRepr} )`;\r\n      }\r\n      let rightRepr = syntaxTreeToString(tree.right);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        rightRepr = `( ${rightRepr} )`;\r\n      }\r\n\r\n      return `${leftRepr} ${tree.operator} ${rightRepr}`;\r\n    }\r\n  }\r\n};\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeIden,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { AND, BINARY, CONST, NOT, OR } from \"./node\";\r\nimport { syntaxTreeToString } from \"./to-string\";\r\n\r\nconst rewriteTree = (tree: SyntaxTree): SyntaxTree => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const operand = rewriteTree(tree.operand);\r\n      return NOT(operand);\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = rewriteTree(tree.left);\r\n      const right = rewriteTree(tree.right);\r\n      switch (tree.operator) {\r\n        case Operator.IFF:\r\n          return AND(\r\n            OR(NOT(left), right),\r\n            OR(NOT(right), left)\r\n          );\r\n        case Operator.IMPL:\r\n          return OR(NOT(left), right);\r\n        case Operator.AND:\r\n          return AND(left, right);\r\n        case Operator.OR:\r\n          return OR(left, right);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst expandInward = (tree: SyntaxTree): SyntaxTree => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const { operand } = tree;\r\n      switch (operand.nodeType) {\r\n        case SyntaxTreeNodeType.CONST:\r\n          return CONST(!operand.value);\r\n        case SyntaxTreeNodeType.IDEN:\r\n          return tree;\r\n        case SyntaxTreeNodeType.UNARY:\r\n          return expandInward(operand.operand);\r\n        case SyntaxTreeNodeType.BINARY: {\r\n          const expandedOp =\r\n            operand.operator === Operator.AND\r\n              ? Operator.OR\r\n              : Operator.AND;\r\n          return expandInward(\r\n            BINARY(\r\n              expandedOp,\r\n              NOT(operand.left),\r\n              NOT(operand.right)\r\n            )\r\n          );\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = expandInward(tree.left);\r\n      const right = expandInward(tree.right);\r\n      if (tree.operator === Operator.AND) {\r\n        return AND(left, right);\r\n      }\r\n      // operator must be OR\r\n      if (\r\n        right.nodeType === SyntaxTreeNodeType.BINARY &&\r\n        right.operator === Operator.AND\r\n      ) {\r\n        const leftExp = expandInward(OR(left, right.left));\r\n        const rightExp = expandInward(\r\n          OR(left, right.right)\r\n        );\r\n        return AND(leftExp, rightExp);\r\n      }\r\n\r\n      if (\r\n        left.nodeType === SyntaxTreeNodeType.BINARY &&\r\n        left.operator === Operator.AND\r\n      ) {\r\n        const leftExp = expandInward(OR(left.left, right));\r\n        const rightExp = expandInward(\r\n          OR(left.right, right)\r\n        );\r\n        return AND(leftExp, rightExp);\r\n      }\r\n\r\n      // neither left or right sub tree contains an AND operator\r\n      return OR(left, right);\r\n    }\r\n  }\r\n};\r\n\r\nconst simplifyDisjunctionClause = (\r\n  clause: Set<SyntaxTree>\r\n) => {\r\n  const clauses = [...clause];\r\n\r\n  if (\r\n    clauses.every(\r\n      (clause) =>\r\n        clause.nodeType === SyntaxTreeNodeType.CONST &&\r\n        !clause.value\r\n    )\r\n  ) {\r\n    return new Set([CONST(false)]);\r\n  }\r\n\r\n  if (\r\n    clauses.some(\r\n      (clause) =>\r\n        clause.nodeType === SyntaxTreeNodeType.CONST &&\r\n        clause.value\r\n    )\r\n  ) {\r\n    return new Set([CONST(true)]);\r\n  }\r\n\r\n  const simplified = new Set<SyntaxTree>();\r\n  const seen = new Set<string>();\r\n  for (const clause of clauses) {\r\n    switch (clause.nodeType) {\r\n      case SyntaxTreeNodeType.IDEN: {\r\n        if (seen.has(syntaxTreeToString(NOT(clause)))) {\r\n          return new Set([CONST(true)]);\r\n        }\r\n        const clauseRepr = syntaxTreeToString(clause);\r\n        if (!seen.has(clauseRepr)) {\r\n          seen.add(clauseRepr);\r\n          simplified.add(clause);\r\n        }\r\n        break;\r\n      }\r\n      case SyntaxTreeNodeType.UNARY: {\r\n        if (seen.has(syntaxTreeToString(clause.operand))) {\r\n          return new Set([CONST(true)]);\r\n        }\r\n        const clauseRepr = syntaxTreeToString(clause);\r\n        if (!seen.has(clauseRepr)) {\r\n          seen.add(clauseRepr);\r\n          simplified.add(clause);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return simplified;\r\n};\r\n\r\nconst collectClause = (\r\n  tree: SyntaxTree,\r\n  clause: Set<Set<SyntaxTree>>\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n    case SyntaxTreeNodeType.UNARY:\r\n      clause.add(new Set([tree]));\r\n      break;\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      if (tree.operator === Operator.AND) {\r\n        collectClause(tree.left, clause);\r\n        collectClause(tree.right, clause);\r\n        return;\r\n      }\r\n      const subClause = new Set<Set<SyntaxTree>>();\r\n      collectClause(tree.left, subClause);\r\n      collectClause(tree.right, subClause);\r\n      const flattened = new Set<SyntaxTree>();\r\n      subClause.forEach((group) => {\r\n        group.forEach((node) => {\r\n          flattened.add(node);\r\n        });\r\n      });\r\n      clause.add(simplifyDisjunctionClause(flattened));\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\nconst syntaxTreeFromClause = (clause: Set<SyntaxTree>) => {\r\n  if (clause.size === 0) {\r\n    return CONST(false);\r\n  }\r\n  const nodes = [...clause];\r\n  let current = nodes[0];\r\n  for (const node of nodes.slice(1)) {\r\n    current = OR(current, node);\r\n  }\r\n  return current;\r\n};\r\n\r\nexport const syntaxTreeNormalize = (tree: SyntaxTree) => {\r\n  const clauses = new Set<Set<SyntaxTree>>();\r\n  collectClause(expandInward(rewriteTree(tree)), clauses);\r\n\r\n  const nodes = [...clauses].map((clause) =>\r\n    syntaxTreeFromClause(clause)\r\n  );\r\n  if (nodes.length === 0) {\r\n    return CONST(false);\r\n  }\r\n\r\n  if (\r\n    nodes.some(\r\n      (node) =>\r\n        node.nodeType === SyntaxTreeNodeType.CONST &&\r\n        !node.value\r\n    )\r\n  ) {\r\n    return CONST(false);\r\n  }\r\n\r\n  if (\r\n    nodes.every(\r\n      (node) =>\r\n        node.nodeType === SyntaxTreeNodeType.CONST &&\r\n        node.value\r\n    )\r\n  ) {\r\n    return CONST(true);\r\n  }\r\n\r\n  // Top level complement\r\n  const seen = new Set<string>();\r\n  for (const node of nodes) {\r\n    if (node.nodeType === SyntaxTreeNodeType.IDEN) {\r\n      if (seen.has(syntaxTreeToString(NOT(node)))) {\r\n        return CONST(false);\r\n      }\r\n      seen.add(node.symbol);\r\n    }\r\n\r\n    if (node.nodeType === SyntaxTreeNodeType.UNARY) {\r\n      if (\r\n        seen.has(\r\n          (node.operand as SyntaxTreeNodeIden).symbol\r\n        )\r\n      ) {\r\n        return CONST(false);\r\n      }\r\n      seen.add(syntaxTreeToString(node));\r\n    }\r\n  }\r\n\r\n  const flatClauses = [...clauses];\r\n  let hasMatchThisCycle = false;\r\n  do {\r\n    if (hasMatchThisCycle) {\r\n      hasMatchThisCycle = false;\r\n    }\r\n\r\n    for (let i = 0; i < flatClauses.length; i++) {\r\n      for (let j = 0; j < flatClauses.length; j++) {\r\n        if (i === j) {\r\n          continue;\r\n        }\r\n        const left = flatClauses[i];\r\n        const right = flatClauses[j];\r\n\r\n        if (left.size === right.size) {\r\n          const diff = setDifference(left, right);\r\n          if (diff.size === 1) {\r\n            const newLeft = setDifference(left, diff);\r\n            flatClauses.splice(i, 1, newLeft);\r\n            const rightNewIndex =\r\n              flatClauses.indexOf(right);\r\n            if (rightNewIndex !== -1) {\r\n              flatClauses.splice(rightNewIndex, 1);\r\n            }\r\n            hasMatchThisCycle = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (hasMatchThisCycle) {\r\n        break;\r\n      }\r\n    }\r\n  } while (hasMatchThisCycle);\r\n\r\n  let normalTree: SyntaxTree | undefined = undefined;\r\n  for (const clause of flatClauses) {\r\n    const current = syntaxTreeFromClause(clause);\r\n    if (normalTree === undefined) {\r\n      normalTree = current;\r\n    } else {\r\n      normalTree = AND(normalTree, current);\r\n    }\r\n  }\r\n\r\n  if (normalTree === undefined) {\r\n    return CONST(false);\r\n  }\r\n\r\n  return normalTree;\r\n};\r\n\r\nconst setDifference = <T extends SyntaxTree>(\r\n  ls: Set<T>,\r\n  rs: Set<T>\r\n) => {\r\n  const rStringSet = new Set();\r\n  rs.forEach((r) => rStringSet.add(syntaxTreeToString(r)));\r\n\r\n  const c = new Set<T>();\r\n  ls.forEach((l) => {\r\n    const lString = syntaxTreeToString(l);\r\n    if (!rStringSet.has(lString)) {\r\n      c.add(l);\r\n    }\r\n  });\r\n  return c;\r\n};\r\n","import { Operator } from \"$types/operators\";\r\n\r\nconst OPERATOR_REPR = new Map<Operator, string>([\r\n  [Operator.NOT, \"\\\\lnot\"],\r\n  [Operator.AND, \"\\\\land\"],\r\n  [Operator.OR, \"\\\\lor\"],\r\n  [Operator.IMPL, \"\\\\implies\"],\r\n  [Operator.IFF, \"\\\\iff\"],\r\n]);\r\n\r\nexport const operatorToLatex = (op: Operator) => {\r\n  return OPERATOR_REPR.get(op) ?? \"\";\r\n};\r\n","import { operatorToLatex } from \"$core/operator\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\n\r\nexport const syntaxTreeToLatex = (\r\n  tree: SyntaxTree\r\n): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return `\\\\textbf{${tree.value}}`;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree.symbol;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      let operandRepr = syntaxTreeToLatex(tree.operand);\r\n      if (\r\n        tree.operand.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        operandRepr = `( ${operandRepr} )`;\r\n      }\r\n      const operatorRepr = operatorToLatex(tree.operator);\r\n      return `${operatorRepr} ${operandRepr}`;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      let leftRepr = syntaxTreeToLatex(tree.left);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        leftRepr = `( ${leftRepr} )`;\r\n      }\r\n      let rightRepr = syntaxTreeToLatex(tree.right);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        rightRepr = `( ${rightRepr} )`;\r\n      }\r\n      const opRepr = operatorToLatex(tree.operator);\r\n      return `${leftRepr} ${opRepr} ${rightRepr}`;\r\n    }\r\n  }\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeNormalize } from \"$core/syntax-tree/normalize\";\r\nimport { syntaxTreeToLatex } from \"$core/syntax-tree/to-latex\";\r\nimport { CheckerRouteLoaderData } from \"$types/loader-data\";\r\nimport { LoaderFunction } from \"react-router\";\r\n\r\nexport const checkerRouteLoader: LoaderFunction = ({\r\n  request,\r\n}) => {\r\n  const url = new URL(request.url);\r\n  const userInputRaw = url.searchParams.get(\"input\");\r\n\r\n  if (\r\n    userInputRaw === null ||\r\n    userInputRaw.trim().length === 0\r\n  ) {\r\n    const loaderData: CheckerRouteLoaderData = {\r\n      userInput: \"\",\r\n      items: [],\r\n    };\r\n    return loaderData;\r\n  }\r\n\r\n  const expressions: CheckerRouteLoaderData[\"items\"] = [];\r\n\r\n  for (const userInput of userInputRaw.split(\",\")) {\r\n    const parseResult = parse(userInput);\r\n    expressions.push(\r\n      parseResult.ok\r\n        ? {\r\n            ok: true,\r\n            normalizedTree: syntaxTreeNormalize(\r\n              parseResult.tree\r\n            ),\r\n            originalTree: parseResult.tree,\r\n            inputInterpretationLatex: syntaxTreeToLatex(\r\n              parseResult.tree\r\n            ),\r\n            inputRaw: userInput.trim(),\r\n          }\r\n        : { ok: false, inputRaw: userInput.trim() }\r\n    );\r\n  }\r\n  const loaderData: CheckerRouteLoaderData = {\r\n    userInput: userInputRaw,\r\n    items: expressions,\r\n  };\r\n  return loaderData;\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeToLatex } from \"$core/syntax-tree/to-latex\";\r\nimport { ComparatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { LoaderFunction } from \"react-router\";\r\n\r\nexport const comparatorRouteLoader: LoaderFunction = ({\r\n  request,\r\n}) => {\r\n  const url = new URL(request.url);\r\n  const inputRaw = url.searchParams.get(\"input\");\r\n\r\n  if (inputRaw === null || inputRaw.trim().length === 0) {\r\n    const loaderData: ComparatorRouteLoaderData = {\r\n      userInput: \"\",\r\n      items: [],\r\n    };\r\n    return loaderData;\r\n  }\r\n\r\n  const expressions: ComparatorRouteLoaderData[\"items\"] =\r\n    [];\r\n  for (const userInput of inputRaw.split(\",\")) {\r\n    const parseResult = parse(userInput);\r\n    expressions.push(\r\n      parseResult.ok\r\n        ? {\r\n            ok: true,\r\n            inputRaw: userInput.trim(),\r\n            tree: parseResult.tree,\r\n            inputInterpretationLatex: syntaxTreeToLatex(\r\n              parseResult.tree\r\n            ),\r\n          }\r\n        : {\r\n            ok: false,\r\n            inputRaw: userInput.trim(),\r\n          }\r\n    );\r\n  }\r\n\r\n  const loaderData: ComparatorRouteLoaderData = {\r\n    userInput: inputRaw.trim(),\r\n    items: expressions,\r\n  };\r\n  return loaderData;\r\n};\r\n","import {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\n\r\nexport const syntaxTreeCollectSymbols = (\r\n  tree: SyntaxTree\r\n) => {\r\n  const symbols = new Set<string>();\r\n  const nodes = [tree];\r\n  while (nodes.length > 0) {\r\n    const curr = nodes.shift()!;\r\n    switch (curr.nodeType) {\r\n      case SyntaxTreeNodeType.IDEN:\r\n        symbols.add(curr.symbol);\r\n        break;\r\n      case SyntaxTreeNodeType.UNARY:\r\n        nodes.push(curr.operand);\r\n        break;\r\n      case SyntaxTreeNodeType.BINARY:\r\n        nodes.push(curr.left);\r\n        nodes.push(curr.right);\r\n        break;\r\n    }\r\n  }\r\n  return [...symbols].toSorted((a, b) =>\r\n    a.localeCompare(b)\r\n  );\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeCollectSymbols } from \"$core/syntax-tree/collect-symbols\";\r\nimport { syntaxTreeToLatex } from \"$core/syntax-tree/to-latex\";\r\nimport { EvaluatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { LoaderFunction } from \"react-router\";\r\n\r\nexport const evaluatorRouteLoader: LoaderFunction = ({\r\n  request,\r\n}) => {\r\n  const url = new URL(request.url);\r\n  const userInputRaw = url.searchParams.get(\"input\");\r\n\r\n  if (\r\n    userInputRaw === null ||\r\n    userInputRaw.trim().length === 0\r\n  ) {\r\n    const loaderData: EvaluatorRouteLoaderData = {\r\n      userInput: \"\",\r\n      symbols: [],\r\n      items: [],\r\n    };\r\n    return loaderData;\r\n  }\r\n\r\n  const symbols = new Set<string>();\r\n  const expressions: EvaluatorRouteLoaderData[\"items\"] = [];\r\n  for (const userInput of userInputRaw.split(\",\")) {\r\n    const parseResult = parse(userInput);\r\n\r\n    if (!parseResult.ok) {\r\n      expressions.push({\r\n        inputRaw: userInput.trim(),\r\n        ok: false,\r\n      });\r\n      continue;\r\n    }\r\n    const { tree } = parseResult;\r\n    syntaxTreeCollectSymbols(tree).forEach((symbol) =>\r\n      symbols.add(symbol)\r\n    );\r\n    expressions.push({\r\n      ok: true,\r\n      inputRaw: userInput.trim(),\r\n      inputInterpretationLatex: syntaxTreeToLatex(tree),\r\n      tree,\r\n    });\r\n  }\r\n\r\n  const loaderData: EvaluatorRouteLoaderData = {\r\n    userInput: userInputRaw,\r\n    items: expressions,\r\n    symbols: [...symbols].toSorted((a, b) =>\r\n      a.localeCompare(b)\r\n    ),\r\n  };\r\n  return loaderData;\r\n};\r\n","import { parse } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeToLatex } from \"$core/syntax-tree/to-latex\";\r\nimport { RewriterRouteLoaderData } from \"$types/loader-data\";\r\nimport { LoaderFunction } from \"react-router\";\r\n\r\nexport const rewriterRouteLoader: LoaderFunction = ({\r\n  request,\r\n}) => {\r\n  const url = new URL(request.url);\r\n  const userInputRaw = url.searchParams.get(\"input\");\r\n  if (\r\n    userInputRaw === null ||\r\n    userInputRaw.trim().length === 0\r\n  ) {\r\n    const loaderData: RewriterRouteLoaderData = {\r\n      userInput: \"\",\r\n      items: [],\r\n    };\r\n    return loaderData;\r\n  }\r\n\r\n  const expressions: RewriterRouteLoaderData[\"items\"] = [];\r\n  for (const userInput of userInputRaw.split(\",\")) {\r\n    const parseResult = parse(userInput);\r\n    if (!parseResult.ok) {\r\n      expressions.push({ ok: false, inputRaw: userInput });\r\n      continue;\r\n    }\r\n    expressions.push({\r\n      ok: true,\r\n      inputRaw: userInput,\r\n      originalTree: parseResult.tree,\r\n      inputInterpretationLatex: syntaxTreeToLatex(\r\n        parseResult.tree\r\n      ),\r\n    });\r\n  }\r\n\r\n  const loaderData: RewriterRouteLoaderData = {\r\n    userInput: userInputRaw,\r\n    items: expressions,\r\n  };\r\n  return loaderData;\r\n};\r\n","import { lightBlue } from \"@mui/material/colors\";\r\nimport createPalette from \"@mui/material/styles/createPalette\";\r\n\r\nexport const PALETTE_BASE = createPalette({\r\n  primary: { main: lightBlue[300] },\r\n  contrastThreshold: 9,\r\n  tonalOffset: 0.5,\r\n});\r\n","import { indigo } from \"@mui/material/colors\";\r\nimport createPalette from \"@mui/material/styles/createPalette\";\r\n\r\nexport const PALETTE_CHECKER_ROUTE = createPalette({\r\n  primary: { main: indigo[200] },\r\n  tonalOffset: 0.47,\r\n  contrastThreshold: 9,\r\n});\r\n","import { orange } from \"@mui/material/colors\";\r\nimport createPalette from \"@mui/material/styles/createPalette\";\r\n\r\nexport const PALETTE_COMPARATOR_ROUTE = createPalette({\r\n  primary: { main: orange[200] },\r\n  tonalOffset: 0.47,\r\n  contrastThreshold: 9,\r\n});\r\n","import { teal } from \"@mui/material/colors\";\r\nimport createPalette from \"@mui/material/styles/createPalette\";\r\n\r\nexport const PALETTE_EVALUATOR_ROUTE = createPalette({\r\n  primary: { main: teal[200] },\r\n  tonalOffset: 0.5,\r\n  contrastThreshold: 9,\r\n});\r\n","import { pink } from \"@mui/material/colors\";\r\nimport createPalette from \"@mui/material/styles/createPalette\";\r\n\r\nexport const PALETTE_REWRITER_ROUTE = createPalette({\r\n  primary: { main: pink[200] },\r\n  tonalOffset: 0.47,\r\n  contrastThreshold: 9,\r\n});\r\n","import {\r\n  createTheme,\r\n  responsiveFontSizes,\r\n} from \"@mui/material\";\r\nimport { PALETTE_BASE } from \"./palette-base\";\r\nimport { PALETTE_CHECKER_ROUTE } from \"./palette-checker-route\";\r\nimport { PALETTE_COMPARATOR_ROUTE } from \"./palette-comparator-route\";\r\nimport { PALETTE_EVALUATOR_ROUTE } from \"./palette-evaluator-route\";\r\nimport { PALETTE_REWRITER_ROUTE } from \"./palette-rewriter-route\";\r\n\r\nlet _THEME_GLOBAL = createTheme({\r\n  palette: PALETTE_BASE,\r\n});\r\n_THEME_GLOBAL = responsiveFontSizes(_THEME_GLOBAL);\r\n\r\nexport const THEME_GLOBAL = _THEME_GLOBAL;\r\n\r\nexport const THEME_EVALUATOR_ROUTE = responsiveFontSizes(\r\n  createTheme({\r\n    palette: PALETTE_EVALUATOR_ROUTE,\r\n  })\r\n);\r\nexport const THEME_CHECKER_ROUTE = responsiveFontSizes(\r\n  createTheme({\r\n    palette: PALETTE_CHECKER_ROUTE,\r\n  })\r\n);\r\nexport const THEME_COMPARATOR_ROUTE = responsiveFontSizes(\r\n  createTheme({\r\n    palette: PALETTE_COMPARATOR_ROUTE,\r\n  })\r\n);\r\nexport const THEME_REWRITER_ROUTE = responsiveFontSizes(\r\n  createTheme({\r\n    palette: PALETTE_REWRITER_ROUTE,\r\n  })\r\n);\r\n","import { Typography, useTheme } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useLocation } from \"react-router\";\r\n\r\nconst NAV_ITEMS = [\r\n  \"evaluator\",\r\n  \"comparator\",\r\n  \"checker\",\r\n  \"rewriter\",\r\n];\r\n\r\nexport const AppNavGroup: FC = () => {\r\n  const { t } = useTranslation(\"nav\");\r\n  const { palette } = useTheme();\r\n  const { pathname } = useLocation();\r\n  return (\r\n    <Fragment>\r\n      <Typography\r\n        component={Link}\r\n        to={`/`}\r\n        sx={{\r\n          color: palette.primary.dark,\r\n          textTransform: \"capitalize\",\r\n          textDecorationLine: \"none\",\r\n        }}\r\n      >\r\n        {t(\"home\")}\r\n      </Typography>\r\n      {NAV_ITEMS.map((id, index) => {\r\n        const target = `/${id}`;\r\n        const fontWeight =\r\n          target.localeCompare(pathname) === 0\r\n            ? 900\r\n            : undefined;\r\n        return (\r\n          <Typography\r\n            key={\"item\" + index}\r\n            component={Link}\r\n            to={target}\r\n            sx={{\r\n              color: palette.primary.dark,\r\n              textTransform: \"capitalize\",\r\n              fontWeight,\r\n              textDecorationLine: \"none\",\r\n            }}\r\n          >\r\n            {t(id)}\r\n          </Typography>\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n","import { SxProps, Theme, Typography } from \"@mui/material\";\r\nimport { KatexOptions } from \"katex\";\r\nimport { FC, ReactNode, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  children: ReactNode;\r\n  sx?: SxProps<Theme>;\r\n  options?: KatexOptions;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { sx, children, options } = props;\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      window.renderMathInElement(ref.current, {\r\n        strict: false,\r\n        output: \"html\",\r\n        delimiters: [\r\n          { left: \"$$\", right: \"$$\", display: true },\r\n          { left: \"$\", right: \"$\", display: false },\r\n        ],\r\n        ...options,\r\n      });\r\n    }\r\n  }, [children, ref, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      sx={{\r\n        ...sx,\r\n        \"& .katex-display > .katex\": {\r\n          whiteSpace: \"normal\",\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport {\r\n  CheckRounded,\r\n  KeyboardArrowDownRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  Dispatch,\r\n  FC,\r\n  Fragment,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\ntype EditorRibbonButtonProps = {\r\n  options: { label: string; value: string }[];\r\n  onClick: Dispatch<string>;\r\n};\r\nexport const EditorRibbonButton: FC<\r\n  EditorRibbonButtonProps\r\n> = (props) => {\r\n  const { options, onClick } = props;\r\n  const { palette } = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const [selected, setSelected] = useState(options[0]);\r\n  const anchorRef = useRef<HTMLDivElement | null>(null);\r\n  return (\r\n    <Fragment>\r\n      <ButtonGroup\r\n        ref={anchorRef}\r\n        variant=\"contained\"\r\n        disableElevation\r\n        disableRipple\r\n        color=\"primary\"\r\n      >\r\n        <Button\r\n          onClick={() => onClick(selected.value)}\r\n          sx={{\r\n            \"&:hover\": {\r\n              color: palette.getContrastText(\r\n                palette.primary.main\r\n              ),\r\n              backgroundColor: palette.primary.main,\r\n            },\r\n            \"color\": palette.primary.dark,\r\n            \"backgroundColor\": palette.primary.light,\r\n          }}\r\n        >\r\n          <StyledLatex\r\n            sx={{\r\n              textTransform: \"none\",\r\n              fontFamily: \"monospace\",\r\n            }}\r\n          >\r\n            {`${selected.label}`}\r\n          </StyledLatex>\r\n        </Button>\r\n        <Button\r\n          onClick={() => setOpen(true)}\r\n          sx={{\r\n            \"&:hover\": {\r\n              color: palette.getContrastText(\r\n                palette.primary.main\r\n              ),\r\n              backgroundColor: palette.primary.main,\r\n            },\r\n            \"color\": palette.primary.dark,\r\n            \"backgroundColor\": palette.primary.light,\r\n          }}\r\n        >\r\n          <KeyboardArrowDownRounded\r\n            sx={{\r\n              transition: \"transform 0.2s ease\",\r\n              transform: open\r\n                ? \"rotate(180deg)\"\r\n                : \"rotate(0deg)\",\r\n            }}\r\n          />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Menu\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        onClose={() => setOpen(false)}\r\n        onClick={() => setOpen(false)}\r\n      >\r\n        {options.map((option, index) => {\r\n          const isSelected =\r\n            option.label === selected.label;\r\n          return (\r\n            <MenuItem\r\n              key={\"option\" + index}\r\n              disableRipple\r\n              selected={isSelected}\r\n              onClick={() => setSelected(option)}\r\n              sx={{ padding: 2 }}\r\n            >\r\n              <ListItemIcon>\r\n                {isSelected && <CheckRounded />}\r\n              </ListItemIcon>\r\n              <ListItemText disableTypography>\r\n                <StyledLatex\r\n                  sx={{ fontFamily: \"monospace\" }}\r\n                >\r\n                  {`${option.label}`}\r\n                </StyledLatex>\r\n              </ListItemText>\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { Stack } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { EditorRibbonButton } from \"./EditorRibbonButton\";\r\n\r\nconst OPERATOR_TEXT: {\r\n  label: string;\r\n  value: string;\r\n}[] = [\r\n  {\r\n    label: \"$\\\\texttt{not}$\",\r\n    value: \"not\",\r\n  },\r\n  {\r\n    label: \"$\\\\texttt{and}$\",\r\n    value: \"and\",\r\n  },\r\n  {\r\n    label: \"$\\\\texttt{or}$\",\r\n    value: \"or\",\r\n  },\r\n  {\r\n    label: \"$\\\\texttt{implies}$\",\r\n    value: \"implies\",\r\n  },\r\n  {\r\n    label: \"$\\\\texttt{iff}$\",\r\n    value: \"iff\",\r\n  },\r\n];\r\n\r\nconst OPERATOR_SYMBOL: {\r\n  label: string;\r\n  value: string;\r\n}[] = [\r\n  {\r\n    label: \"$\\\\mathbf{\\\\lnot}$\",\r\n    value: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    label: \"$\\\\mathbf{\\\\land}$\",\r\n    value: \"\\u{2227}\",\r\n  },\r\n  {\r\n    label: \"$\\\\mathbf{\\\\lor}$\",\r\n    value: \"\\u{2228}\",\r\n  },\r\n  {\r\n    label: \"$\\\\mathbf{\\\\implies}$\",\r\n    value: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    label: \"$\\\\mathbf{\\\\iff}$\",\r\n    value: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonProps = {\r\n  onClick: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { onClick } = props;\r\n  return (\r\n    <Stack\r\n      flexDirection=\"row\"\r\n      flexWrap=\"wrap\"\r\n      spacing={1}\r\n      useFlexGap\r\n    >\r\n      {OPERATOR_TEXT.map((option, index) => (\r\n        <EditorRibbonButton\r\n          key={\"insert-btn-text\" + index}\r\n          onClick={(value) => onClick(value)}\r\n          options={[OPERATOR_SYMBOL[index], option]}\r\n        />\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  CheckRounded,\r\n  ContentCopyRounded,\r\n  PlayArrowRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  Stack,\r\n  TextField,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  Dispatch,\r\n  FC,\r\n  memo,\r\n  SyntheticEvent,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\n\r\ntype EditorProps = {\r\n  placeholder: string;\r\n  value: string;\r\n  onChange: Dispatch<string>;\r\n  onSubmit: () => void;\r\n};\r\nconst Editor_: FC<EditorProps> = (props) => {\r\n  const { placeholder, value, onChange, onSubmit } = props;\r\n  const { palette } = useTheme();\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"editor\",\r\n  });\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n  const [hasCopied, setHasCopied] = useState(false);\r\n  const [cursorStartPos, setCusorStartPos] = useState(0);\r\n  const [cursorEndPos, setCusorEndPos] = useState(0);\r\n\r\n  const handleInsertChar = (text: string) => {\r\n    if (inputRef.current === null) {\r\n      return;\r\n    }\r\n    const left = value.slice(0, cursorStartPos);\r\n    const right = value.slice(cursorEndPos);\r\n    onChange(`${left}${text}${right}`);\r\n    setCusorStartPos(`${left}${text}`.length);\r\n    setCusorEndPos(`${left}${text}`.length);\r\n  };\r\n\r\n  const handleSelect = (\r\n    e: SyntheticEvent<HTMLDivElement, Event>\r\n  ) => {\r\n    const target = e.target as HTMLInputElement;\r\n    setCusorStartPos(target.selectionStart ?? 0);\r\n    setCusorEndPos(target.selectionEnd ?? 0);\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon onClick={handleInsertChar} />\r\n      <TextField\r\n        inputRef={inputRef}\r\n        fullWidth\r\n        multiline\r\n        rows={5}\r\n        value={value}\r\n        placeholder={placeholder}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        slotProps={{\r\n          input: {\r\n            sx: {\r\n              fontFamily: \"monospace\",\r\n            },\r\n          },\r\n          htmlInput: {\r\n            autoCapitalize: \"off\",\r\n            spellCheck: \"false\",\r\n            onSelect: handleSelect,\r\n          },\r\n        }}\r\n      />\r\n      <Stack\r\n        spacing={1}\r\n        useFlexGap\r\n        flexWrap=\"wrap\"\r\n        direction=\"row\"\r\n      >\r\n        <Button\r\n          disableElevation\r\n          disableRipple\r\n          disabled={value.trim().length === 0}\r\n          variant=\"contained\"\r\n          startIcon={<PlayArrowRounded />}\r\n          onClick={onSubmit}\r\n          sx={{\r\n            \"&:hover\": {\r\n              color: palette.getContrastText(\r\n                palette.primary.main\r\n              ),\r\n              backgroundColor: palette.primary.main,\r\n            },\r\n            \"color\": palette.primary.dark,\r\n            \"backgroundColor\": palette.primary.light,\r\n          }}\r\n        >\r\n          {t(\"run\")}\r\n        </Button>\r\n        <Button\r\n          disableElevation\r\n          disableRipple\r\n          startIcon={\r\n            !hasCopied ? (\r\n              <ContentCopyRounded />\r\n            ) : (\r\n              <CheckRounded />\r\n            )\r\n          }\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            navigator.clipboard.writeText(value);\r\n            setHasCopied(true);\r\n            setTimeout(() => {\r\n              setHasCopied(false);\r\n            }, 1000);\r\n          }}\r\n          sx={{\r\n            \"&:hover\": {\r\n              color: palette.getContrastText(\r\n                palette.primary.main\r\n              ),\r\n              backgroundColor: palette.primary.main,\r\n            },\r\n            \"color\": palette.primary.dark,\r\n            \"backgroundColor\": palette.primary.light,\r\n          }}\r\n        >\r\n          {!hasCopied ? t(\"copy\") : t(\"copied\")}\r\n        </Button>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport const Editor = memo(\r\n  Editor_,\r\n  (prev, next) =>\r\n    prev.value === next.value &&\r\n    prev.onSubmit === next.onSubmit\r\n);\r\n","import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport { FC, Fragment, ReactNode } from \"react\";\r\n\r\ntype BaseLayoutProps = {\r\n  title: string;\r\n  appHeader: ReactNode;\r\n  children: ReactNode;\r\n};\r\nexport const BaseLayout: FC<BaseLayoutProps> = (props) => {\r\n  const { appHeader, title: banner, children } = props;\r\n  const { palette } = useTheme();\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        width=\"100%\"\r\n        maxWidth=\"lg\"\r\n        marginX={{ xs: 0, md: \"auto\" }}\r\n        paddingX={{ xs: 2, md: 0 }}\r\n        paddingY={4}\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"flex-start\",\r\n          flexWrap: \"wrap\",\r\n          gap: 2,\r\n        }}\r\n      >\r\n        {appHeader}\r\n      </Box>\r\n      <Box\r\n        paddingX={{ xs: 2, md: 0 }}\r\n        paddingY={4}\r\n        sx={{\r\n          backgroundColor: palette.primary.light,\r\n          color: palette.primary.dark,\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h1\"\r\n          fontWeight={900}\r\n          fontFamily=\"monospace\"\r\n          textTransform=\"capitalize\"\r\n          maxWidth=\"lg\"\r\n          marginX={{ xs: 0, md: \"auto\" }}\r\n          sx={{\r\n            textWrap: \"balance\",\r\n            whiteSpace: \"normal\",\r\n            overflowWrap: \"break-word\",\r\n            hyphens: \"auto\",\r\n          }}\r\n        >\r\n          {banner}\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        width=\"100%\"\r\n        maxWidth=\"lg\"\r\n        marginX={{ xs: 0, md: \"auto\" }}\r\n        paddingX={{ xs: 2, md: 0 }}\r\n        paddingY={8}\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  Alert,\r\n  AlertProps,\r\n  AlertTitle,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype StyledAlertProps = {\r\n  severity: AlertProps[\"severity\"];\r\n  children: ReactNode;\r\n};\r\nexport const StyledAlert: FC<StyledAlertProps> = (\r\n  props\r\n) => {\r\n  const { children, severity } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"alert\",\r\n  });\r\n\r\n  return (\r\n    <Alert severity={severity}>\r\n      <AlertTitle sx={{ fontWeight: 900 }}>\r\n        {t(\"notice\")}\r\n      </AlertTitle>\r\n      {children}\r\n    </Alert>\r\n  );\r\n};\r\n","import { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype InputDisplayManyProps = {\r\n  items: ({ inputRaw: string } & Maybe<{\r\n    inputInterpretationLatex: string;\r\n  }>)[];\r\n};\r\nexport const InputDisplayMany: FC<InputDisplayManyProps> = (\r\n  props\r\n) => {\r\n  const { items } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"input-display\",\r\n  });\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      {items.map((item, index) => {\r\n        const inputNum = index + 1;\r\n\r\n        if (!item.ok) {\r\n          return (\r\n            <StyledLatex\r\n              key={\"expr\" + index}\r\n              sx={{\r\n                color: ({ palette }) => palette.error.main,\r\n              }}\r\n            >\r\n              {`$$\\\\varnothing \\\\tag{${inputNum}}$$`}\r\n            </StyledLatex>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <StyledLatex key={\"expr\" + index}>\r\n            {`$$${item.inputInterpretationLatex} \\\\tag{${inputNum}}$$`}\r\n          </StyledLatex>\r\n        );\r\n      })}\r\n      {items.some((expr) => !expr.ok) && (\r\n        <StyledAlert severity=\"warning\">\r\n          <Typography>\r\n            {t(\"warnings.the-following-input-are-invalid\")}\r\n          </Typography>\r\n          <List>\r\n            {items.map((item, index) => {\r\n              if (item.ok) {\r\n                return null;\r\n              }\r\n              const inputNum = index + 1;\r\n              return (\r\n                <ListItem key={\"invalid-input\" + index}>\r\n                  <ListItemIcon>\r\n                    <Typography>\r\n                      {`(${inputNum})`}\r\n                    </Typography>\r\n                  </ListItemIcon>\r\n                  <ListItemText disableTypography>\r\n                    {item.inputRaw.length === 0 ? (\r\n                      <Typography fontStyle=\"italic\">\r\n                        {t(\"empty-string\")}\r\n                      </Typography>\r\n                    ) : (\r\n                      <Typography fontFamily=\"monospace\">\r\n                        {item.inputRaw}\r\n                      </Typography>\r\n                    )}\r\n                  </ListItemText>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        </StyledAlert>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { syntaxTreeCollectSymbols } from \"$core/syntax-tree/collect-symbols\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype VerdictDisplayProps = {\r\n  result: SyntaxTree;\r\n  originalLatex: string;\r\n  itemNum: number;\r\n};\r\nexport const VerdictDisplay: FC<VerdictDisplayProps> = (\r\n  props\r\n) => {\r\n  const { itemNum, result, originalLatex } = props;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"checker-view.cards.output.text\",\r\n  });\r\n\r\n  let resultT = t(\"contingent\", {\r\n    variables:\r\n      \"$\" +\r\n      syntaxTreeCollectSymbols(result)\r\n        .toSorted()\r\n        .join(\",\") +\r\n      \"$\",\r\n  });\r\n  if (result.nodeType === SyntaxTreeNodeType.CONST) {\r\n    resultT = result.value\r\n      ? t(\"tautology\")\r\n      : t(\"contradiction\");\r\n  }\r\n\r\n  return (\r\n    <StyledLatex>\r\n      {t(\"formula-is-value\", {\r\n        formula: `$$${originalLatex}\\\\tag{${itemNum}}$$`,\r\n        value: `$$\\\\boxed{\\\\textbf{${resultT}}}$$`,\r\n      })}\r\n    </StyledLatex>\r\n  );\r\n};\r\n","import {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  Collapse,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode, useState } from \"react\";\r\n\r\ntype ExpressionCardProps = {\r\n  primary: ReactNode;\r\n  secondary: ReactNode;\r\n};\r\nexport const ExpressionCard: FC<ExpressionCardProps> = (\r\n  props\r\n) => {\r\n  const { primary, secondary } = props;\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const toggleExpanded = () => {\r\n    setIsExpanded((prev) => !prev);\r\n  };\r\n  return (\r\n    <Card variant=\"outlined\">\r\n      <CardActionArea\r\n        disableRipple\r\n        disableTouchRipple\r\n        onClick={toggleExpanded}\r\n      >\r\n        <CardContent>{primary}</CardContent>\r\n      </CardActionArea>\r\n      <Collapse in={isExpanded}>{secondary}</Collapse>\r\n    </Card>\r\n  );\r\n};\r\n","import { SymbolTable } from \"$types/syntax-tree\";\r\n\r\nexport const getPermutation = (\r\n  size: number,\r\n  symbols: string[]\r\n) => {\r\n  const perm: SymbolTable[] = [];\r\n  const permSize = 1 << size;\r\n  for (let i = 0; i < permSize; i++) {\r\n    const repr = i.toString(2).padStart(size, \"0\");\r\n    const p = new Map<string, boolean>();\r\n    for (let j = 0; j < size; j++) {\r\n      p.set(symbols[j], repr[j] === \"0\");\r\n    }\r\n    perm.push(p);\r\n  }\r\n  return perm;\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SyntaxTreeNodeType } from \"$types/syntax-tree\";\r\n\r\nexport const exprTreeCollectSymbols = (\r\n  exprTree: ExprTree\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  const nodes: ExprTree[] = [exprTree];\r\n\r\n  while (nodes.length > 0) {\r\n    const curr = nodes.shift()!;\r\n    switch (curr.nodeType) {\r\n      case SyntaxTreeNodeType.CONST:\r\n        break;\r\n      case SyntaxTreeNodeType.IDEN:\r\n        symbols.add(curr.repr);\r\n        break;\r\n      case SyntaxTreeNodeType.UNARY:\r\n        nodes.push(curr.child);\r\n        break;\r\n      case SyntaxTreeNodeType.BINARY:\r\n        nodes.push(curr.left);\r\n        nodes.push(curr.right);\r\n        break;\r\n    }\r\n  }\r\n  return symbols;\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SyntaxTreeNodeType } from \"$types/syntax-tree\";\r\n\r\nconst _exprTreeToLatex = (\r\n  tree: ExprTree,\r\n  table: Map<string, string> | null = null\r\n): string => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return `\\\\textbf{${tree.repr}}`;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      if (table !== null && table.has(tree.repr)) {\r\n        return table.get(tree.repr)!;\r\n      }\r\n      return tree.repr;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const child = _exprTreeToLatex(tree.child, table);\r\n      if (\r\n        tree.child.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        return `${tree.repr} ( ${child} )`;\r\n      }\r\n      return `${tree.repr} ${child}`;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      let left = _exprTreeToLatex(tree.left, table);\r\n      if (\r\n        tree.left.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        left = `( ${left} )`;\r\n      }\r\n\r\n      let right = _exprTreeToLatex(tree.right, table);\r\n      if (\r\n        tree.right.nodeType === SyntaxTreeNodeType.BINARY\r\n      ) {\r\n        right = `( ${right} )`;\r\n      }\r\n\r\n      return `${left} ${tree.repr} ${right}`;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeToLatex = (exprTree: ExprTree) => {\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n\r\nexport const exprTreeToLatexSubstitute = (\r\n  exprTree: ExprTree,\r\n  symbolMap: Map<string, string>\r\n) => {\r\n  return _exprTreeToLatex(exprTree, symbolMap);\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { exprTreeCollectSymbols } from \"./expr/evaluate\";\r\nimport { exprTreeToLatexSubstitute } from \"./expr/latex\";\r\n\r\ntype MinifiedSyntaxTree = {\r\n  label: string;\r\n  eval: (t: SymbolTable) => boolean;\r\n};\r\nconst traverse = (\r\n  tree: ExprTree,\r\n  accum: MinifiedSyntaxTree[],\r\n  seen: Set<string>,\r\n  symbolMap: Map<string, string>\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const repr = exprTreeToLatexSubstitute(\r\n        tree,\r\n        symbolMap\r\n      );\r\n      if (seen.has(repr)) {\r\n        return;\r\n      }\r\n      seen.add(repr);\r\n      traverse(tree.child, accum, seen, symbolMap);\r\n      const minified: MinifiedSyntaxTree = {\r\n        eval: tree.eval,\r\n        label: repr,\r\n      };\r\n      accum.push(minified);\r\n      return;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const repr = exprTreeToLatexSubstitute(\r\n        tree,\r\n        symbolMap\r\n      );\r\n      if (seen.has(repr)) {\r\n        return;\r\n      }\r\n      seen.add(repr);\r\n      traverse(tree.left, accum, seen, symbolMap);\r\n      traverse(tree.right, accum, seen, symbolMap);\r\n\r\n      const minified: MinifiedSyntaxTree = {\r\n        eval: tree.eval,\r\n        label: repr,\r\n      };\r\n      accum.push(minified);\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeFlattenPostOrder = (\r\n  tree: ExprTree\r\n) => {\r\n  const accum: MinifiedSyntaxTree[] = [];\r\n  const seen = new Set<string>();\r\n  const symbolMap = new Map<string, string>();\r\n  for (const symbol of exprTreeCollectSymbols(tree)) {\r\n    symbolMap.set(\r\n      symbol,\r\n      symbol.length >= 5\r\n        ? `${symbol.slice(0, 5)}\\\\ldots`\r\n        : symbol\r\n    );\r\n  }\r\n  traverse(tree, accum, seen, symbolMap);\r\n  return accum;\r\n};\r\n","import {\r\n  lighten,\r\n  TableCell,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC, memo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype TruthTableCellProps = { value: boolean };\r\nconst TruthTableCell_: FC<TruthTableCellProps> = (\r\n  props\r\n) => {\r\n  const { value } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"truth-table.text\",\r\n  });\r\n  const { palette } = useTheme();\r\n\r\n  const bgColor = value\r\n    ? palette.primary.light\r\n    : lighten(palette.primary.light, 0.6);\r\n\r\n  return (\r\n    <TableCell\r\n      align=\"center\"\r\n      sx={{\r\n        backgroundColor: bgColor,\r\n        color: palette.primary.dark,\r\n      }}\r\n    >\r\n      <Typography>\r\n        {value ? t(\"true\") : t(\"false\")}\r\n      </Typography>\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nexport const TruthTableCell = memo(\r\n  TruthTableCell_,\r\n  (prev, next) => {\r\n    return prev.value === next.value;\r\n  }\r\n);\r\n","import { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { getPermutation } from \"$core/eval\";\r\nimport { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { exprTreeFlattenPostOrder } from \"$core/tree/flatten\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  Button,\r\n  Stack,\r\n  SxProps,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Theme,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC, memo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TruthTableCell } from \"./TruthTableCell\";\r\n\r\ntype TruthTableProps = {\r\n  exprTree: ExprTree;\r\n  slotProps: { container: SxProps<Theme> };\r\n};\r\nconst TruthTable_: FC<TruthTableProps> = (props) => {\r\n  const { exprTree, slotProps } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"truth-table\",\r\n  });\r\n  const { palette } = useTheme();\r\n  const [userConfirmed, setUserConfirmed] = useState(false);\r\n\r\n  const columns = exprTreeFlattenPostOrder(exprTree);\r\n  const symbols = [...exprTreeCollectSymbols(exprTree)];\r\n  symbols.sort();\r\n\r\n  const perm =\r\n    symbols.length > 3 && !userConfirmed\r\n      ? []\r\n      : getPermutation(symbols.length, symbols);\r\n\r\n  if (symbols.length > 3 && !userConfirmed) {\r\n    return (\r\n      <Stack\r\n        spacing={1}\r\n        padding={1}\r\n      >\r\n        <StyledAlert severity=\"warning\">\r\n          {t(\r\n            \"warnings.large-truth-table-can-slow-application-down\"\r\n          )}\r\n        </StyledAlert>\r\n        <Button\r\n          disableElevation\r\n          disableRipple\r\n          onClick={() => setUserConfirmed(true)}\r\n          sx={{\r\n            \"&:hover\": {\r\n              color: palette.getContrastText(\r\n                palette.primary.main\r\n              ),\r\n              backgroundColor: palette.primary.main,\r\n            },\r\n            \"color\": palette.primary.dark,\r\n            \"backgroundColor\": palette.primary.light,\r\n            \"width\": \"fit-content\",\r\n          }}\r\n        >\r\n          {t(\"warnings.confirm\")}\r\n        </Button>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TableContainer sx={slotProps.container}>\r\n      <Table stickyHeader>\r\n        <TableHead>\r\n          <TableRow>\r\n            {symbols.map((symbol, index) => (\r\n              <TableCell\r\n                key={\"sym\" + index}\r\n                align=\"center\"\r\n                sx={{ whiteSpace: \"nowrap\" }}\r\n              >\r\n                <StyledLatex>{`$${symbol}$`}</StyledLatex>\r\n              </TableCell>\r\n            ))}\r\n            {columns.map((col, index) => (\r\n              <TableCell\r\n                key={\"subexpr\" + index}\r\n                align=\"center\"\r\n                sx={{ whiteSpace: \"nowrap\" }}\r\n              >\r\n                <StyledLatex>{`$${col.label}$`}</StyledLatex>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {perm.map((p, index) => (\r\n            <TableRow key={\"perm\" + index}>\r\n              {symbols.map((sym, index) => (\r\n                <TruthTableCell\r\n                  key={\"sym\" + index}\r\n                  value={p.get(sym) || false}\r\n                />\r\n              ))}\r\n              {columns.map((column, colIndex) => (\r\n                <TruthTableCell\r\n                  key={\"col\" + colIndex}\r\n                  value={column.eval(p)}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport const TruthTable = memo(\r\n  TruthTable_,\r\n  (prev, next) => {\r\n    return (\r\n      exprTreeToLatex(prev.exprTree) ===\r\n      exprTreeToLatex(next.exprTree)\r\n    );\r\n  }\r\n);\r\n","import { operatorToLatex } from \"$core/operator\";\r\nimport {\r\n  ExprTreeBinary,\r\n  ExprTreeConst,\r\n  ExprTreeIden,\r\n  ExprTreeUnary,\r\n} from \"$types/expression-tree\";\r\nimport { Operator } from \"$types/operators\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\n\r\ntype EvalFn = (t: SymbolTable) => boolean;\r\nconst OPERATOR_EVAL_FN: Record<\r\n  Exclude<Operator, Operator.NOT>,\r\n  (l: EvalFn, r: EvalFn) => (t: SymbolTable) => boolean\r\n> = {\r\n  [Operator.AND]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) && r(t),\r\n  [Operator.OR]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) || r(t),\r\n  [Operator.IMPL]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      !l(t) || r(t),\r\n  [Operator.IFF]:\r\n    (l: EvalFn, r: EvalFn) => (t: SymbolTable) =>\r\n      l(t) === r(t),\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  orderStart: number\r\n) => {\r\n  const { nodeType } = tree;\r\n\r\n  switch (nodeType) {\r\n    case SyntaxTreeNodeType.CONST: {\r\n      const node: ExprTreeConst = {\r\n        eval: () => tree.value,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: String(tree.value),\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeType.IDEN: {\r\n      const node: ExprTreeIden = {\r\n        eval: (t) => t.get(tree.symbol) ?? false,\r\n        nodeType,\r\n        order: orderStart + 1,\r\n        repr: tree.symbol,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const child = _syntaxTreetoExprTree(\r\n        tree.operand,\r\n        orderStart\r\n      );\r\n      const node: ExprTreeUnary = {\r\n        repr: operatorToLatex(tree.operator),\r\n        child,\r\n        nodeType,\r\n        eval: (t) => !child.eval(t),\r\n        order: child.order + 1,\r\n      };\r\n      return node;\r\n    }\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = _syntaxTreetoExprTree(\r\n        tree.left,\r\n        orderStart\r\n      );\r\n      const right = _syntaxTreetoExprTree(\r\n        tree.right,\r\n        left.order\r\n      );\r\n      const node: ExprTreeBinary = {\r\n        nodeType,\r\n        eval: OPERATOR_EVAL_FN[tree.operator](\r\n          left.eval,\r\n          right.eval\r\n        ),\r\n        left,\r\n        right,\r\n        order: right.order + 1,\r\n        repr: operatorToLatex(tree.operator),\r\n      };\r\n      return node;\r\n    }\r\n  }\r\n};\r\n\r\nexport const exprTreeFromSyntaxTree = (\r\n  tree: SyntaxTree\r\n) => {\r\n  return _syntaxTreetoExprTree(tree, 0);\r\n};\r\n","import { ExpressionCard } from \"$components/ExpressionCard\";\r\nimport { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { TruthTable } from \"$components/TruthTable\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { CheckerRouteLoaderData } from \"$types/loader-data\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { VerdictDisplay } from \"./VerdictDisplay\";\r\n\r\ntype VerdictDisplayManyProps = {\r\n  items: CheckerRouteLoaderData[\"items\"];\r\n};\r\nexport const VerdictDisplayMany: FC<\r\n  VerdictDisplayManyProps\r\n> = (props) => {\r\n  const { items } = props;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"checker-view.cards.output.infos\",\r\n  });\r\n\r\n  if (items.filter((f) => f.ok).length === 0) {\r\n    return (\r\n      <StyledAlert severity=\"info\">\r\n        <Typography>\r\n          {t(\"no-formula-to-display\")}\r\n        </Typography>\r\n      </StyledAlert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {items.map((item, index) => {\r\n        if (!item.ok) {\r\n          return null;\r\n        }\r\n        const exprTree = exprTreeFromSyntaxTree(\r\n          item.originalTree\r\n        );\r\n        const itemNum = index + 1;\r\n        return (\r\n          <ExpressionCard\r\n            key={\"verdict\" + index}\r\n            primary={\r\n              <VerdictDisplay\r\n                itemNum={itemNum}\r\n                result={item.normalizedTree}\r\n                originalLatex={\r\n                  item.inputInterpretationLatex\r\n                }\r\n              />\r\n            }\r\n            secondary={\r\n              <TruthTable\r\n                exprTree={exprTree}\r\n                slotProps={{\r\n                  container: { maxHeight: \"40vh\" },\r\n                }}\r\n              />\r\n            }\r\n          />\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n","import { InputDisplayMany } from \"$components/InputDisplay\";\r\nimport { VerdictDisplayMany } from \"$components/VerdictDisplay\";\r\nimport { CheckerRouteLoaderData } from \"$types/loader-data\";\r\nimport { Stack, Typography, useTheme } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype CheckerViewLayoutProps = {\r\n  items: CheckerRouteLoaderData[\"items\"];\r\n};\r\nexport const CheckerViewLayout: FC<\r\n  CheckerViewLayoutProps\r\n> = (props) => {\r\n  const { items } = props;\r\n  const { typography } = useTheme();\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"checker-view.cards\",\r\n  });\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"input-interpretation.title\")}\r\n      </Typography>\r\n      <InputDisplayMany items={items} />\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"output.title\")}\r\n      </Typography>\r\n      <VerdictDisplayMany items={items} />\r\n    </Stack>\r\n  );\r\n};\r\n","import { AppNavGroup } from \"$components/AppNavMenu\";\r\nimport { Editor } from \"$components/Editor\";\r\nimport { BaseLayout } from \"$layouts/BaseLayout\";\r\nimport { CheckerViewLayout } from \"$layouts/CheckerViewLayout\";\r\nimport { CheckerRouteLoaderData } from \"$types/loader-data\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const CheckerView: FC = () => {\r\n  const { items, userInput: prevUserInput } =\r\n    useLoaderData() as CheckerRouteLoaderData;\r\n\r\n  const submit = useSubmit();\r\n  const { t } = useTranslation(\"nav\");\r\n  const [userInput, setUserInput] = useState(prevUserInput);\r\n\r\n  useEffect(() => {\r\n    setUserInput(prevUserInput);\r\n  }, [prevUserInput]);\r\n\r\n  const handleSubmit = () => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/checker\",\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BaseLayout\r\n      appHeader={<AppNavGroup />}\r\n      title={t(\"checker\")}\r\n    >\r\n      <Stack spacing={8}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"p or not p, not q and q, p implies q\"\r\n          onSubmit={handleSubmit}\r\n        />\r\n        {items.length > 0 && (\r\n          <CheckerViewLayout items={items} />\r\n        )}\r\n      </Stack>\r\n    </BaseLayout>\r\n  );\r\n};\r\n","import { exprTreeCollectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\n\r\nfunction* permutation(symbols: string[]) {\r\n  let current = 0;\r\n  const size = 1 << symbols.length;\r\n  while (current < size) {\r\n    const perm: SymbolTable = new Map();\r\n    const permStr = current\r\n      .toString(2)\r\n      .padStart(symbols.length, \"0\");\r\n    for (let i = 0; i < size; i++) {\r\n      perm.set(symbols[i], permStr[i] === \"1\");\r\n    }\r\n    yield perm;\r\n    current++;\r\n  }\r\n}\r\n\r\nexport const exprTreeVerifyTautology = (tree: ExprTree) => {\r\n  const symbols = exprTreeCollectSymbols(tree);\r\n  const perms = permutation([...symbols]);\r\n  for (const symbolTable of perms) {\r\n    if (!tree.eval(symbolTable)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n","import { ExpressionCard } from \"$components/ExpressionCard\";\r\nimport { InputDisplayMany } from \"$components/InputDisplay\";\r\nimport { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { TruthTable } from \"$components/TruthTable\";\r\nimport { exprTreeVerifyTautology } from \"$core/expr-tree/verify-tautology\";\r\nimport { IFF } from \"$core/syntax-tree/node\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { ComparatorRouteLoaderData } from \"$types/loader-data\";\r\nimport {\r\n  FormControlLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype ComparatorViewLayoutProps = {\r\n  items: ComparatorRouteLoaderData[\"items\"];\r\n  mainItemIndex: number | null;\r\n  onMainItemIndexChange: (v: number) => void;\r\n};\r\nexport const ComparatorViewLayout: FC<\r\n  ComparatorViewLayoutProps\r\n> = (props) => {\r\n  const { items, onMainItemIndexChange, mainItemIndex } =\r\n    props;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"comparator-view.cards\",\r\n  });\r\n  const { typography } = useTheme();\r\n\r\n  const validItems = useMemo(() => {\r\n    return items.filter((item) => item.ok);\r\n  }, [items]);\r\n\r\n  const mainItem = useMemo(() => {\r\n    if (mainItemIndex === null) {\r\n      return null;\r\n    }\r\n    const expr = items.at(mainItemIndex);\r\n    if (expr === undefined || !expr.ok) {\r\n      return null;\r\n    }\r\n    return expr;\r\n  }, [mainItemIndex, items]);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"input-interpretation.title\")}\r\n      </Typography>\r\n      <InputDisplayMany items={items} />\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"output.title\")}\r\n      </Typography>\r\n      {validItems.length <= 1 && (\r\n        <StyledAlert severity=\"info\">\r\n          <Typography>\r\n            {t(\r\n              \"output.infos.not-enough-formula-for-comparison\"\r\n            )}\r\n          </Typography>\r\n        </StyledAlert>\r\n      )}\r\n      {mainItemIndex !== null && validItems.length > 1 && (\r\n        <RadioGroup\r\n          value={mainItemIndex}\r\n          onChange={(_, value) =>\r\n            onMainItemIndexChange(Number.parseInt(value))\r\n          }\r\n        >\r\n          {items.map((expr, index) => {\r\n            if (!expr.ok) {\r\n              return null;\r\n            }\r\n            const exprLatex = expr.inputInterpretationLatex;\r\n            return (\r\n              <FormControlLabel\r\n                key={\"main-expr-option\" + index}\r\n                control={\r\n                  <Radio\r\n                    disableFocusRipple\r\n                    disableRipple\r\n                    disableTouchRipple\r\n                  />\r\n                }\r\n                value={index}\r\n                label={\r\n                  <StyledLatex>{`$$${exprLatex}$$`}</StyledLatex>\r\n                }\r\n                slotProps={{\r\n                  typography: { width: \"100%\" },\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </RadioGroup>\r\n      )}\r\n      {mainItem !== null &&\r\n        mainItemIndex !== null &&\r\n        validItems.length > 1 &&\r\n        items.map((expr, index) => {\r\n          if (!expr.ok) {\r\n            return null;\r\n          }\r\n          if (index === mainItemIndex) {\r\n            return null;\r\n          }\r\n          const iffTree = exprTreeFromSyntaxTree(\r\n            IFF(mainItem.tree, expr.tree)\r\n          );\r\n          const areEqual = exprTreeVerifyTautology(iffTree);\r\n          const mainItemNum = mainItemIndex + 1;\r\n          const itemNum = index + 1;\r\n          const mainLatex =\r\n            mainItem.inputInterpretationLatex;\r\n          const exprLatex = expr.inputInterpretationLatex;\r\n          const areEqualT = areEqual\r\n            ? t(\"output.text.equivalent\")\r\n            : t(\"output.text.not-equivalent\");\r\n          return (\r\n            <ExpressionCard\r\n              key={\"comparison-pair\" + index}\r\n              primary={\r\n                <StyledLatex>\r\n                  {t(\"output.text.formulas-are-value\", {\r\n                    first: `$$${mainLatex} \\\\tag{${mainItemNum}}$$`,\r\n                    second: `$$${exprLatex} \\\\tag{${itemNum}}$$`,\r\n                    value: `$$\\\\boxed{\\\\textbf{${areEqualT}}}$$`,\r\n                  })}\r\n                </StyledLatex>\r\n              }\r\n              secondary={\r\n                <TruthTable\r\n                  exprTree={iffTree}\r\n                  slotProps={{\r\n                    container: {\r\n                      maxHeight: \"40vh\",\r\n                    },\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n          );\r\n        })}\r\n    </Stack>\r\n  );\r\n};\r\n","import { AppNavGroup } from \"$components/AppNavMenu\";\r\nimport { Editor } from \"$components/Editor/Editor\";\r\nimport { BaseLayout } from \"$layouts/BaseLayout\";\r\nimport { ComparatorViewLayout } from \"$layouts/ComparatorViewLayout\";\r\nimport { ComparatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { Stack } from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const ComparatorView: FC = () => {\r\n  const { items, userInput: prevUserInput } =\r\n    useLoaderData() as ComparatorRouteLoaderData;\r\n\r\n  const submit = useSubmit();\r\n  const { t } = useTranslation(\"nav\");\r\n  const [userInput, setUserInput] = useState(prevUserInput);\r\n  const [mainItemIndex, setMainItemIndex] = useState(() => {\r\n    for (const [index, expr] of items.entries()) {\r\n      if (expr.ok) {\r\n        return index;\r\n      }\r\n    }\r\n    return null;\r\n  });\r\n\r\n  useEffect(() => {\r\n    setUserInput(prevUserInput);\r\n  }, [prevUserInput]);\r\n\r\n  useEffect(() => {\r\n    for (const [index, expr] of items.entries()) {\r\n      if (expr.ok) {\r\n        setMainItemIndex(index);\r\n        return;\r\n      }\r\n    }\r\n    setMainItemIndex(null);\r\n  }, [items]);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/comparator\",\r\n      }\r\n    );\r\n  }, [submit, userInput]);\r\n\r\n  return (\r\n    <BaseLayout\r\n      appHeader={<AppNavGroup />}\r\n      title={t(\"comparator\")}\r\n    >\r\n      <Stack spacing={8}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"p and q, p or q, p implies q, p iff q\"\r\n          onSubmit={handleSubmit}\r\n        />\r\n        {items.length > 0 && (\r\n          <ComparatorViewLayout\r\n            mainItemIndex={mainItemIndex}\r\n            onMainItemIndexChange={setMainItemIndex}\r\n            items={items}\r\n          />\r\n        )}\r\n      </Stack>\r\n    </BaseLayout>\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useRouteError } from \"react-router\";\r\n\r\nexport const ErrorView: FC = () => {\r\n  const error = useRouteError();\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"error-view\",\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      maxWidth=\"md\"\r\n      marginX={{ xs: 2, md: \"auto\" }}\r\n      paddingY={2}\r\n    >\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          title={t(\"title\")}\r\n          slotProps={{\r\n            title: { fontWeight: 900 },\r\n          }}\r\n        />\r\n        <CardActions disableSpacing>\r\n          <Typography\r\n            component={Link}\r\n            to=\"/\"\r\n            color=\"primary\"\r\n            sx={{\r\n              \"textDecorationLine\": \"none\",\r\n              \"&:hover\": {\r\n                textDecorationLine: \"underline\",\r\n              },\r\n            }}\r\n          >\r\n            {t(\"return-home\")}\r\n          </Typography>\r\n        </CardActions>\r\n        <CardContent>\r\n          <Typography\r\n            fontFamily=\"monospace\"\r\n            color=\"error\"\r\n            component=\"pre\"\r\n          >\r\n            {JSON.stringify(error, null, 4)}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n","import {\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledTooltipIconButtonProps = {\r\n  title: string;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  onKeyPress?: (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => void;\r\n};\r\nexport const StyledTooltipIconButton: FC<\r\n  StyledTooltipIconButtonProps\r\n> = (props) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip title={<Typography>{title}</Typography>}>\r\n      <span>\r\n        <IconButton\r\n          disableRipple\r\n          disabled={disabled}\r\n          onClick={onClick}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { StyledTooltipIconButton } from \"$components/styled/StyledIconButton\";\r\nimport {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n  PauseRounded,\r\n  PlayArrowRounded,\r\n  ReplayRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, memo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype GraphControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n  isAnimationPlaying: boolean;\r\n  onAnimationPlay: () => void;\r\n  onAnimationPause: () => void;\r\n  onAnimationReplay: () => void;\r\n};\r\nconst GraphControl_: FC<GraphControlProps> = (props) => {\r\n  const {\r\n    value,\r\n    maxValue,\r\n    minValue,\r\n    onChange,\r\n    isAnimationPlaying,\r\n    onAnimationPause,\r\n    onAnimationPlay,\r\n    onAnimationReplay,\r\n  } = props;\r\n\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"graph.playback\",\r\n  });\r\n\r\n  const handleForward = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewind = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  return (\r\n    <Stack>\r\n      <Slider\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n      <Stack\r\n        direction=\"row\"\r\n        spacing={1}\r\n        alignItems=\"center\"\r\n      >\r\n        <StyledTooltipIconButton\r\n          disabled={value <= minValue}\r\n          title={t(\"previous\")}\r\n          onClick={handleRewind}\r\n        >\r\n          <KeyboardArrowLeftRounded />\r\n        </StyledTooltipIconButton>\r\n        {value === maxValue && (\r\n          <StyledTooltipIconButton\r\n            title={t(\"replay\")}\r\n            onClick={onAnimationReplay}\r\n          >\r\n            <ReplayRounded />\r\n          </StyledTooltipIconButton>\r\n        )}\r\n        {value !== maxValue && isAnimationPlaying && (\r\n          <StyledTooltipIconButton\r\n            title={t(\"pause\")}\r\n            onClick={onAnimationPause}\r\n          >\r\n            <PauseRounded />\r\n          </StyledTooltipIconButton>\r\n        )}\r\n        {value !== maxValue && !isAnimationPlaying && (\r\n          <StyledTooltipIconButton\r\n            title={t(\"play\")}\r\n            onClick={onAnimationPlay}\r\n          >\r\n            <PlayArrowRounded />\r\n          </StyledTooltipIconButton>\r\n        )}\r\n        <StyledTooltipIconButton\r\n          disabled={value >= maxValue}\r\n          title={t(\"forward\")}\r\n          onClick={handleForward}\r\n        >\r\n          <KeyboardArrowRightRounded />\r\n        </StyledTooltipIconButton>\r\n        <Typography>{`${value}/${maxValue}`}</Typography>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport const GraphControl = memo(\r\n  GraphControl_,\r\n  (prev, next) => {\r\n    const keys = [\r\n      \"value\",\r\n      \"maxValue\",\r\n      \"minValue\",\r\n      \"isAnimationPlaying\",\r\n    ] as (keyof GraphControlProps)[];\r\n    return keys.every((key) => prev[key] === next[key]);\r\n  }\r\n);\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  order: number;\r\n  symbolTable: SymbolTable;\r\n  r: number;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const { r, order, node, symbolTable } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"graph\",\r\n  });\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.repr)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.repr]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      opacity={isNodeVisibleNow ? 1 : 0.5}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        stroke={palette.primary.dark}\r\n        strokeOpacity={0.8}\r\n        r={r}\r\n        fill={palette.primary.light}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        fill={palette.primary.contrastText}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n      <Group\r\n        transform={`translate(${r / 3}, ${r / 3})`}\r\n        visibility={\r\n          data.order < order ? \"visible\" : \"hidden\"\r\n        }\r\n      >\r\n        <rect\r\n          width={60}\r\n          height={30}\r\n          rx={5}\r\n          ry={5}\r\n          fill={palette.primary.light}\r\n        />\r\n        <text\r\n          x=\"30\"\r\n          y=\"22\"\r\n          textAnchor=\"middle\"\r\n          pointerEvents=\"none\"\r\n          fill={palette.primary.contrastText}\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          {data.eval(symbolTable) ? t(\"true\") : t(\"false\")}\r\n        </text>\r\n      </Group>\r\n    </Group>\r\n  );\r\n};\r\n","import { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  Fab,\r\n  Tooltip,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport {\r\n  hierarchy,\r\n  Tree as VisxTree,\r\n} from \"@visx/hierarchy\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC, Fragment, memo, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TreeGraphLink } from \"./TreeLink\";\r\nimport { TreeGraphNode } from \"./TreeNode\";\r\n\r\ntype TreeProps = {\r\n  symbolTable: SymbolTable;\r\n  tree: ExprTree;\r\n  order: number;\r\n};\r\nconst Tree_: FC<TreeProps> = (props) => {\r\n  const { tree, order, symbolTable } = props;\r\n\r\n  const { palette } = useTheme();\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"graph\",\r\n  });\r\n  const viewportRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const data = hierarchy(tree, (d) => {\r\n    switch (d.nodeType) {\r\n      case SyntaxTreeNodeType.CONST:\r\n        return null;\r\n      case SyntaxTreeNodeType.IDEN:\r\n        return null;\r\n      case SyntaxTreeNodeType.UNARY:\r\n        return [d.child];\r\n      case SyntaxTreeNodeType.BINARY:\r\n        return [d.left, d.right];\r\n    }\r\n  });\r\n\r\n  const viewportWidth =\r\n    viewportRef.current === null\r\n      ? 0\r\n      : viewportRef.current.getBoundingClientRect().width;\r\n\r\n  const viewportHeight =\r\n    viewportRef.current === null\r\n      ? 0\r\n      : viewportRef.current.getBoundingClientRect().height;\r\n\r\n  const treeWidth = (data.leaves().length + 1) * 150;\r\n  const treeHeight = (data.height + 1) * 100;\r\n  const nodeRadius = 30;\r\n\r\n  return (\r\n    <Box\r\n      ref={viewportRef}\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      position=\"relative\"\r\n    >\r\n      <Zoom<SVGSVGElement>\r\n        width={viewportWidth}\r\n        height={viewportHeight}\r\n        scaleXMin={1 / 10}\r\n        scaleXMax={1}\r\n        scaleYMin={1 / 10}\r\n        scaleYMax={1}\r\n      >\r\n        {(zoom) => (\r\n          <Fragment>\r\n            <svg\r\n              width={viewportWidth}\r\n              height={viewportHeight}\r\n              ref={zoom.containerRef}\r\n              style={{\r\n                touchAction: \"none\",\r\n                cursor: zoom.isDragging\r\n                  ? \"grabbing\"\r\n                  : \"grab\",\r\n              }}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={zoom.dragEnd}\r\n              onMouseLeave={zoom.dragEnd}\r\n            >\r\n              <Group transform={zoom.toString()}>\r\n                <VisxTree\r\n                  root={data}\r\n                  size={[treeWidth, -treeHeight]}\r\n                >\r\n                  {(treeHeir) => (\r\n                    <Group\r\n                      top={treeHeight + nodeRadius * 1.5}\r\n                    >\r\n                      {treeHeir.links().map((link, i) => (\r\n                        <TreeGraphLink\r\n                          key={`link-${i}`}\r\n                          order={order}\r\n                          link={link}\r\n                        />\r\n                      ))}\r\n                      {treeHeir\r\n                        .descendants()\r\n                        .map((node, i) => (\r\n                          <TreeGraphNode\r\n                            key={`node-${i}`}\r\n                            order={order}\r\n                            node={node}\r\n                            symbolTable={symbolTable}\r\n                            r={nodeRadius}\r\n                          />\r\n                        ))}\r\n                    </Group>\r\n                  )}\r\n                </VisxTree>\r\n              </Group>\r\n            </svg>\r\n            <Tooltip\r\n              placement=\"right\"\r\n              title={<Typography>{t(\"center\")}</Typography>}\r\n            >\r\n              <Fab\r\n                onClick={zoom.center}\r\n                sx={{\r\n                  \"position\": \"absolute\",\r\n                  \"left\": 16,\r\n                  \"bottom\": 16,\r\n                  \"&:hover\": {\r\n                    color: palette.getContrastText(\r\n                      palette.primary.main\r\n                    ),\r\n                    backgroundColor: palette.primary.main,\r\n                  },\r\n                  \"color\": palette.primary.dark,\r\n                  \"backgroundColor\": palette.primary.light,\r\n                }}\r\n              >\r\n                <ControlCameraRounded />\r\n              </Fab>\r\n            </Tooltip>\r\n          </Fragment>\r\n        )}\r\n      </Zoom>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const Tree = memo(Tree_, (prev, next) => {\r\n  if (prev.order !== next.order) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    exprTreeToLatex(prev.tree).localeCompare(\r\n      exprTreeToLatex(next.tree)\r\n    ) !== 0\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  for (const [\r\n    symbol,\r\n    value,\r\n  ] of prev.symbolTable.entries()) {\r\n    if (next.symbolTable.get(symbol) !== value) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n});\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { Paper, Stack, SxProps } from \"@mui/material\";\r\nimport { FC, useEffect, useRef, useState } from \"react\";\r\nimport { GraphControl } from \"./GraphControl\";\r\nimport { Tree } from \"./Tree\";\r\n\r\ntype GraphProps = {\r\n  exprTree: ExprTree;\r\n  symbolTable: SymbolTable;\r\n  slotProps: {\r\n    container: SxProps;\r\n  };\r\n};\r\nexport const Graph: FC<GraphProps> = (props) => {\r\n  const { exprTree, symbolTable, slotProps } = props;\r\n\r\n  const [step, setStep] = useState(1);\r\n  const [maxStep, setMaxStep] = useState(1);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const intervalRef = useRef<number | null>(null);\r\n  const isPlayingRef = useRef(isPlaying);\r\n  const currentFrameRef = useRef(step);\r\n\r\n  useEffect(() => {\r\n    isPlayingRef.current = isPlaying;\r\n  }, [isPlaying]);\r\n\r\n  useEffect(() => {\r\n    currentFrameRef.current = step;\r\n  }, [step]);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      intervalRef.current = setInterval(() => {\r\n        if (isPlayingRef.current) {\r\n          setStep((prev) => {\r\n            if (prev < maxStep) {\r\n              return prev + 1;\r\n            }\r\n            setIsPlaying(false);\r\n            isPlayingRef.current = false;\r\n            return prev;\r\n          });\r\n        }\r\n      }, 750);\r\n    }\r\n    return () =>\r\n      clearInterval(intervalRef.current ?? undefined);\r\n  }, [isPlaying, maxStep, step]);\r\n\r\n  useEffect(() => {\r\n    setStep(1);\r\n    setMaxStep(exprTree.order + 1);\r\n  }, [exprTree]);\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <Paper\r\n        variant=\"outlined\"\r\n        sx={slotProps.container}\r\n      >\r\n        <Tree\r\n          order={step}\r\n          tree={exprTree}\r\n          symbolTable={symbolTable}\r\n        />\r\n      </Paper>\r\n      <GraphControl\r\n        maxValue={maxStep}\r\n        minValue={1}\r\n        value={step}\r\n        onChange={setStep}\r\n        isAnimationPlaying={isPlaying}\r\n        onAnimationPause={() => {\r\n          setIsPlaying(false);\r\n        }}\r\n        onAnimationPlay={() => {\r\n          setIsPlaying(true);\r\n        }}\r\n        onAnimationReplay={() => {\r\n          setStep(1);\r\n          setIsPlaying(true);\r\n        }}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/expression-tree\";\r\nimport {\r\n  SymbolTable,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { exprTreeToLatex } from \"./tree/expr/latex\";\r\n\r\nexport type EvaluationStep = {\r\n  repr: string;\r\n  substitutions: {\r\n    substituted: string;\r\n    repr: string;\r\n    stepRef: number | false;\r\n    evaluated: boolean;\r\n  }[];\r\n  connective: string | null;\r\n  evaluated: boolean;\r\n};\r\n\r\nconst traverse = (\r\n  tree: ExprTree,\r\n  table: SymbolTable,\r\n  steps: EvaluationStep[]\r\n) => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n      return;\r\n    case SyntaxTreeNodeType.IDEN:\r\n      {\r\n        const evaluated = tree.eval(table);\r\n        const repr = tree.repr;\r\n        steps.push({\r\n          repr,\r\n          evaluated,\r\n          substitutions: [\r\n            {\r\n              repr,\r\n              evaluated,\r\n              stepRef: false,\r\n              substituted: `\\\\text{${evaluated}}`,\r\n            },\r\n          ],\r\n          connective: null,\r\n        });\r\n      }\r\n      break;\r\n    case SyntaxTreeNodeType.UNARY:\r\n      {\r\n        const { child } = tree;\r\n\r\n        const childEval = child.eval(table);\r\n        let childStep: number | false = false;\r\n\r\n        if (\r\n          child.nodeType !== SyntaxTreeNodeType.CONST &&\r\n          child.nodeType !== SyntaxTreeNodeType.IDEN\r\n        ) {\r\n          traverse(child, table, steps);\r\n          childStep = steps.length;\r\n        }\r\n        const substitutions: EvaluationStep[\"substitutions\"] =\r\n          [];\r\n        if (child.nodeType !== SyntaxTreeNodeType.CONST) {\r\n          substitutions.push({\r\n            repr: exprTreeToLatex(child),\r\n            evaluated: childEval,\r\n            stepRef: childStep,\r\n            substituted: `\\\\lnot ${\r\n              childEval ? \"\\\\top\" : \"\\\\bot\"\r\n            }\r\n            }`,\r\n          });\r\n        }\r\n\r\n        steps.push({\r\n          repr: exprTreeToLatex(tree),\r\n          substitutions,\r\n          evaluated: tree.eval(table),\r\n          connective: tree.repr,\r\n        });\r\n      }\r\n      break;\r\n    case SyntaxTreeNodeType.BINARY:\r\n      {\r\n        const { right, left } = tree;\r\n\r\n        const leftEval = left.eval(table);\r\n        const leftSubstituted = leftEval\r\n          ? \"\\\\top\"\r\n          : \"\\\\bot\";\r\n        let leftStep: number | false = false;\r\n        if (\r\n          left.nodeType !== SyntaxTreeNodeType.CONST &&\r\n          left.nodeType !== SyntaxTreeNodeType.IDEN\r\n        ) {\r\n          traverse(left, table, steps);\r\n          leftStep = steps.length;\r\n        }\r\n\r\n        const rightEval = right.eval(table);\r\n        const rightRawRepr = exprTreeToLatex(right);\r\n        const rightRepr =\r\n          right.nodeType === SyntaxTreeNodeType.BINARY\r\n            ? `( ${rightRawRepr} )`\r\n            : rightRawRepr;\r\n        const rightSubstituted = rightEval\r\n          ? \"\\\\top\"\r\n          : \"\\\\bot\";\r\n        let rightStep: number | false = false;\r\n        if (\r\n          right.nodeType !== SyntaxTreeNodeType.CONST &&\r\n          right.nodeType !== SyntaxTreeNodeType.IDEN\r\n        ) {\r\n          traverse(right, table, steps);\r\n          rightStep = steps.length;\r\n        }\r\n\r\n        // (x and y) and (y and z)\r\n        // From (9), x and y === True\r\n        // True and (y and z)\r\n        // From (10), y and z === True\r\n        // True and True\r\n        // True\r\n\r\n        const substitutions: EvaluationStep[\"substitutions\"] =\r\n          [];\r\n\r\n        if (left.nodeType !== SyntaxTreeNodeType.CONST) {\r\n          substitutions.push({\r\n            repr: exprTreeToLatex(left),\r\n            evaluated: leftEval,\r\n            stepRef: leftStep,\r\n            substituted: `${leftSubstituted} ${tree.repr} ${rightRepr}`,\r\n          });\r\n        }\r\n\r\n        if (right.nodeType !== SyntaxTreeNodeType.CONST) {\r\n          substitutions.push({\r\n            repr: rightRawRepr,\r\n            evaluated: rightEval,\r\n            stepRef: rightStep,\r\n            substituted: `${leftSubstituted} ${tree.repr} ${rightSubstituted}`,\r\n          });\r\n        }\r\n\r\n        steps.push({\r\n          repr: exprTreeToLatex(tree),\r\n          evaluated: tree.eval(table),\r\n          substitutions,\r\n          connective: tree.repr,\r\n        });\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\nexport const exprTreeFlattenStepByStep = (\r\n  tree: ExprTree,\r\n  symbolTable: SymbolTable\r\n) => {\r\n  const steps: EvaluationStep[] = [];\r\n  traverse(tree, symbolTable, steps);\r\n  return steps;\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { EvaluationStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype EvaluationDisplayStepMiniProps = {\r\n  references: EvaluationStep[];\r\n  subStep: EvaluationStep[\"substitutions\"][number];\r\n  stepIndex: number;\r\n  subStepIndex: number;\r\n};\r\nexport const EvaluationDisplayStepMini: FC<\r\n  EvaluationDisplayStepMiniProps\r\n> = (props) => {\r\n  const { subStep, references, subStepIndex, stepIndex } =\r\n    props;\r\n  const prevMarker = String.fromCharCode(subStepIndex + 97);\r\n  const currMarker = String.fromCharCode(\r\n    subStepIndex + 97 + 1\r\n  );\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"evaluator-view.cards.step-by-step\",\r\n  });\r\n\r\n  const { substituted, evaluated, repr, stepRef } = subStep;\r\n\r\n  if (stepRef === false) {\r\n    return (\r\n      <StyledLatex>\r\n        {t(\"given-variable-is-value\", {\r\n          variable: `$${repr}$`,\r\n          formula: `$$${substituted}.\\\\tag{${stepIndex}.${currMarker}}$$`,\r\n          value: t(evaluated ? \"true\" : \"false\"),\r\n        })}\r\n      </StyledLatex>\r\n    );\r\n  }\r\n\r\n  const refRepr = references[stepRef - 1].repr;\r\n\r\n  return (\r\n    <StyledLatex>\r\n      {t(\"from-previous-step-substitute-into-formula\", {\r\n        step: `$\\\\text{(${stepRef}.a)}$`,\r\n        formula: `$$${refRepr}$$`,\r\n        value: t(evaluated ? \"true\" : \"false\"),\r\n        current: `$\\\\text{(${stepIndex}.${prevMarker})}$`,\r\n        result: `$$${substituted}.\\\\tag{${stepIndex}.${currMarker}}$$`,\r\n      })}\r\n    </StyledLatex>\r\n  );\r\n};\r\n","import { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { EvaluationStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { Stack, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EvaluationDisplayStepMini } from \"./EvaluationDisplayStepMini\";\r\n\r\ntype EvaluationDisplayProps = {\r\n  stepIndex: number;\r\n  step: EvaluationStep;\r\n  references: EvaluationStep[];\r\n};\r\nexport const EvaluationDisplayStep: FC<\r\n  EvaluationDisplayProps\r\n> = (props) => {\r\n  const { step, stepIndex, references } = props;\r\n  const { evaluated, repr, substitutions, connective } =\r\n    step;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"evaluator-view.cards.step-by-step\",\r\n  });\r\n  const tag = `${stepIndex}.a`;\r\n  return (\r\n    <Stack spacing={1}>\r\n      <Typography fontWeight={900}>\r\n        {t(\"step-x-of-y\", {\r\n          current: stepIndex,\r\n          total: references.length,\r\n        })}\r\n      </Typography>\r\n      <StyledLatex>\r\n        {t(\"consider-the-formula\", {\r\n          formula: `$$${repr}.\\\\tag{${tag}}$$`,\r\n        })}\r\n      </StyledLatex>\r\n      {substitutions.map((subStep, subStepIndex) => (\r\n        <EvaluationDisplayStepMini\r\n          stepIndex={stepIndex}\r\n          subStepIndex={subStepIndex}\r\n          key={\"sub-step\" + stepIndex + subStepIndex}\r\n          subStep={subStep}\r\n          references={references}\r\n        />\r\n      ))}\r\n      <StyledLatex>\r\n        {t(\"by-truth-table-formula-is-value\", {\r\n          operator: `$${connective}$`,\r\n          formula: `$(${tag})$`,\r\n          value: evaluated ? t(\"true\") : t(\"false\"),\r\n        })}\r\n      </StyledLatex>\r\n    </Stack>\r\n  );\r\n};\r\n","import { EvaluationGraph } from \"$components/EvaluationGraph\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { exprTreeFlattenStepByStep } from \"$core/exprTreeFlattenStepByStep\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { Stack, Typography } from \"@mui/material\";\r\nimport { FC, memo, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EvaluationDisplayStep } from \"./EvaluationDisplayStep\";\r\n\r\ntype EvaluationDisplayProps = {\r\n  exprTree: ExprTree;\r\n  symbolTable: SymbolTable;\r\n};\r\nconst EvaluationDisplay_: FC<EvaluationDisplayProps> = (\r\n  props\r\n) => {\r\n  const { exprTree, symbolTable } = props;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"evaluator-view.cards.step-by-step\",\r\n  });\r\n\r\n  const steps = useMemo(\r\n    () => exprTreeFlattenStepByStep(exprTree, symbolTable),\r\n    [exprTree, symbolTable]\r\n  );\r\n\r\n  if (steps.length === 0) {\r\n    return (\r\n      <Typography fontStyle=\"italic\">\r\n        {t(\"no-evaluation-step-to-display\")}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  const { evaluated, repr } = steps.at(-1)!;\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      <EvaluationGraph\r\n        exprTree={exprTree}\r\n        symbolTable={symbolTable}\r\n        slotProps={{\r\n          container: {\r\n            height: { xs: \"50vh\", md: \"66vh\" },\r\n          },\r\n        }}\r\n      />\r\n      {steps.map((step, index) => (\r\n        <EvaluationDisplayStep\r\n          key={\"step\" + index}\r\n          step={step}\r\n          stepIndex={index + 1}\r\n          references={steps}\r\n        />\r\n      ))}\r\n      <StyledLatex>\r\n        {t(\"therefore-formula-is-value\", {\r\n          formula: `$$${repr}$$`,\r\n          value: t(evaluated ? \"true\" : \"false\"),\r\n        })}\r\n      </StyledLatex>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport const EvaluationDisplay = memo(\r\n  EvaluationDisplay_,\r\n  (prev, next) => {\r\n    if (\r\n      exprTreeToLatex(prev.exprTree) !==\r\n      exprTreeToLatex(next.exprTree)\r\n    ) {\r\n      return false;\r\n    }\r\n    for (const [k, v] of prev.symbolTable.entries()) {\r\n      if (next.symbolTable.get(k) !== v) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n","import { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport { Tab, Typography } from \"@mui/material\";\r\nimport { FC, useEffect, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EvaluationDisplay } from \"./EvaluationDisplay\";\r\n\r\ntype EvaluationDisplayManyProps = {\r\n  symbolTable: SymbolTable;\r\n  items: Maybe<{ tree: ExprTree }>[];\r\n};\r\nexport const EvaluationDisplayMany: FC<\r\n  EvaluationDisplayManyProps\r\n> = (props) => {\r\n  const { items, symbolTable } = props;\r\n\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"evaluator-view.cards.step-by-step\",\r\n  });\r\n\r\n  const [tab, setTab] = useState(() => {\r\n    return items.findIndex((item) => item.ok);\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTab(items.findIndex((item) => item.ok));\r\n  }, [items]);\r\n\r\n  const validExpressions = useMemo(\r\n    () => items.filter((item) => item.ok),\r\n    [items]\r\n  );\r\n\r\n  if (validExpressions.length === 0) {\r\n    return (\r\n      <StyledAlert severity=\"info\">\r\n        <Typography>\r\n          {t(\"infos.no-valid-formula-to-display\")}\r\n        </Typography>\r\n      </StyledAlert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TabContext value={tab}>\r\n      <TabList\r\n        onChange={(_, v) => setTab(Number.parseInt(v))}\r\n        variant=\"scrollable\"\r\n        scrollButtons=\"auto\"\r\n        textColor=\"inherit\"\r\n        sx={{ paddingX: 0 }}\r\n      >\r\n        {items.map((item, index) => {\r\n          if (!item.ok) {\r\n            return null;\r\n          }\r\n          return (\r\n            <Tab\r\n              key={\"tab\" + index}\r\n              value={index}\r\n              disableRipple\r\n              label={t(\"tab-item\", { num: index + 1 })}\r\n            />\r\n          );\r\n        })}\r\n      </TabList>\r\n      {items.map((item, index) => {\r\n        if (!item.ok) {\r\n          return null;\r\n        }\r\n        return (\r\n          <TabPanel\r\n            key={\"tab-panel\" + index}\r\n            value={index}\r\n            sx={{ padding: 0 }}\r\n          >\r\n            <EvaluationDisplay\r\n              exprTree={item.tree}\r\n              symbolTable={symbolTable}\r\n            />\r\n          </TabPanel>\r\n        );\r\n      })}\r\n    </TabContext>\r\n  );\r\n};\r\n","import { SymbolTable } from \"$types/syntax-tree\";\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid2,\r\n  Radio,\r\n  RadioGroup,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./styled/StyledLatex\";\r\n\r\ntype PropositionConfigProps = {\r\n  value: SymbolTable;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const PropositionConfig: FC<\r\n  PropositionConfigProps\r\n> = (props) => {\r\n  const { value, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"symbol-config\",\r\n  });\r\n\r\n  const symbols = useMemo(() => {\r\n    return [...value.keys()].toSorted((a, b) =>\r\n      a.localeCompare(b)\r\n    );\r\n  }, [value]);\r\n\r\n  if (symbols.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Grid2\r\n      container\r\n      width=\"100%\"\r\n      sx={{\r\n        maxHeight: 400,\r\n        overflowY: \"auto\",\r\n      }}\r\n    >\r\n      {symbols.map((symbol) => (\r\n        <Grid2\r\n          key={\"symbol-\" + symbol}\r\n          size={{ xs: 12, md: 4 }}\r\n        >\r\n          <FormControl fullWidth>\r\n            <FormLabel>\r\n              <StyledLatex>{`$${symbol}$`}</StyledLatex>\r\n            </FormLabel>\r\n            <RadioGroup\r\n              row\r\n              value={value.get(symbol) ? \"1\" : \"0\"}\r\n              onChange={(_, value) =>\r\n                onChange(symbol, value === \"1\")\r\n              }\r\n            >\r\n              <FormControlLabel\r\n                disableTypography\r\n                control={\r\n                  <Radio\r\n                    disableFocusRipple\r\n                    disableRipple\r\n                    disableTouchRipple\r\n                  />\r\n                }\r\n                value=\"1\"\r\n                label={<Typography>{t(\"true\")}</Typography>}\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Radio\r\n                    disableFocusRipple\r\n                    disableRipple\r\n                    disableTouchRipple\r\n                  />\r\n                }\r\n                value=\"0\"\r\n                disableTypography\r\n                label={\r\n                  <Typography>{t(\"false\")}</Typography>\r\n                }\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Grid2>\r\n      ))}\r\n    </Grid2>\r\n  );\r\n};\r\n","import { EvaluationDisplayMany } from \"$components/EvaluationDisplay\";\r\nimport { ExpressionCard } from \"$components/ExpressionCard\";\r\nimport { InputDisplayMany } from \"$components/InputDisplay\";\r\nimport { PropositionConfig } from \"$components/PropositionConfig\";\r\nimport { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { TruthTable } from \"$components/TruthTable\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { EvaluatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { SymbolTable } from \"$types/syntax-tree\";\r\nimport { Stack, Typography, useTheme } from \"@mui/material\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype EvaluatorViewLayoutProps = {\r\n  symbolTable: SymbolTable;\r\n  onSymbolChange: (k: string, v: boolean) => void;\r\n  items: EvaluatorRouteLoaderData[\"items\"];\r\n};\r\nexport const EvaluatorViewLayout: FC<\r\n  EvaluatorViewLayoutProps\r\n> = (props) => {\r\n  const { items, symbolTable, onSymbolChange } = props;\r\n  const { typography } = useTheme();\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"evaluator-view.cards\",\r\n  });\r\n\r\n  const validItems = useMemo(() => {\r\n    return items.filter((item) => item.ok);\r\n  }, [items]);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"input-interpretation.title\")}\r\n      </Typography>\r\n      <InputDisplayMany items={items} />\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"output.title\")}\r\n      </Typography>\r\n      <PropositionConfig\r\n        value={symbolTable}\r\n        onChange={onSymbolChange}\r\n      />\r\n      {validItems.length === 0 && (\r\n        <StyledAlert severity=\"info\">\r\n          <Typography>\r\n            {t(\"output.infos.no-valid-formula-to-display\")}\r\n          </Typography>\r\n        </StyledAlert>\r\n      )}\r\n      {validItems.length > 0 &&\r\n        items.map((item, index) => {\r\n          if (!item.ok) {\r\n            return null;\r\n          }\r\n          const expr = exprTreeFromSyntaxTree(item.tree);\r\n          const latex = item.inputInterpretationLatex;\r\n          const result = expr.eval(symbolTable);\r\n          const resultT = result\r\n            ? t(\"output.true\")\r\n            : t(\"output.false\");\r\n\r\n          return (\r\n            <ExpressionCard\r\n              key={\"output-item\" + index}\r\n              primary={\r\n                <StyledLatex>\r\n                  {t(\"output.formula-evaluates-to-value\", {\r\n                    formula: `$$${latex}$$`,\r\n                    value: `$$\\\\boxed{\\\\textbf{${resultT}}}$$`,\r\n                  })}\r\n                </StyledLatex>\r\n              }\r\n              secondary={\r\n                <TruthTable\r\n                  exprTree={expr}\r\n                  slotProps={{\r\n                    container: { maxHeight: \"40vh\" },\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n          );\r\n        })}\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"step-by-step.title\")}\r\n      </Typography>\r\n      <EvaluationDisplayMany\r\n        symbolTable={symbolTable}\r\n        items={items.map((item) =>\r\n          item.ok\r\n            ? {\r\n                ok: true,\r\n                tree: exprTreeFromSyntaxTree(item.tree),\r\n              }\r\n            : { ok: false }\r\n        )}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { AppNavGroup } from \"$components/AppNavMenu\";\r\nimport { Editor } from \"$components/Editor/Editor\";\r\nimport { BaseLayout } from \"$layouts/BaseLayout\";\r\nimport { EvaluatorViewLayout } from \"$layouts/EvaluatorViewLayout\";\r\nimport { EvaluatorRouteLoaderData } from \"$types/loader-data\";\r\nimport { Stack } from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const EvaluatorView: FC = () => {\r\n  const {\r\n    items,\r\n    userInput: prevUserInput,\r\n    symbols: prevSymbols,\r\n  } = useLoaderData() as EvaluatorRouteLoaderData;\r\n  const submit = useSubmit();\r\n  const { t } = useTranslation(\"nav\");\r\n  const [userInput, setUserInput] = useState(prevUserInput);\r\n  const [symbolTable, setSymbolTable] = useState(() => {\r\n    const next = new Map<string, boolean>();\r\n    for (const symbol of prevSymbols) {\r\n      next.set(symbol, true);\r\n    }\r\n    return next;\r\n  });\r\n\r\n  useEffect(() => {\r\n    setUserInput(prevUserInput);\r\n  }, [prevUserInput]);\r\n\r\n  useEffect(() => {\r\n    const next = new Map<string, boolean>();\r\n    for (const symbol of prevSymbols) {\r\n      next.set(symbol, true);\r\n    }\r\n    setSymbolTable(next);\r\n  }, [prevSymbols]);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/evaluator\",\r\n      }\r\n    );\r\n  }, [submit, userInput]);\r\n\r\n  const handleSymbolChange = useCallback(\r\n    (k: string, v: boolean) => {\r\n      setSymbolTable((prev) => {\r\n        const next = new Map(prev);\r\n        next.set(k, v);\r\n        return next;\r\n      });\r\n      return;\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <BaseLayout\r\n      appHeader={<AppNavGroup />}\r\n      title={t(\"evaluator\")}\r\n    >\r\n      <Stack spacing={8}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"p and q, p or q, p implies q, p iff q\"\r\n          onSubmit={handleSubmit}\r\n        />\r\n        {items.length > 0 && (\r\n          <EvaluatorViewLayout\r\n            symbolTable={symbolTable}\r\n            items={items}\r\n            onSymbolChange={handleSymbolChange}\r\n          />\r\n        )}\r\n      </Stack>\r\n    </BaseLayout>\r\n  );\r\n};\r\n","import { BaseLayout } from \"$layouts/BaseLayout\";\r\nimport { PALETTE_CHECKER_ROUTE } from \"$theme/palette-checker-route\";\r\nimport { PALETTE_COMPARATOR_ROUTE } from \"$theme/palette-comparator-route\";\r\nimport { PALETTE_EVALUATOR_ROUTE } from \"$theme/palette-evaluator-route\";\r\nimport { PALETTE_REWRITER_ROUTE } from \"$theme/palette-rewriter-route\";\r\nimport {\r\n  BalanceRounded,\r\n  BorderColorRounded,\r\n  CalculateRounded,\r\n  RuleRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid2,\r\n  Stack,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router\";\r\n\r\nconst CARDS = [\r\n  {\r\n    id: \"evaluator\",\r\n    icon: <CalculateRounded fontSize=\"inherit\" />,\r\n    palette: PALETTE_EVALUATOR_ROUTE,\r\n  },\r\n  {\r\n    id: \"comparator\",\r\n    icon: <BalanceRounded fontSize=\"inherit\" />,\r\n    palette: PALETTE_COMPARATOR_ROUTE,\r\n  },\r\n  {\r\n    id: \"checker\",\r\n    icon: <RuleRounded fontSize=\"inherit\" />,\r\n    palette: PALETTE_CHECKER_ROUTE,\r\n  },\r\n  {\r\n    id: \"rewriter\",\r\n    icon: <BorderColorRounded fontSize=\"inherit\" />,\r\n    palette: PALETTE_REWRITER_ROUTE,\r\n  },\r\n  // {\r\n  //   id: \"reasoner\",\r\n  //   icon: <EmojiObjectsRounded fontSize=\"inherit\" />,\r\n  //   palette: PALETTE_REWRITER_ROUTE,\r\n  // },\r\n];\r\n\r\nconst LANGUAGES = [\"en\", \"th\"];\r\n\r\nexport const HomeView: FC = () => {\r\n  const { t, i18n } = useTranslation([\"views\", \"nav\"]);\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <BaseLayout\r\n      title={t(`home-view.boolean-algebra-interpreter`, {\r\n        ns: \"views\",\r\n      })}\r\n      appHeader={\r\n        <Stack\r\n          useFlexGap\r\n          flexDirection=\"row\"\r\n          flexWrap=\"wrap\"\r\n          spacing={2}\r\n          justifyContent=\"flex-end\"\r\n          width=\"100%\"\r\n        >\r\n          {LANGUAGES.map((lang, index) => {\r\n            const selected =\r\n              lang.localeCompare(i18n.language) === 0\r\n                ? 900\r\n                : undefined;\r\n            return (\r\n              <Typography\r\n                key={\"lang\" + index}\r\n                fontWeight={selected}\r\n                onClick={() => i18n.changeLanguage(lang)}\r\n                sx={{\r\n                  cursor: \"pointer\",\r\n                  textTransform: \"capitalize\",\r\n                }}\r\n              >\r\n                {t(`home-view.lang.${lang}`, {\r\n                  ns: \"views\",\r\n                })}\r\n              </Typography>\r\n            );\r\n          })}\r\n        </Stack>\r\n      }\r\n    >\r\n      <Grid2\r\n        container\r\n        columns={{ xs: 1, md: 2 }}\r\n        spacing={4}\r\n      >\r\n        {CARDS.map(({ id, icon, palette }, index) => {\r\n          const href = `/${id}`;\r\n          const { light, dark } = palette.primary;\r\n          return (\r\n            <Grid2\r\n              key={\"card\" + index}\r\n              size={1}\r\n            >\r\n              <Card\r\n                elevation={0}\r\n                sx={{\r\n                  \"height\": \"100%\",\r\n                  \"backgroundColor\": light,\r\n                  \"color\": dark,\r\n                  \"transition\": \"all 0.2s ease-out\",\r\n                  \"&:hover\": {\r\n                    boxShadow: 20,\r\n                  },\r\n                }}\r\n              >\r\n                <CardActionArea\r\n                  disableRipple\r\n                  component={Link}\r\n                  to={href}\r\n                  sx={{ padding: 2, height: \"100%\" }}\r\n                >\r\n                  <CardContent\r\n                    sx={{\r\n                      padding: { xs: 2, md: 4 },\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <Typography\r\n                      sx={{\r\n                        fontSize:\r\n                          theme.typography.h1.fontSize,\r\n                      }}\r\n                    >\r\n                      {icon}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardHeader\r\n                    title={t(id, { ns: \"nav\" })}\r\n                    slotProps={{\r\n                      title: {\r\n                        sx: {\r\n                          fontWeight: 900,\r\n                          textTransform: \"capitalize\",\r\n                        },\r\n                      },\r\n                    }}\r\n                  />\r\n                  <CardContent>\r\n                    <Typography>\r\n                      {t(`home-view.cards.${id}.desc`, {\r\n                        ns: \"views\",\r\n                      })}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </CardActionArea>\r\n              </Card>\r\n            </Grid2>\r\n          );\r\n        })}\r\n      </Grid2>\r\n    </BaseLayout>\r\n  );\r\n};\r\n","import { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeBinary,\r\n  SyntaxTreeNodeType,\r\n  SyntaxTreeNodeUnary,\r\n} from \"$types/syntax-tree\";\r\nimport { AND, IMPLIES, NOT, OR } from \"../node\";\r\n\r\ntype RewriteRule = {\r\n  rewrite: (tree: SyntaxTree) => SyntaxTree;\r\n  isApplicable: (\r\n    tree: SyntaxTree,\r\n    basis: Set<Operator>\r\n  ) => boolean;\r\n};\r\nconst REWRITE_REGISTRY = new Map<Operator, RewriteRule[]>();\r\n\r\nconst registerRewriteRule = (\r\n  trigger: Operator,\r\n  isApplicable: (\r\n    tree: SyntaxTree,\r\n    basis: Set<Operator>\r\n  ) => boolean,\r\n  rewrite: (tree: SyntaxTree) => SyntaxTree\r\n) => {\r\n  if (!REWRITE_REGISTRY.has(trigger)) {\r\n    REWRITE_REGISTRY.set(trigger, []);\r\n  }\r\n  REWRITE_REGISTRY.get(trigger)!.push({\r\n    isApplicable,\r\n    rewrite,\r\n  });\r\n};\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.AND, Operator.OR].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return OR(AND(p, q), AND(NOT(p), NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.OR, Operator.IMPL].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(OR(NOT(IMPLIES(p, q)), NOT(IMPLIES(q, p))));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  (_, basis) =>\r\n    [Operator.AND, Operator.NOT].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left, right } = tree as SyntaxTreeNodeBinary;\r\n    return NOT(\r\n      AND(\r\n        NOT(AND(left, right)),\r\n        NOT(AND(NOT(left), NOT(right)))\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.OR].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left, right } = tree as SyntaxTreeNodeBinary;\r\n    return OR(\r\n      NOT(OR(NOT(left), NOT(right))),\r\n      NOT(OR(left, right))\r\n    );\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IFF,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.IMPL].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left, right } = tree as SyntaxTreeNodeBinary;\r\n    return NOT(\r\n      IMPLIES(\r\n        IMPLIES(left, right),\r\n        NOT(IMPLIES(left, right))\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IMPL,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.AND].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(AND(p, NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.IMPL,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.OR].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return OR(NOT(p), q);\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.AND,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.OR].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(OR(NOT(p), NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.AND,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.IMPL].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(IMPLIES(p, NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.OR,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.AND].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return NOT(AND(NOT(p), NOT(q)));\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.OR,\r\n  (_, basis) =>\r\n    [Operator.NOT, Operator.IMPL].every((op) =>\r\n      basis.has(op)\r\n    ),\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return IMPLIES(NOT(p), q);\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.OR,\r\n  (tree, basis) => {\r\n    if (!basis.has(Operator.IMPL)) {\r\n      return false;\r\n    }\r\n    if (tree.nodeType !== SyntaxTreeNodeType.BINARY) {\r\n      return false;\r\n    }\r\n    return tree.left.nodeType === SyntaxTreeNodeType.UNARY;\r\n  },\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n    return IMPLIES((p as SyntaxTreeNodeUnary).operand, q);\r\n  }\r\n);\r\n\r\nregisterRewriteRule(\r\n  Operator.OR,\r\n  (tree, basis) => {\r\n    if (!basis.has(Operator.IMPL)) {\r\n      return false;\r\n    }\r\n    if (tree.nodeType !== SyntaxTreeNodeType.BINARY) {\r\n      return false;\r\n    }\r\n    return tree.right.nodeType === SyntaxTreeNodeType.UNARY;\r\n  },\r\n  (tree) => {\r\n    const { left: p, right: q } =\r\n      tree as SyntaxTreeNodeBinary;\r\n\r\n    return IMPLIES((q as SyntaxTreeNodeUnary).operand, p);\r\n  }\r\n);\r\n\r\nexport const getRewriteRulesFor = (trigger: Operator) => {\r\n  return REWRITE_REGISTRY.get(trigger) ?? [];\r\n};\r\n","import { Maybe } from \"$types/generic\";\r\nimport { Operator } from \"$types/operators\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/syntax-tree\";\r\nimport { getRewriteRulesFor } from \"./helper/rewrite-rules\";\r\nimport { BINARY, NOT } from \"./node\";\r\nimport { syntaxTreeNormalize } from \"./normalize\";\r\n\r\nconst rewrite = (\r\n  tree: SyntaxTree,\r\n  basis: Set<Operator>\r\n): SyntaxTree | null => {\r\n  switch (tree.nodeType) {\r\n    case SyntaxTreeNodeType.CONST:\r\n    case SyntaxTreeNodeType.IDEN:\r\n      return tree;\r\n    case SyntaxTreeNodeType.UNARY: {\r\n      const operand = rewrite(tree.operand, basis);\r\n      if (operand === null) {\r\n        return null;\r\n      }\r\n\r\n      if (\r\n        operand.nodeType === SyntaxTreeNodeType.UNARY &&\r\n        operand.operator === Operator.NOT\r\n      ) {\r\n        return operand.operand;\r\n      }\r\n\r\n      return NOT(operand);\r\n    }\r\n\r\n    case SyntaxTreeNodeType.BINARY: {\r\n      const left = rewrite(tree.left, basis);\r\n      if (left === null) {\r\n        return null;\r\n      }\r\n      const right = rewrite(tree.right, basis);\r\n      if (right === null) {\r\n        return null;\r\n      }\r\n\r\n      if (basis.has(tree.operator)) {\r\n        return BINARY(tree.operator, left, right);\r\n      }\r\n\r\n      const rules = getRewriteRulesFor(tree.operator);\r\n      for (const rule of rules) {\r\n        if (rule.isApplicable(tree, basis)) {\r\n          return rewrite(\r\n            rule.rewrite(\r\n              BINARY(tree.operator, left, right)\r\n            ),\r\n            basis\r\n          );\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport const syntaxTreeRewrite = (\r\n  tree: SyntaxTree,\r\n  basis: Set<Operator>\r\n): Maybe<{ tree: SyntaxTree }> => {\r\n  const normalTree = syntaxTreeNormalize(tree);\r\n  if (\r\n    normalTree.nodeType === SyntaxTreeNodeType.CONST ||\r\n    normalTree.nodeType === SyntaxTreeNodeType.IDEN\r\n  ) {\r\n    return {\r\n      ok: true,\r\n      tree: normalTree,\r\n    };\r\n  }\r\n\r\n  const rewrittenTree = rewrite(tree, basis);\r\n  if (rewrittenTree === null) {\r\n    return { ok: false };\r\n  }\r\n  return {\r\n    ok: true,\r\n    tree: rewrittenTree,\r\n  };\r\n};\r\n","import { ExpressionCard } from \"$components/ExpressionCard\";\r\nimport { InputDisplayMany } from \"$components/InputDisplay\";\r\nimport { StyledAlert } from \"$components/styled/StyledAlert\";\r\nimport { StyledLatex } from \"$components/styled/StyledLatex\";\r\nimport { TruthTable } from \"$components/TruthTable\";\r\nimport { operatorToLatex } from \"$core/operator\";\r\nimport { syntaxTreeRewrite } from \"$core/syntax-tree/rewrite\";\r\nimport { syntaxTreeToLatex } from \"$core/syntax-tree/to-latex\";\r\nimport { exprTreeFromSyntaxTree } from \"$core/tree/conversion\";\r\nimport { ExprTree } from \"$types/expression-tree\";\r\nimport { Maybe } from \"$types/generic\";\r\nimport { RewriterRouteLoaderData } from \"$types/loader-data\";\r\nimport { Operator } from \"$types/operators\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Stack,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ntype RewriterOutputItemProps = {\r\n  itemNum: number;\r\n  originalLatex: string;\r\n  result: Maybe<{ tree: ExprTree; latex: string }>;\r\n};\r\nconst RewriterOutputItem: FC<RewriterOutputItemProps> = (\r\n  props\r\n) => {\r\n  const { result, originalLatex, itemNum } = props;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"rewriter-view.cards.output\",\r\n  });\r\n\r\n  if (!result.ok) {\r\n    return (\r\n      <ExpressionCard\r\n        primary={\r\n          <StyledLatex>\r\n            {t(\r\n              \"text.formula-cannot-be-expressed-in-the-desired-basis\",\r\n              {\r\n                formula: `$$${originalLatex} \\\\tag{${itemNum}}$$`,\r\n              }\r\n            )}\r\n          </StyledLatex>\r\n        }\r\n        secondary={\r\n          <StyledAlert severity=\"info\">\r\n            <Typography>\r\n              {t(\"infos.truth-table-is-not-available\")}\r\n            </Typography>\r\n          </StyledAlert>\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ExpressionCard\r\n      primary={\r\n        <StyledLatex>\r\n          {t(\r\n            \"text.formula-is-expressed-as-in-the-desired-basis\",\r\n            {\r\n              formula: `$$${originalLatex}\\\\tag{${itemNum}}$$`,\r\n              result: `$$\\\\boxed{${result.latex}}$$`,\r\n            }\r\n          )}\r\n        </StyledLatex>\r\n      }\r\n      secondary={\r\n        <TruthTable\r\n          exprTree={result.tree}\r\n          slotProps={{\r\n            container: {\r\n              maxHeight: \"40vh\",\r\n            },\r\n          }}\r\n        />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\ntype RewriterViewLayoutProps = {\r\n  items: RewriterRouteLoaderData[\"items\"];\r\n  basis: Set<Operator>;\r\n  onBasisChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const RewriterViewLayout: FC<\r\n  RewriterViewLayoutProps\r\n> = (props) => {\r\n  const { items, basis, onBasisChange } = props;\r\n  const { t } = useTranslation(\"views\", {\r\n    keyPrefix: \"rewriter-view.cards\",\r\n  });\r\n  const { typography } = useTheme();\r\n  const validItems = useMemo(() => {\r\n    return items.filter((item) => item.ok);\r\n  }, [items]);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"input-interpretation.title\")}\r\n      </Typography>\r\n      <InputDisplayMany items={items} />\r\n      <Typography\r\n        fontWeight={900}\r\n        fontSize={typography.h3.fontSize}\r\n      >\r\n        {t(\"output.title\")}\r\n      </Typography>\r\n      {validItems.length === 0 && (\r\n        <StyledAlert severity=\"info\">\r\n          <Typography>\r\n            {t(\"output.infos.no-valid-formula-to-display\")}\r\n          </Typography>\r\n        </StyledAlert>\r\n      )}\r\n      {validItems.length > 0 && (\r\n        <Fragment>\r\n          <FormGroup row>\r\n            {Object.values(Operator).map(\r\n              (operator, index) => (\r\n                <FormControlLabel\r\n                  key={\"operator\" + index}\r\n                  checked={basis.has(operator)}\r\n                  onChange={(_, value) =>\r\n                    onBasisChange(operator, value)\r\n                  }\r\n                  control={\r\n                    <Checkbox\r\n                      disableRipple\r\n                      disableFocusRipple\r\n                      disableTouchRipple\r\n                    />\r\n                  }\r\n                  label={\r\n                    <StyledLatex>\r\n                      {`$${operatorToLatex(operator)}$`}\r\n                    </StyledLatex>\r\n                  }\r\n                />\r\n              )\r\n            )}\r\n          </FormGroup>\r\n          {items.map((item, index) => {\r\n            if (!item.ok) {\r\n              return null;\r\n            }\r\n            const result = syntaxTreeRewrite(\r\n              item.originalTree,\r\n              basis\r\n            );\r\n            const itemNum = index + 1;\r\n            return (\r\n              <RewriterOutputItem\r\n                key={\"result\" + index}\r\n                itemNum={itemNum}\r\n                originalLatex={\r\n                  item.inputInterpretationLatex\r\n                }\r\n                result={\r\n                  result.ok\r\n                    ? {\r\n                        ok: true,\r\n                        tree: exprTreeFromSyntaxTree(\r\n                          result.tree\r\n                        ),\r\n                        latex: syntaxTreeToLatex(\r\n                          result.tree\r\n                        ),\r\n                      }\r\n                    : { ok: false }\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </Fragment>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import { AppNavGroup } from \"$components/AppNavMenu\";\r\nimport { Editor } from \"$components/Editor/Editor\";\r\nimport { BaseLayout } from \"$layouts/BaseLayout\";\r\nimport { RewriterViewLayout } from \"$layouts/RewriterViewLayout\";\r\nimport { RewriterRouteLoaderData } from \"$types/loader-data\";\r\nimport { Operator } from \"$types/operators\";\r\nimport { Stack } from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLoaderData, useSubmit } from \"react-router\";\r\n\r\nexport const RewriterView: FC = () => {\r\n  const { userInput: prevUserInput, items } =\r\n    useLoaderData() as RewriterRouteLoaderData;\r\n\r\n  const submit = useSubmit();\r\n  const { t } = useTranslation(\"nav\");\r\n  const [userInput, setUserInput] = useState(prevUserInput);\r\n  const [basis, setBasis] = useState(() => {\r\n    const next = new Map<Operator, boolean>();\r\n    for (const op of Object.values(Operator)) {\r\n      next.set(op, true);\r\n    }\r\n    return next;\r\n  });\r\n\r\n  const basisSet = useMemo(() => {\r\n    return new Set(\r\n      [...basis.entries()]\r\n        .filter(([, isIncluded]) => isIncluded)\r\n        .map(([k]) => k)\r\n    );\r\n  }, [basis]);\r\n\r\n  useEffect(() => {\r\n    setUserInput(prevUserInput);\r\n  }, [prevUserInput]);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    submit(\r\n      {\r\n        input: userInput,\r\n      },\r\n      {\r\n        method: \"GET\",\r\n        action: \"/rewriter\",\r\n      }\r\n    );\r\n  }, [submit, userInput]);\r\n\r\n  const handleBasisChange = useCallback(\r\n    (k: Operator, v: boolean) => {\r\n      setBasis((prev) => {\r\n        const next = new Map(prev);\r\n        next.set(k, v);\r\n        return next;\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <BaseLayout\r\n      title={t(\"rewriter\")}\r\n      appHeader={<AppNavGroup />}\r\n    >\r\n      <Stack spacing={8}>\r\n        <Editor\r\n          value={userInput}\r\n          onChange={setUserInput}\r\n          placeholder=\"not (p and q) iff (not p or not q)\"\r\n          onSubmit={handleSubmit}\r\n        />\r\n        {items.length > 0 && (\r\n          <RewriterViewLayout\r\n            basis={basisSet}\r\n            items={items}\r\n            onBasisChange={handleBasisChange}\r\n          />\r\n        )}\r\n      </Stack>\r\n    </BaseLayout>\r\n  );\r\n};\r\n","import { checkerRouteLoader } from \"$controllers/checker-controller\";\r\nimport { comparatorRouteLoader } from \"$controllers/comparator-controller\";\r\nimport { evaluatorRouteLoader } from \"$controllers/evaluator-controller\";\r\nimport { rewriterRouteLoader } from \"$controllers/rewriter-controller\";\r\nimport \"$core/interpreter/parser\";\r\nimport {\r\n  THEME_CHECKER_ROUTE,\r\n  THEME_COMPARATOR_ROUTE,\r\n  THEME_EVALUATOR_ROUTE,\r\n  THEME_GLOBAL,\r\n  THEME_REWRITER_ROUTE,\r\n} from \"$theme/index\";\r\nimport { CheckerView } from \"$views/CheckerView\";\r\nimport { ComparatorView } from \"$views/ComparatorView\";\r\nimport { ErrorView } from \"$views/ErrorView\";\r\nimport { EvaluatorView } from \"$views/EvaluatorView\";\r\nimport { HomeView } from \"$views/HomeView\";\r\nimport { RewriterView } from \"$views/RewriterView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  createHashRouter,\r\n  RouterProvider,\r\n} from \"react-router\";\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nconst router = createHashRouter(\r\n  [\r\n    {\r\n      index: true,\r\n      element: <HomeView />,\r\n    },\r\n    {\r\n      path: \"/\",\r\n      errorElement: <ErrorView />,\r\n      children: [\r\n        {\r\n          path: \"/evaluator\",\r\n          element: (\r\n            <ThemeProvider theme={THEME_EVALUATOR_ROUTE}>\r\n              <EvaluatorView />\r\n            </ThemeProvider>\r\n          ),\r\n          loader: evaluatorRouteLoader,\r\n        },\r\n        {\r\n          path: \"/comparator\",\r\n          element: (\r\n            <ThemeProvider theme={THEME_COMPARATOR_ROUTE}>\r\n              <ComparatorView />\r\n            </ThemeProvider>\r\n          ),\r\n          loader: comparatorRouteLoader,\r\n        },\r\n        {\r\n          path: \"/checker\",\r\n          element: (\r\n            <ThemeProvider theme={THEME_CHECKER_ROUTE}>\r\n              <CheckerView />\r\n            </ThemeProvider>\r\n          ),\r\n          loader: checkerRouteLoader,\r\n        },\r\n        {\r\n          path: \"/rewriter\",\r\n          element: (\r\n            <ThemeProvider theme={THEME_REWRITER_ROUTE}>\r\n              <RewriterView />\r\n            </ThemeProvider>\r\n          ),\r\n          loader: rewriterRouteLoader,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  {\r\n    basename: \"/\",\r\n  }\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={THEME_GLOBAL}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <RouterProvider router={router} />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","export const EN_COMPONENTS = {\r\n  \"truth-table\": {\r\n    text: {\r\n      true: \"T\",\r\n      false: \"F\",\r\n    },\r\n    warnings: {\r\n      \"large-truth-table-can-slow-application-down\":\r\n        \"The truth table for this expression is automatically hidden due to its size. You can press the button below to show the table, but this process can take a long time to complete or even crash the application. For expressions with many propositions, truth table is not the recommemnded way to visualize them.\",\r\n      \"confirm\": \"I understand\",\r\n    },\r\n  },\r\n  \"editor\": { run: \"Run\", copy: \"Copy\", copied: \"Copied\" },\r\n  \"alert\": { notice: \"Notice\" },\r\n  \"input-display\": {\r\n    \"empty-string\": \"Empty\",\r\n    \"warnings\": {\r\n      \"the-following-input-are-invalid\":\r\n        \"The following expressions appear to be invalid or incorrect.\",\r\n    },\r\n  },\r\n  \"symbol-config\": { true: \"True\", false: \"False\" },\r\n  \"graph\": {\r\n    center: \"Center\",\r\n    true: \"True\",\r\n    false: \"False\",\r\n    playback: {\r\n      forward: \"Forward\",\r\n      previous: \"Previous\",\r\n      play: \"Play\",\r\n      pause: \"Pause\",\r\n      replay: \"Replay\",\r\n    },\r\n  },\r\n};\r\n","export const EN_NAV = {\r\n  home: \"Home\",\r\n  evaluator: \"Evaluator\",\r\n  rewriter: \"Rewriter\",\r\n  checker: \"Tautology checker\",\r\n  comparator: \"Comparator\",\r\n};\r\n","export default {\r\n  \"error-view\": {\r\n    \"title\": \"Uh oh, that's not good...\",\r\n    \"return-home\": \"Return to home page\",\r\n  },\r\n  \"evaluator-view\": {\r\n    cards: {\r\n      \"input-interpretation\": {\r\n        title: \"Input interpretation\",\r\n      },\r\n      \"output\": {\r\n        \"true\": \"true\",\r\n        \"false\": \"false\",\r\n        \"title\": \"Result\",\r\n        \"formula-evaluates-to-value\":\r\n          \"{{formula}} {{value}}.\",\r\n        \"infos\": {\r\n          \"no-valid-formula-to-display\":\r\n            \"There is no valid formula to display.\",\r\n        },\r\n      },\r\n      \"step-by-step\": {\r\n        \"true\": \"true\",\r\n        \"false\": \"false\",\r\n        \"title\": \"Step-by-step Evaluation\",\r\n        \"tab-item\": \"Expression ({{num}})\",\r\n        \"no-evaluation-step-to-display\":\r\n          \"No evaluation step to display.\",\r\n        \"therefore-formula-is-value\":\r\n          \"Therefore, the formula {{formula}} {{value}}\",\r\n        \"step-x-of-y\": \"Step {{current}} of {{total}}\",\r\n        \"by-truth-table-formula-is-value\": `By the truth table of {{operator}}, {{formula}} is {{value}} as answer for this step.`,\r\n        \"consider-the-formula\":\r\n          \"Consider the formula {{formula}} in this step.\",\r\n        \"given-variable-is-value\":\r\n          \"Given {{variable}} is true, substitute {{variable}} with true in {{formula}} as simplified formula.\",\r\n        \"from-previous-step-substitute-into-formula\":\r\n          \"From {{step}}, {{formula}} is {{value}}. Substitute into {{current}} to obtain {{result}} as simplified formula.\",\r\n        \"infos\": {\r\n          \"no-valid-formula-to-display\":\r\n            \"There is no valid formula to display step-by-step evaluation.\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"rewriter-view\": {\r\n    cards: {\r\n      \"input-interpretation\": {\r\n        title: \"Input interpretation\",\r\n      },\r\n      \"output\": {\r\n        title: \"Result\",\r\n        text: {\r\n          \"formula-cannot-be-expressed-in-the-desired-basis\":\r\n            \"{{formula}} cannot be expressed in the desired basis.\",\r\n          \"formula-is-expressed-as-in-the-desired-basis\":\r\n            \"{{formula}} {{result}}\",\r\n        },\r\n        infos: {\r\n          \"no-valid-formula-to-display\":\r\n            \"There is no valid formula to display.\",\r\n          \"truth-table-is-not-available\":\r\n            \"The truth table for this formula is not available.\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"checker-view\": {\r\n    cards: {\r\n      \"input-interpretation\": {\r\n        title: \"Input Interpretation\",\r\n      },\r\n      \"output\": {\r\n        title: \"Result\",\r\n        text: {\r\n          \"formula-is-value\": \"{{formula}} {{value}}\",\r\n          \"tautology\": \"tautology\",\r\n          \"contradiction\": \"contradiction\",\r\n          \"contingent\": \"contingent on {{variables}}\",\r\n        },\r\n        warnings: {\r\n          \"no-formula-to-display\":\r\n            \"There is no valid formula to display.\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"home-view\": {\r\n    \"lang\": {\r\n      en: \"ENGLISH\",\r\n      th: \"THAI\",\r\n    },\r\n    \"cards\": {\r\n      comparator: {\r\n        desc: \"Compare expressions to see which one of them are equivalent.\",\r\n      },\r\n      evaluator: {\r\n        desc: \"Evaluate expressions according to given truth values.\",\r\n      },\r\n      rewriter: {\r\n        desc: \"Transform an expression into a different basis.\",\r\n      },\r\n      checker: {\r\n        desc: \"Check if an expression is always true, always false, or in-between.\",\r\n      },\r\n    },\r\n    \"boolean-algebra-interpreter\":\r\n      \"Boolean algebra interpreter\",\r\n  },\r\n  \"comparator-view\": {\r\n    cards: {\r\n      \"output\": {\r\n        title: \"Result\",\r\n        text: {\r\n          \"equivalent\": \"Equivalent\",\r\n          \"not-equivalent\": \"Not equivalent\",\r\n          \"formulas-are-value\":\r\n            \"{{first}} {{second}} {{value}}\",\r\n        },\r\n        warnings: {\r\n          \"not-enough-formula-for-comparison\":\r\n            \"There is not enough valid formula to perform comparisons.\",\r\n        },\r\n      },\r\n      \"input-interpretation\": {\r\n        title: \"Input Interpretation\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","export const TH_COMPONENTS = {\r\n  \"truth-table\": {\r\n    text: {\r\n      true: \"T\",\r\n      false: \"F\",\r\n    },\r\n    warnings: {\r\n      \"large-truth-table-can-slow-application-down\":\r\n        \"ตารางค่าความจริงของประพจน์นี้ถูกซ่อนอยู่เพราะตารางมีขนาดใหญ่ กดปุ่มด้านล่างเพื่อแสดงตารางค่าความจริง แต่อาจใช้เวลานานในการแสดงตารางและโปรแกรมอาจะตอบสนองช้าลง\",\r\n      \"confirm\": \"แสดงตารางความจริง\",\r\n    },\r\n  },\r\n  \"editor\": {\r\n    run: \"คำนวณ\",\r\n    copy: \"คำลอก\",\r\n    copied: \"คัดลองสำเร็จ\",\r\n  },\r\n  \"alert\": { notice: \"แจ้งเตือน\" },\r\n  \"input-display\": {\r\n    \"empty-string\": \"ประโยคนี้ว่าง\",\r\n    \"warnings\": {\r\n      \"the-following-input-are-invalid\":\r\n        \"ประโยคต่อไปนี้มีข้อผิดพลาด โปรดตรวจสอบประโยคเหล่านี้อีกครั้งแล้วลองใหม่\",\r\n    },\r\n  },\r\n  \"symbol-config\": { true: \"จริง\", false: \"เท็จ\" },\r\n  \"graph\": {\r\n    center: \"ศูนย์กลาง\",\r\n    true: \"จริง\",\r\n    false: \"เท็จ\",\r\n    playback: {\r\n      forward: \"เดินหน้า\",\r\n      previous: \"ถอยหลัง\",\r\n      play: \"เล่น\",\r\n      pause: \"หยุด\",\r\n      replay: \"เล่นใหม่\",\r\n    },\r\n  },\r\n};\r\n","export const TH_NAV = {\r\n  home: \"หน้าหลัก\",\r\n  evaluator: \"คำนวณค่าความจริง\",\r\n  rewriter: \"เปลี่ยนฐานประพจน์\",\r\n  checker: \"ตรวจสอบสัจนิรันด์\",\r\n  comparator: \"เปรียบเทียบสมมูล\",\r\n};\r\n","export default {\r\n  \"error-view\": {\r\n    \"title\": \"เกิดข้อผิดพลาดขึ้น\",\r\n    \"return-home\": \"กลับหน้าหลัก\",\r\n  },\r\n  \"evaluator-view\": {\r\n    cards: {\r\n      \"input-interpretation\": {\r\n        title: \"ผลการอ่านประโยค\",\r\n      },\r\n      \"output\": {\r\n        \"true\": \"เป็นจริง\",\r\n        \"false\": \"เป็นเท็จ\",\r\n        \"title\": \"ผลลัพท์\",\r\n        \"formula-evaluates-to-value\":\r\n          \"{{formula}} {{value}}\",\r\n        \"infos\": {\r\n          \"no-valid-formula-to-display\":\r\n            \"ไม่มีประพจน์ที่เขียนถูกต้องให้แสดง\",\r\n        },\r\n      },\r\n      \"step-by-step\": {\r\n        \"true\": \"จริง\",\r\n        \"false\": \"เท็จ\",\r\n        \"title\": \"ลำดับขั้นตอนในการคำนวณ\",\r\n        \"tab-item\": \"ประพจน์ ({{num}})\",\r\n        \"no-evaluation-step-to-display\":\r\n          \"ไม่มีลำดับการคำนวณให้แสดง\",\r\n        \"therefore-formula-is-value\":\r\n          \"ดังนั้น ประพจน์ {{formula}} เป็น{{value}}\",\r\n        \"step-x-of-y\":\r\n          \"ลำดับการคำนวณขั้นที่ {{current}} จาก {{total}}\",\r\n        \"by-truth-table-formula-is-value\": `อ้างจากตารางค่าความจริงของตัวเชื่อม {{operator}} สรุปได้ว่า {{formula}} เป็น{{value}}`,\r\n        \"consider-the-formula\": \"คำนวณประพจน์ {{formula}}\",\r\n        \"given-variable-is-value\":\r\n          \"จากที่กำหนดไว้ว่า {{variable}} เป็น{{value}} แทนที่ {{variable}} ด้วย{{value}}ลงในประพจน์ {{formula}}\",\r\n        \"from-previous-step-substitute-into-formula\":\r\n          \"จากลำดับการคำนวณขั้นที่ {{step}} ประพจน์ {{formula}} เป็น{{value}} แทนที่ {{current}} ลงในประพจน์จึงได้ {{result}}\",\r\n        \"infos\": {\r\n          \"no-valid-formula-to-display\":\r\n            \"ไม่มีประพจน์ที่เขียนถูกต้องให้แสดง\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"rewriter-view\": {\r\n    cards: {\r\n      \"input-interpretation\": {\r\n        title: \"ผลการอ่านประโยค\",\r\n      },\r\n      \"output\": {\r\n        title: \"ผลลัพท์การเปลี่ยนฐาน\",\r\n        text: {\r\n          \"formula-cannot-be-expressed-in-the-desired-basis\":\r\n            \"ไม่สามารถเปลี่ยนประพจน์ {{formula}} ไปสู่ฐานที่ต้องการได้\",\r\n          \"formula-is-expressed-as-in-the-desired-basis\":\r\n            \"{{formula}} {{result}} \",\r\n        },\r\n        infos: {\r\n          \"no-valid-formula-to-display\":\r\n            \"ไม่มีประพจน์ที่ถูกต้องให้แสดง\",\r\n          \"truth-table-is-not-available\":\r\n            \"ตารางค่าความจริงของประพจน์ที่ไม่พร้อมที่จะแสดง\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"checker-view\": {\r\n    cards: {\r\n      \"input-interpretation\": {\r\n        title: \"ผลการอ่านประโยค\",\r\n      },\r\n      \"output\": {\r\n        title: \"ผลการตรวจสอบ\",\r\n        text: {\r\n          \"formula-is-value\": \"{{formula}} {{value}}\",\r\n          \"contingent\":\r\n            \"ค่าความจริงขึ้นอยู่กับ {{variables}}\",\r\n          \"tautology\": \"เป็นสัจนิรันด์\",\r\n          \"contradiction\": \"เป็นเท็จเสมอ\",\r\n        },\r\n        infos: {\r\n          \"no-formula-to-display\":\r\n            \"ไม่มีประพจน์ที่ถูกต้องให้แสดง\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  \"home-view\": {\r\n    \"lang\": {\r\n      en: \"อังกฤษ\",\r\n      th: \"ไทย\",\r\n    },\r\n    \"cards\": {\r\n      comparator: {\r\n        desc: \"เปรียบเทียบประพจน์เพื่อให้ว่าประพจน์ไหนบ้างที่สมมูลกัน\",\r\n      },\r\n      evaluator: {\r\n        desc: \"คำนวณหาค่าความจริงของประพจน์ด้วยการแทนที่ค่าความจริงของนิพจน์ลงไปในประพจน์\",\r\n      },\r\n      rewriter: {\r\n        desc: \"เปลี่ยนฐานประพจน์ไปสู่อีกฐานแต่รักษาค่าความจริงไว้\",\r\n      },\r\n      checker: {\r\n        desc: \"ตรวจสอบว่าประพจน์เป็นสัจนิรันด์ เป็นเท็จเสมอ หรือไม่ใช่ทั้งสัจนิรันด์และไม่ใช่ทั้งเท็จเสมอ\",\r\n      },\r\n    },\r\n    \"boolean-algebra-interpreter\": \"ตัวช่วยคำนวณตรรกศาสตร์\",\r\n  },\r\n  \"comparator-view\": {\r\n    cards: {\r\n      \"output\": {\r\n        title: \"ผลลัพท์การเปรียบเทียบ\",\r\n        text: {\r\n          \"equivalent\": \"สมมูลกัน\",\r\n          \"not-equivalent\": \"ไม่สมมูลกัน\",\r\n          \"formulas-are-value\":\r\n            \"{{first}} {{second}} {{value}}\",\r\n        },\r\n        infos: {\r\n          \"not-enough-formula-for-comparison\":\r\n            \"จำนวณประพจน์ไม่เพียงพอที่จะเปรียบเทียบ ต้องการอย่างน้อยสองประพจน์ที่ถูกต้องก่อนที่จะเริ่มเปรียบเทียบได้\",\r\n        },\r\n      },\r\n      \"input-interpretation\": {\r\n        title: \"ผลการอ่านประโยค\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","import i18next from \"i18next\";\r\nimport { default as LangDectector } from \"i18next-browser-languagedetector\";\r\nimport { default as Backend } from \"i18next-http-backend\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { EN_COMPONENTS } from \"./en/component\";\r\nimport { EN_NAV } from \"./en/nav\";\r\nimport EN_VIEWS from \"./en/views\";\r\nimport { TH_COMPONENTS } from \"./th/component\";\r\nimport { TH_NAV } from \"./th/nav\";\r\nimport TH_VIEWS from \"./th/views\";\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    resources: {\r\n      en: {\r\n        components: EN_COMPONENTS,\r\n        nav: EN_NAV,\r\n        views: EN_VIEWS,\r\n      },\r\n      th: {\r\n        views: TH_VIEWS,\r\n        nav: TH_NAV,\r\n        components: TH_COMPONENTS,\r\n      },\r\n    },\r\n    debug: true,\r\n  });\r\n\r\nexport default i18next;\r\n","import { App } from \"$App/App\";\r\nimport \"$locales/config\";\r\nimport { StrictMode } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nimport \"$core/interpreter/grammar\";\r\n\r\ncreateRoot(document.getElementById(\"root\")!).render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n);\r\n\r\n"],"names":["Operator","SyntaxTreeNodeType","collectBinaryNodes","operator","left","right","node","i","grammar","ohm.grammar","semantics","leftExpr","_","rightExpr","leftTree","rightTree","expr","_open","_close","_id","id","children","n","parse","content","m","NOT","operand","BINARY","AND","OR","IMPLIES","IFF","CONST","value","syntaxTreeToString","tree","operandRepr","leftRepr","rightRepr","rewriteTree","expandInward","expandedOp","leftExp","rightExp","simplifyDisjunctionClause","clause","clauses","simplified","seen","clauseRepr","collectClause","subClause","flattened","group","syntaxTreeFromClause","nodes","current","syntaxTreeNormalize","flatClauses","hasMatchThisCycle","j","diff","setDifference","newLeft","rightNewIndex","normalTree","ls","rs","rStringSet","r","c","l","lString","OPERATOR_REPR","operatorToLatex","op","syntaxTreeToLatex","opRepr","checkerRouteLoader","request","userInputRaw","loaderData","expressions","userInput","parseResult","comparatorRouteLoader","inputRaw","syntaxTreeCollectSymbols","symbols","curr","a","b","evaluatorRouteLoader","symbol","rewriterRouteLoader","PALETTE_BASE","createPalette","lightBlue","PALETTE_CHECKER_ROUTE","indigo","PALETTE_COMPARATOR_ROUTE","orange","PALETTE_EVALUATOR_ROUTE","teal","PALETTE_REWRITER_ROUTE","pink","_THEME_GLOBAL","createTheme","responsiveFontSizes","THEME_GLOBAL","THEME_EVALUATOR_ROUTE","THEME_CHECKER_ROUTE","THEME_COMPARATOR_ROUTE","THEME_REWRITER_ROUTE","NAV_ITEMS","AppNavGroup","t","useTranslation","palette","useTheme","pathname","useLocation","Fragment","jsx","Typography","Link","index","target","fontWeight","StyledLatex","props","sx","options","ref","useRef","useEffect","EditorRibbonButton","onClick","open","setOpen","useState","selected","setSelected","anchorRef","jsxs","ButtonGroup","Button","KeyboardArrowDownRounded","Menu","option","isSelected","MenuItem","ListItemIcon","CheckRounded","ListItemText","OPERATOR_TEXT","OPERATOR_SYMBOL","EditorRibbon","Stack","Editor_","placeholder","onChange","onSubmit","inputRef","hasCopied","setHasCopied","cursorStartPos","setCusorStartPos","cursorEndPos","setCusorEndPos","handleInsertChar","text","handleSelect","e","TextField","PlayArrowRounded","ContentCopyRounded","Editor","memo","prev","next","BaseLayout","appHeader","banner","Box","StyledAlert","severity","Alert","AlertTitle","InputDisplayMany","items","item","inputNum","List","ListItem","VerdictDisplay","itemNum","result","originalLatex","resultT","ExpressionCard","primary","secondary","isExpanded","setIsExpanded","toggleExpanded","Card","CardActionArea","CardContent","Collapse","getPermutation","size","perm","permSize","repr","p","exprTreeCollectSymbols","exprTree","_exprTreeToLatex","table","child","exprTreeToLatex","exprTreeToLatexSubstitute","symbolMap","traverse","accum","minified","exprTreeFlattenPostOrder","TruthTableCell_","bgColor","lighten","TableCell","TruthTableCell","TruthTable_","slotProps","userConfirmed","setUserConfirmed","columns","TableContainer","Table","TableHead","TableRow","col","TableBody","sym","column","colIndex","TruthTable","OPERATOR_EVAL_FN","_syntaxTreetoExprTree","orderStart","nodeType","exprTreeFromSyntaxTree","VerdictDisplayMany","f","CheckerViewLayout","typography","CheckerView","prevUserInput","useLoaderData","submit","useSubmit","setUserInput","handleSubmit","permutation","permStr","exprTreeVerifyTautology","perms","symbolTable","ComparatorViewLayout","onMainItemIndexChange","mainItemIndex","validItems","useMemo","mainItem","RadioGroup","exprLatex","FormControlLabel","Radio","iffTree","areEqual","mainItemNum","mainLatex","areEqualT","ComparatorView","setMainItemIndex","useCallback","ErrorView","error","useRouteError","CardHeader","CardActions","StyledTooltipIconButton","onKeyPress","title","disabled","Tooltip","IconButton","GraphControl_","maxValue","minValue","isAnimationPlaying","onAnimationPause","onAnimationPlay","onAnimationReplay","handleForward","handleRewind","Slider","v","KeyboardArrowLeftRounded","ReplayRounded","PauseRounded","KeyboardArrowRightRounded","GraphControl","key","TreeGraphLink","link","order","source","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","x","y","data","katex","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","Group","Tree_","viewportRef","hierarchy","d","viewportWidth","viewportHeight","treeWidth","treeHeight","nodeRadius","Zoom","zoom","VisxTree","treeHeir","Fab","ControlCameraRounded","Tree","Graph","step","setStep","maxStep","setMaxStep","isPlaying","setIsPlaying","intervalRef","isPlayingRef","currentFrameRef","Paper","steps","evaluated","childEval","childStep","substitutions","leftEval","leftSubstituted","leftStep","rightEval","rightRawRepr","rightSubstituted","rightStep","exprTreeFlattenStepByStep","EvaluationDisplayStepMini","subStep","references","subStepIndex","stepIndex","prevMarker","currMarker","substituted","stepRef","refRepr","EvaluationDisplayStep","connective","tag","EvaluationDisplay_","EvaluationGraph","EvaluationDisplay","k","EvaluationDisplayMany","tab","setTab","TabContext","TabList","Tab","TabPanel","PropositionConfig","Grid2","FormControl","FormLabel","EvaluatorViewLayout","onSymbolChange","latex","EvaluatorView","prevSymbols","setSymbolTable","handleSymbolChange","CARDS","CalculateRounded","BalanceRounded","RuleRounded","BorderColorRounded","LANGUAGES","HomeView","i18n","theme","lang","icon","href","light","dark","REWRITE_REGISTRY","registerRewriteRule","trigger","isApplicable","rewrite","basis","q","getRewriteRulesFor","rules","rule","syntaxTreeRewrite","rewrittenTree","RewriterOutputItem","RewriterViewLayout","onBasisChange","FormGroup","Checkbox","RewriterView","setBasis","basisSet","isIncluded","handleBasisChange","globalStyles","GlobalStyles","router","createHashRouter","ThemeProvider","App","CssBaseline","RouterProvider","EN_COMPONENTS","EN_NAV","EN_VIEWS","TH_COMPONENTS","TH_NAV","TH_VIEWS","i18next","Backend","LangDectector","initReactI18next","createRoot","StrictMode"],"mappings":"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"}