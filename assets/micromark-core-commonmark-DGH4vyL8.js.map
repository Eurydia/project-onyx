{"version":3,"file":"micromark-core-commonmark-DGH4vyL8.js","sources":["../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js"],"sourcesContent":["/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}"],"names":["push","splice","classifyCharacter","resolveAll","asciiAlpha","asciiAlphanumeric","asciiControl","asciiAtext","markdownSpace","markdownLineEnding","asciiPunctuation","asciiHexDigit","asciiDigit","markdownLineEndingOrSpace","factorySpace","decodeNamedCharacterReference","subtokenize","factoryDestination","factoryLabel","factoryTitle","factoryWhitespace","normalizeIdentifier","htmlRawNames","htmlBlockNames","attention","resolveAllAttention","tokenizeAttention","events","context","index","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","start","end","movePoint","effects","ok","attentionMarkers","previous","before","marker","code","inside","token","after","close","point","autolink","tokenizeAutolink","nok","size","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","next","blankLine","tokenizeBlankLine","blockQuote","tokenizeBlockQuoteContinuation","exit","tokenizeBlockQuoteStart","self","state","contStart","contBefore","characterEscape","tokenizeCharacterEscape","characterReference","tokenizeCharacterReference","max","test","numeric","value","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","lineStart","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","resolveCodeText","tokenizeCodeText","tailExitIndex","headEnterIndex","enter","between","data","content","resolveContent","tokenizeContent","continuationConstruct","tokenizeContinuation","chunkStart","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","resolveHeadingAtx","tokenizeHeadingAtx","sequenceFurther","htmlFlow","resolveToHtmlFlow","tokenizeHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","name","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","resolveAllLabelEnd","resolveToLabelEnd","tokenizeLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","newEvents","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","list","tokenizeListContinuation","tokenizeListEnd","tokenizeListStart","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","resolveToSetextUnderline","tokenizeSetextUnderline","heading","paragraph"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]}