{"version":3,"file":"index-CXxXTSM3.js","sources":["../../src/components/EditorExecuteButton.tsx","../../src/components/EditorExpressionTextField.tsx","../../src/types/lexer.ts","../../src/components/EditorLegalOperatorGroup.tsx","../../src/components/StyledLatex.tsx","../../src/components/EditorOperatorGroup.tsx","../../src/types/parser.ts","../../src/core/tree/conversion.ts","../../src/components/DisplayInputFeedback.tsx","../../src/core/tree/expr/augment.ts","../../src/components/EditorBooleanSwitcherGroup.tsx","../../src/components/TreeGraphClusterNode.tsx","../../src/components/TreeGraphCluster.tsx","../../src/components/TreeGraph.tsx","../../src/components/Playground.tsx","../../src/components/StyledAlert.tsx","../../src/components/StyledTabs.tsx","../../src/core/interpreter/lexer.ts","../../src/core/interpreter/parser.ts","../../src/core/tree/syntax/normalize.ts","../../src/core/tree/syntax/compare.ts","../../src/core/tree/syntax/simplify.ts","../../src/views/EditorView.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  Stack,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, Fragment, ReactNode } from \"react\";\r\n\r\ntype EditorExecuteButtonProps = {\r\n  onExecute: () => void;\r\n  keyCombinationHint: string[];\r\n};\r\nexport const EditorExecuteButton: FC<\r\n  EditorExecuteButtonProps\r\n> = (props) => {\r\n  const { onExecute, keyCombinationHint } = props;\r\n\r\n  const keyCombination = keyCombinationHint.map(\r\n    (key, index) => {\r\n      let plusElem: ReactNode = <Typography>+</Typography>;\r\n      if (index >= keyCombinationHint.length - 1) {\r\n        plusElem = null;\r\n      }\r\n      return (\r\n        <Fragment key={\"key-hint\" + index}>\r\n          {key}\r\n          {plusElem}\r\n        </Fragment>\r\n      );\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Tooltip\r\n      arrow\r\n      title={\r\n        <Stack\r\n          useFlexGap\r\n          gap={0.5}\r\n          spacing={0.5}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n        >\r\n          {keyCombination}\r\n        </Stack>\r\n      }\r\n    >\r\n      <Button\r\n        disableElevation\r\n        variant=\"contained\"\r\n        startIcon={<PlayArrowRounded />}\r\n        onClick={onExecute}\r\n      >\r\n        คำนวณ\r\n      </Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { TextField } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype EditorExpressionTextFieldProps = {\r\n  value: string;\r\n  rows: number;\r\n  onChange: (value: string) => void;\r\n  onKeyDown: (e: React.KeyboardEvent) => void;\r\n};\r\nexport const EditorExpressionTextField: FC<\r\n  EditorExpressionTextFieldProps\r\n> = (props) => {\r\n  const { rows, value, onChange, onKeyDown } = props;\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      multiline\r\n      rows={rows}\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      onKeyDown={onKeyDown}\r\n      slotProps={{\r\n        input: {\r\n          autoComplete: \"off\",\r\n          autoCorrect: \"off\",\r\n          spellCheck: false,\r\n          sx: {\r\n            fontFamily: \"monospace\",\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","export enum TokenType {\r\n  IDENTIFIER,\r\n  OPERATOR,\r\n  LEFT_PARENTHESIS,\r\n  RIGHT_PARENTHESIS,\r\n  ERROR,\r\n}\r\n\r\nexport enum Operator {\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  IMPLIES = \"IMPLIES\",\r\n  IFF = \"IFF\",\r\n  NOT = \"NOT\",\r\n}\r\n\r\nexport type TokenError = {\r\n  tokenType: TokenType.ERROR;\r\n  reason: string;\r\n};\r\n\r\nexport type TokenIdentifier = {\r\n  tokenType: TokenType.IDENTIFIER;\r\n  value: string;\r\n};\r\n\r\nexport type TokenOperator = {\r\n  tokenType: TokenType.OPERATOR;\r\n  value: Operator;\r\n};\r\n\r\nexport type TokenLeftParen = {\r\n  tokenType: TokenType.LEFT_PARENTHESIS;\r\n  value: \"(\";\r\n};\r\n\r\nexport type TokenRightParen = {\r\n  tokenType: TokenType.RIGHT_PARENTHESIS;\r\n  value: \")\";\r\n};\r\n\r\nexport type Token =\r\n  | TokenError\r\n  | TokenIdentifier\r\n  | TokenOperator\r\n  | TokenLeftParen\r\n  | TokenRightParen;\r\n","import { Operator } from \"$types/lexer\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\nconst LIST = [\r\n  Operator.AND,\r\n  Operator.OR,\r\n  Operator.IMPLIES,\r\n  Operator.IFF,\r\n];\r\n\r\nconst SYMBOL_LABEL = new Map([\r\n  [Operator.AND, \"และ\"],\r\n  [Operator.OR, \"หรือ\"],\r\n  [Operator.IMPLIES, \"ถ้า...แล้ว...\"],\r\n  [Operator.IFF, \"...ก็ต่อเมื่อ...\"],\r\n]);\r\n\r\ntype EditorLegalOperatorGroupProp = {\r\n  values: Map<Operator, boolean>;\r\n  onChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const EditorLegalOperatorGroup: FC<\r\n  EditorLegalOperatorGroupProp\r\n> = (props) => {\r\n  const { onChange, values } = props;\r\n  return (\r\n    <FormGroup\r\n      row\r\n      sx={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        gap: 1,\r\n      }}\r\n    >\r\n      <FormLabel>\r\n        <Typography>Allowed operators</Typography>\r\n      </FormLabel>\r\n      <FormControlLabel\r\n        disabled\r\n        checked\r\n        control={<Checkbox />}\r\n        label=\"นิเสธ\"\r\n      />\r\n      {LIST.map((op, index) => (\r\n        <FormControlLabel\r\n          key={\"include-op\" + index}\r\n          control={<Checkbox />}\r\n          checked={values.get(op) ?? false}\r\n          label={SYMBOL_LABEL.get(op)}\r\n          onChange={(_, v) => onChange(op, v)}\r\n        />\r\n      ))}\r\n    </FormGroup>\r\n  );\r\n};\r\n","import { Typography } from \"@mui/material\";\r\nimport katex, { KatexOptions } from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  options?: KatexOptions;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { tex, options } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, options);\r\n    }\r\n  }, [ref, tex, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      component=\"span\"\r\n      overflow=\"auto\"\r\n    />\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\nconst OPERATOR = [\r\n  {\r\n    name: \"นิเสธ\",\r\n    label: \"\\\\lnot\",\r\n    insertChar: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    name: \"และ\",\r\n    label: \"\\\\land\",\r\n    insertChar: \"\\u{2227}\",\r\n  },\r\n  {\r\n    name: \"หรือ\",\r\n    label: \"\\\\lor\",\r\n    insertChar: \"\\u{2228}\",\r\n  },\r\n  {\r\n    name: \"ถ้า...แล้ว...\",\r\n    label: \"\\\\implies\",\r\n    insertChar: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    name: \"...ก็ต้องเมื่อ...\",\r\n    label: \"\\\\iff\",\r\n    insertChar: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorOperatorGroupProps = {\r\n  onInsertChar: (char: string) => void;\r\n};\r\nexport const EditorOperatorGroup: FC<\r\n  EditorOperatorGroupProps\r\n> = (props) => {\r\n  const { onInsertChar } = props;\r\n\r\n  return (\r\n    <ButtonGroup\r\n      disableElevation\r\n      variant=\"outlined\"\r\n    >\r\n      {OPERATOR.map((btn, btnIndex) => (\r\n        <Tooltip\r\n          key={`btn` + btnIndex}\r\n          title={\r\n            <Typography sx={{ userSelect: \"none\" }}>\r\n              {btn.name}\r\n            </Typography>\r\n          }\r\n          arrow\r\n        >\r\n          <Button\r\n            onClick={() => onInsertChar(btn.insertChar)}\r\n          >\r\n            <StyledLatex\r\n              tex={btn.label}\r\n              options={{\r\n                displayMode: false,\r\n                output: \"htmlAndMathml\",\r\n              }}\r\n            />\r\n          </Button>\r\n        </Tooltip>\r\n      ))}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n","import { Operator } from \"./lexer\";\r\n\r\nexport enum ASTNodeType {\r\n  BINARY_OPERATOR,\r\n  UNARY_OPERATOR,\r\n  ERROR,\r\n  IDENTIFIER,\r\n  CONSTANT,\r\n}\r\n\r\nexport type BinaryOperatorNode = {\r\n  nodeType: ASTNodeType.BINARY_OPERATOR;\r\n  operator:\r\n    | Operator.AND\r\n    | Operator.OR\r\n    | Operator.IMPLIES\r\n    | Operator.IFF;\r\n  leftOperand: SyntaxTree;\r\n  rightOperand: SyntaxTree;\r\n};\r\n\r\nexport type UnaryOperatorNode = {\r\n  nodeType: ASTNodeType.UNARY_OPERATOR;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type ErrorNode = {\r\n  nodeType: ASTNodeType.ERROR;\r\n  reason: string;\r\n};\r\n\r\nexport type IdentifierNode = {\r\n  nodeType: ASTNodeType.IDENTIFIER;\r\n  value: string;\r\n};\r\n\r\nexport type SyntaxTree =\r\n  | BinaryOperatorNode\r\n  | UnaryOperatorNode\r\n  | ErrorNode\r\n  | IdentifierNode;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n\r\nexport type NormalizedAST =\r\n  | IdentifierNode\r\n  | ErrorNode\r\n  | {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR;\r\n      operator: Operator.NOT;\r\n      operand: NormalizedAST;\r\n    }\r\n  | {\r\n      nodeType: ASTNodeType.BINARY_OPERATOR;\r\n      operator: Operator.AND;\r\n      leftOperand: NormalizedAST;\r\n      rightOperand: NormalizedAST;\r\n    };\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { Operator } from \"$types/lexer\";\r\nimport {\r\n  ASTNodeType,\r\n  SymbolTable,\r\n  SyntaxTree,\r\n} from \"$types/parser\";\r\n\r\nconst _syntaxTreeToLatex = (tree: SyntaxTree): string => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === ASTNodeType.ERROR) {\r\n    return tree.reason;\r\n  }\r\n  if (nodeType === ASTNodeType.IDENTIFIER) {\r\n    return tree.value;\r\n  }\r\n\r\n  if (nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n    if (tree.operand.nodeType === ASTNodeType.ERROR) {\r\n      return tree.operand.reason;\r\n    }\r\n    const value = _syntaxTreeToLatex(tree.operand);\r\n    if (tree.operand.nodeType === ASTNodeType.IDENTIFIER) {\r\n      return `\\\\lnot ${value}`;\r\n    }\r\n    return `\\\\lnot (${value})`;\r\n  }\r\n\r\n  const left = tree.leftOperand;\r\n  if (left.nodeType === ASTNodeType.ERROR) {\r\n    return left.reason;\r\n  }\r\n  const right = tree.rightOperand;\r\n  if (right.nodeType === ASTNodeType.ERROR) {\r\n    return right.reason;\r\n  }\r\n  let labelLeft = _syntaxTreeToLatex(left);\r\n  if (left.nodeType === ASTNodeType.BINARY_OPERATOR) {\r\n    labelLeft = `(${labelLeft})`;\r\n  }\r\n  let labelRight = _syntaxTreeToLatex(right);\r\n  if (right.nodeType === ASTNodeType.BINARY_OPERATOR) {\r\n    labelRight = `(${labelRight})`;\r\n  }\r\n\r\n  let label = \"\";\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      break;\r\n    case Operator.IMPLIES:\r\n      label = \"\\\\implies\";\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      break;\r\n  }\r\n  return `${labelLeft} ${label} ${labelRight}`;\r\n};\r\nexport const syntaxTreeToLatex = (tree: SyntaxTree) => {\r\n  return _syntaxTreeToLatex(tree);\r\n};\r\n\r\nconst _syntaxTreeToSymbolTable = (\r\n  tree: SyntaxTree,\r\n  table: SymbolTable\r\n) => {\r\n  if (tree.nodeType === ASTNodeType.ERROR) {\r\n    table.clear();\r\n    return;\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.IDENTIFIER) {\r\n    if (!table.has(tree.value)) {\r\n      table.set(tree.value, true);\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n    _syntaxTreeToSymbolTable(tree.operand, table);\r\n    return;\r\n  }\r\n\r\n  _syntaxTreeToSymbolTable(tree.leftOperand, table);\r\n  _syntaxTreeToSymbolTable(tree.rightOperand, table);\r\n};\r\n\r\nexport const syntaxTreeToSymbolTable = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  const table: SymbolTable = new Map();\r\n  if (tree !== null) {\r\n    _syntaxTreeToSymbolTable(tree, table);\r\n  }\r\n  return table;\r\n};\r\n\r\nconst _exprTreeToSymbolTable = (\r\n  tree: ExprTree,\r\n  table: SymbolTable\r\n) => {\r\n  const { children, label, value } = tree;\r\n  if (value === null) {\r\n    table.clear();\r\n    return;\r\n  }\r\n  if (children.length === 0 && !table.has(label)) {\r\n    table.set(label, true);\r\n    return;\r\n  }\r\n  for (const child of children) {\r\n    _exprTreeToSymbolTable(child, table);\r\n  }\r\n};\r\n\r\nexport const exprTreeToSymbolTable = (tree: ExprTree) => {\r\n  const table = new Map<string, boolean>();\r\n  _exprTreeToSymbolTable(tree, table);\r\n  return table;\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  symTable: SymbolTable\r\n): ExprTree => {\r\n  if (tree.nodeType === ASTNodeType.ERROR) {\r\n    return {\r\n      value: null,\r\n      label: `\\\\text{${tree.reason}}`,\r\n      children: [],\r\n    };\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.IDENTIFIER) {\r\n    return {\r\n      label: tree.value,\r\n      value: symTable.get(tree.value) ?? false,\r\n      children: [],\r\n    };\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n    const child = _syntaxTreetoExprTree(\r\n      tree.operand,\r\n      symTable\r\n    );\r\n    if (child.value === null) {\r\n      return child;\r\n    }\r\n    return {\r\n      label: \"\\\\lnot\",\r\n      value: !child.value,\r\n      children: [child],\r\n    };\r\n  }\r\n\r\n  const left = _syntaxTreetoExprTree(\r\n    tree.leftOperand,\r\n    symTable\r\n  );\r\n  if (left.value === null) {\r\n    return left;\r\n  }\r\n  const right = _syntaxTreetoExprTree(\r\n    tree.rightOperand,\r\n    symTable\r\n  );\r\n  if (right.value === null) {\r\n    return right;\r\n  }\r\n\r\n  let value;\r\n  let label = \"\";\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      value = left.value && right.value;\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      value = left.value || right.value;\r\n      break;\r\n    case Operator.IMPLIES:\r\n      label = \"\\\\implies\";\r\n      value = !left.value || right.value;\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      value = left.value === right.value;\r\n      break;\r\n  }\r\n\r\n  return {\r\n    value,\r\n    label: label,\r\n    children: [left, right],\r\n  };\r\n};\r\n\r\nexport const syntaxTreetoExprTree = (\r\n  ast: SyntaxTree,\r\n  idenTable: SymbolTable\r\n) => {\r\n  return _syntaxTreetoExprTree(ast, idenTable);\r\n};\r\n","import { syntaxTreeToLatex } from \"$core/tree/conversion\";\r\nimport { ASTNodeType, SyntaxTree } from \"$types/parser\";\r\nimport { alpha, Box, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype DisplayInputFeedbackProps = {\r\n  tree: SyntaxTree | null;\r\n  emptyMessage: string;\r\n};\r\nexport const DisplayInputFeedback: FC<\r\n  DisplayInputFeedbackProps\r\n> = (props) => {\r\n  const { tree, emptyMessage } = props;\r\n\r\n  let texContent = <Typography>{emptyMessage}</Typography>;\r\n  if (tree !== null) {\r\n    texContent =\r\n      tree.nodeType === ASTNodeType.ERROR ? (\r\n        <Typography color=\"error\">{tree.reason}</Typography>\r\n      ) : (\r\n        <StyledLatex\r\n          tex={syntaxTreeToLatex(tree)}\r\n          options={{\r\n            displayMode: true,\r\n            output: \"htmlAndMathml\",\r\n          }}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      paddingX={2}\r\n      paddingY={0.5}\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      minHeight={100} // Otherwise the size of the box will be smaller in its empty state\r\n      sx={{\r\n        borderRadius: (t) => t.shape.borderRadius,\r\n        backgroundColor: (t) =>\r\n          alpha(t.palette.secondary.light, 0.4),\r\n      }}\r\n    >\r\n      {texContent}\r\n    </Box>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _augmentExprTree = (tree: ExprTree): ExprTree => {\r\n  if (tree.value === null) {\r\n    return tree;\r\n  }\r\n  const { children, label: name, value } = tree;\r\n  const augmentedChildren: ExprTree[] = [];\r\n\r\n  const childCount = tree.children.length;\r\n  switch (childCount) {\r\n    case 1:\r\n      augmentedChildren.push({\r\n        label: name,\r\n        value,\r\n        children: [_augmentExprTree(children[0])],\r\n      });\r\n      break;\r\n    case 2:\r\n      augmentedChildren.push({\r\n        label: name,\r\n        value,\r\n        children: [\r\n          _augmentExprTree(children[0]),\r\n          _augmentExprTree(children[1]),\r\n        ],\r\n      });\r\n      break;\r\n    default:\r\n      augmentedChildren.push(tree);\r\n  }\r\n\r\n  return {\r\n    value,\r\n    label: value ? \"\\\\text{T}\" : \"\\\\text{F}\",\r\n    children: augmentedChildren,\r\n  };\r\n};\r\n\r\nexport const augmentExprTree = (exptTree: ExprTree) => {\r\n  return _augmentExprTree(exptTree);\r\n};\r\n","import { SymbolTable } from \"$types/parser\";\r\nimport {\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype EditorBooleanSwitcherProps = {\r\n  symTable: SymbolTable;\r\n  onSymChange: (k: string, v: boolean) => void;\r\n};\r\nexport const EditorBooleanSwitcher: FC<\r\n  EditorBooleanSwitcherProps\r\n> = (props) => {\r\n  const { symTable, onSymChange } = props;\r\n\r\n  const switchers: ReactNode[] = [];\r\n  symTable.forEach((v, k) => {\r\n    switchers.push(\r\n      <FormControl\r\n        key={\"synbol-\" + k}\r\n        fullWidth\r\n      >\r\n        <FormLabel\r\n          sx={{\r\n            width: \"100%\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <StyledLatex tex={k} />\r\n        </FormLabel>\r\n        <RadioGroup\r\n          row\r\n          value={v ? \"T\" : \"F\"}\r\n          onChange={(e) =>\r\n            onSymChange(k, e.target.value === \"T\")\r\n          }\r\n        >\r\n          <FormControlLabel\r\n            control={<Radio disableRipple />}\r\n            value=\"T\"\r\n            label=\"จริง\"\r\n          />\r\n          <FormControlLabel\r\n            control={<Radio disableRipple />}\r\n            value=\"F\"\r\n            label=\"เท็จ\"\r\n          />\r\n        </RadioGroup>\r\n      </FormControl>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={1}\r\n      width=\"100%\"\r\n      divider={\r\n        <Divider\r\n          flexItem\r\n          variant=\"middle\"\r\n        />\r\n      }\r\n    >\r\n      {switchers}\r\n    </Stack>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype NodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  onClick: (exprTree: ExprTree) => void;\r\n};\r\n\r\nexport const TreeGraphClusterNode: FC<NodeProps> = (\r\n  props\r\n) => {\r\n  const { node, onClick } = props;\r\n  const theme = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  const handleClick = () => {\r\n    onClick(node.data);\r\n  };\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(node.data.label)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, node.data.label]);\r\n\r\n  return (\r\n    <Group\r\n      top={node.y}\r\n      left={node.x}\r\n      onClick={handleClick}\r\n    >\r\n      <circle\r\n        r={30}\r\n        fill={theme.palette.secondary.light}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={theme.typography.body1.fontSize}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n    </Group>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Fab,\r\n  Tooltip,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { TreeGraphClusterNode } from \"./TreeGraphClusterNode\";\r\n\r\ntype TreeGraphClusterProps = {\r\n  exprTree: ExprTree;\r\n  width: number;\r\n  height: number;\r\n  onNodeClick: (exptTree: ExprTree) => void;\r\n};\r\nexport const TreeGraphCluster: FC<TreeGraphClusterProps> = (\r\n  props\r\n) => {\r\n  const { exprTree, height, width, onNodeClick } = props;\r\n  const theme = useTheme();\r\n\r\n  const data = hierarchy(exprTree);\r\n\r\n  const nodeSizeY = Math.max(\r\n    height / (data.height + 1),\r\n    100\r\n  );\r\n  const nodeSizeX = Math.max(\r\n    width / 3 / (data.leaves().length + 1),\r\n    100\r\n  );\r\n\r\n  return (\r\n    <Zoom<SVGSVGElement>\r\n      width={width}\r\n      height={height}\r\n      scaleXMin={1 / 3}\r\n      scaleXMax={4}\r\n      scaleYMin={1 / 3}\r\n      scaleYMax={4}\r\n    >\r\n      {(zoom) => (\r\n        <Fragment>\r\n          <svg\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            ref={zoom.containerRef}\r\n            style={{ touchAction: \"none\" }}\r\n          >\r\n            <g\r\n              onTouchStart={zoom.dragStart}\r\n              onTouchMove={zoom.dragMove}\r\n              onTouchEnd={zoom.dragEnd}\r\n              onMouseDown={zoom.dragStart}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={zoom.dragEnd}\r\n              onMouseLeave={() => {\r\n                if (zoom.isDragging) zoom.dragEnd();\r\n              }}\r\n              transform={zoom.toString()}\r\n            >\r\n              <Tree<ExprTree>\r\n                root={data}\r\n                size={[width, height]}\r\n                nodeSize={[nodeSizeX, nodeSizeY]}\r\n              >\r\n                {(treeHeir) => (\r\n                  <Group>\r\n                    {treeHeir.links().map((link, i) => (\r\n                      <LinkVertical<\r\n                        HierarchyPointLink<ExprTree>,\r\n                        HierarchyPointNode<ExprTree>\r\n                      >\r\n                        key={`cluster-link-${i}`}\r\n                        data={link}\r\n                        strokeWidth=\"5\"\r\n                        stroke={theme.palette.primary.light}\r\n                        strokeOpacity={0.6}\r\n                        fill=\"none\"\r\n                      />\r\n                    ))}\r\n                    {treeHeir\r\n                      .descendants()\r\n                      .map((node, i) => (\r\n                        <TreeGraphClusterNode\r\n                          key={`cluster-node-${i}`}\r\n                          node={node}\r\n                          onClick={onNodeClick}\r\n                        />\r\n                      ))}\r\n                  </Group>\r\n                )}\r\n              </Tree>\r\n            </g>\r\n          </svg>\r\n          <Fab\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            onClick={zoom.center}\r\n            sx={{\r\n              position: \"absolute\",\r\n              left: 16,\r\n              bottom: 16,\r\n            }}\r\n          >\r\n            <Tooltip\r\n              placement=\"right\"\r\n              title={\r\n                <Typography>กลับเข้าศูนย์กลาง</Typography>\r\n              }\r\n            >\r\n              <ControlCameraRounded />\r\n            </Tooltip>\r\n          </Fab>\r\n        </Fragment>\r\n      )}\r\n    </Zoom>\r\n  );\r\n};\r\n","import {\r\n  exprTreeToSymbolTable,\r\n  syntaxTreetoExprTree,\r\n  syntaxTreeToSymbolTable,\r\n} from \"$core/tree/conversion\";\r\nimport { augmentExprTree } from \"$core/tree/expr/augment\";\r\nimport { ExprTree } from \"$types/ast\";\r\nimport { SymbolTable, SyntaxTree } from \"$types/parser\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  Fragment,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { EditorBooleanSwitcher } from \"./EditorBooleanSwitcherGroup\";\r\nimport { TreeGraphCluster } from \"./TreeGraphCluster\";\r\n\r\ntype TreeGraphProps = {\r\n  tree: SyntaxTree | null;\r\n  emptyText: string;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const { tree, emptyText } = props;\r\n\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [symTable, setSymTable] = useState(\r\n    syntaxTreeToSymbolTable(tree)\r\n  );\r\n  const [visibleSymbols, setVisibleSymbols] =\r\n    useState(symTable);\r\n\r\n  useEffect(() => {\r\n    setSymTable(syntaxTreeToSymbolTable(tree));\r\n  }, [tree]);\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const container = ref.current;\r\n  const width =\r\n    container === null\r\n      ? 200\r\n      : container.getBoundingClientRect().width;\r\n  const height =\r\n    container === null\r\n      ? 200\r\n      : container.getBoundingClientRect().height;\r\n\r\n  const toggleDialogVisible = () => {\r\n    setDialogOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleNodeClick = (exprTree: ExprTree) => {\r\n    const selectedBranch = exprTreeToSymbolTable(exprTree);\r\n    const next: SymbolTable = new Map();\r\n    selectedBranch.forEach((_, k) => {\r\n      const v = symTable.get(k) ?? false;\r\n      next.set(k, v);\r\n    });\r\n    setVisibleSymbols(next);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleSymChange = (k: string, v: boolean) => {\r\n    setSymTable((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n    setVisibleSymbols((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        ref={ref}\r\n        sx={{\r\n          height: \"100%\",\r\n          position: \"relative\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {tree === null ? (\r\n          <Typography fontStyle=\"italic\">\r\n            {emptyText}\r\n          </Typography>\r\n        ) : (\r\n          <TreeGraphCluster\r\n            exprTree={augmentExprTree(\r\n              syntaxTreetoExprTree(tree, symTable)\r\n            )}\r\n            width={width}\r\n            onNodeClick={handleNodeClick}\r\n            height={height}\r\n          />\r\n        )}\r\n      </Box>\r\n      <Dialog\r\n        onClose={toggleDialogVisible}\r\n        open={dialogOpen}\r\n      >\r\n        <DialogTitle>แก้ไขค่าความจริง</DialogTitle>\r\n        <DialogContent>\r\n          <EditorBooleanSwitcher\r\n            symTable={visibleSymbols}\r\n            onSymChange={handleSymChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions disableSpacing>\r\n          <Button\r\n            onClick={toggleDialogVisible}\r\n            variant=\"text\"\r\n          >\r\n            ปิด\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { SyntaxTree } from \"$types/parser\";\r\nimport { Box, Stack, alpha } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { DisplayInputFeedback } from \"./DisplayInputFeedback\";\r\nimport { TreeGraph } from \"./TreeGraph\";\r\n\r\ntype PlaygroundProps = {\r\n  tree: SyntaxTree | null;\r\n};\r\nexport const Playground: FC<PlaygroundProps> = (props) => {\r\n  const { tree } = props;\r\n  return (\r\n    <Stack spacing={1}>\r\n      <DisplayInputFeedback\r\n        tree={tree}\r\n        emptyMessage=\"ไม่มีประพจน์ให้แสดงในขณะนี้\"\r\n      />\r\n      <Box\r\n        sx={{\r\n          height: \"75vh\",\r\n          width: \"100%\",\r\n          borderWidth: 4,\r\n          borderStyle: \"solid\",\r\n          borderRadius: (t) => t.shape.borderRadius,\r\n          borderColor: (t) =>\r\n            alpha(t.palette.secondary.main, 0.4),\r\n        }}\r\n      >\r\n        <TreeGraph\r\n          tree={tree}\r\n          emptyText=\"ไม่มีประพจน์ให้แสดงในขณะนี้\"\r\n        />\r\n      </Box>\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  CloseRounded,\r\n  QuestionMarkRounded,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  Collapse,\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, ReactNode, useState } from \"react\";\r\n\r\ntype StyledAlertProps = {\r\n  children: ReactNode;\r\n};\r\nexport const StyledAlert: FC<StyledAlertProps> = (\r\n  props\r\n) => {\r\n  const { children } = props;\r\n  const [dismissed, setDismissed] = useState(false);\r\n\r\n  return (\r\n    <Collapse\r\n      in={!dismissed}\r\n      unmountOnExit\r\n    >\r\n      <Alert\r\n        severity=\"info\"\r\n        variant=\"standard\"\r\n        color=\"info\"\r\n        icon={<QuestionMarkRounded fontSize=\"inherit\" />}\r\n        action={\r\n          <Tooltip title={<Typography>ปิด</Typography>}>\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={() => setDismissed(true)}\r\n            >\r\n              <CloseRounded />\r\n            </IconButton>\r\n          </Tooltip>\r\n        }\r\n        sx={{\r\n          borderRadius: (t) => t.shape.borderRadius,\r\n        }}\r\n      >\r\n        {children}\r\n      </Alert>\r\n    </Collapse>\r\n  );\r\n};\r\n","import { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport { Box, Tab } from \"@mui/material\";\r\nimport { FC, Fragment, ReactNode, useState } from \"react\";\r\n\r\ntype StyledTabsProps = {\r\n  tabLabels: string[];\r\n  panels: ReactNode[];\r\n};\r\nexport const StyledTabs: FC<StyledTabsProps> = (props) => {\r\n  const { panels, tabLabels } = props;\r\n\r\n  const [active, setActive] = useState(0);\r\n  if (\r\n    panels.length === 0 ||\r\n    panels.length !== tabLabels.length\r\n  ) {\r\n    return <Fragment />;\r\n  }\r\n\r\n  return (\r\n    <TabContext value={active}>\r\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n        <TabList\r\n          onChange={(_, v) => setActive(v)}\r\n          variant=\"scrollable\"\r\n        >\r\n          {tabLabels.map((label, index) => (\r\n            <Tab\r\n              key={\"tab-lable\" + index}\r\n              label={label}\r\n              value={index}\r\n            />\r\n          ))}\r\n        </TabList>\r\n      </Box>\r\n      {panels.map((panel, index) => (\r\n        <TabPanel\r\n          key={\"tab-pane\" + index}\r\n          sx={{ padding: 0 }}\r\n          value={index}\r\n        >\r\n          {panel}\r\n        </TabPanel>\r\n      ))}\r\n    </TabContext>\r\n  );\r\n};\r\n","import {\r\n  Operator,\r\n  Token,\r\n  TokenLeftParen,\r\n  TokenRightParen,\r\n  TokenType,\r\n} from \"$types/lexer\";\r\n\r\nconst OPERATOR_TABLE: Record<string, Operator> = {\r\n  \"and\": Operator.AND,\r\n  \"or\": Operator.OR,\r\n  \"implies\": Operator.IMPLIES,\r\n  \"iff\": Operator.IFF,\r\n  \"not\": Operator.NOT,\r\n  \"\\u{2227}\": Operator.AND,\r\n  \"\\u{2228}\": Operator.OR,\r\n  \"\\u{21D2}\": Operator.IMPLIES,\r\n  \"\\u{21D4}\": Operator.IFF,\r\n  \"\\u{00AC}\": Operator.NOT,\r\n};\r\n\r\nconst IS_WHITESPACE_MANY = /\\s+/g;\r\nconst IS_IDENTIFIER = /^\\w+/m;\r\n\r\nconst TOKEN_LEFT_PARENTHESIS: TokenLeftParen = {\r\n  tokenType: TokenType.LEFT_PARENTHESIS,\r\n  value: \"(\",\r\n};\r\n\r\nconst TOKEN_RIGHT_PARENTHESIS: TokenRightParen = {\r\n  tokenType: TokenType.RIGHT_PARENTHESIS,\r\n  value: \")\",\r\n};\r\n\r\nconst collapseWhitespace = (source: string): string => {\r\n  return source.replaceAll(IS_WHITESPACE_MANY, \" \");\r\n};\r\n\r\nconst collectIdentifier = (\r\n  source: string\r\n): string | null => {\r\n  const match = IS_IDENTIFIER.exec(source);\r\n  if (match === null) {\r\n    return null;\r\n  }\r\n  return match[0];\r\n};\r\n\r\nconst lex = (source: string): Token[] => {\r\n  const tokens: Token[] = [];\r\n  const sourceLength = source.length;\r\n  let pos = 0;\r\n\r\n  while (pos < sourceLength) {\r\n    const char = source[pos];\r\n\r\n    switch (char) {\r\n      case \" \":\r\n        pos++;\r\n        continue;\r\n      case \"(\":\r\n        pos++;\r\n        tokens.push(TOKEN_LEFT_PARENTHESIS);\r\n        continue;\r\n      case \")\":\r\n        pos++;\r\n        tokens.push(TOKEN_RIGHT_PARENTHESIS);\r\n        continue;\r\n    }\r\n\r\n    const opSign = OPERATOR_TABLE[char];\r\n    if (opSign !== undefined) {\r\n      pos++;\r\n      tokens.push({\r\n        tokenType: TokenType.OPERATOR,\r\n        value: opSign,\r\n      });\r\n    }\r\n\r\n    const iden = collectIdentifier(source.slice(pos));\r\n    if (iden === null || iden.length === 0) {\r\n      tokens.push({\r\n        tokenType: TokenType.ERROR,\r\n        // reason: `Lexical Error: Invalid identifier found \"${iden}\" at position \"${pos}\"`,\r\n        reason: `เกิดข้อผิดพลาด`,\r\n      });\r\n      break;\r\n    }\r\n\r\n    const opName = OPERATOR_TABLE[iden];\r\n    if (opName !== undefined) {\r\n      pos += iden.length;\r\n      tokens.push({\r\n        tokenType: TokenType.OPERATOR,\r\n        value: opName,\r\n      });\r\n      continue;\r\n    }\r\n\r\n    pos += iden.length;\r\n    tokens.push({\r\n      tokenType: TokenType.IDENTIFIER,\r\n      value: iden,\r\n    });\r\n    continue;\r\n  }\r\n  return tokens;\r\n};\r\n\r\nexport const lexer = (source: string): Token[] => {\r\n  const sourceCollapsed = collapseWhitespace(source);\r\n  return lex(sourceCollapsed);\r\n};\r\n","import { Operator, Token, TokenType } from \"$types/lexer\";\r\nimport { ASTNodeType, SyntaxTree } from \"$types/parser\";\r\n\r\nconst OPERATOR_PRECEDENCE = {\r\n  [Operator.NOT]: 6,\r\n  [Operator.AND]: 5,\r\n  [Operator.OR]: 4,\r\n  [Operator.IMPLIES]: 3,\r\n  [Operator.IFF]: 2,\r\n};\r\n\r\nconst polishToAST = (tokens: Token[]): SyntaxTree => {\r\n  const tok = tokens.pop();\r\n  if (tok === undefined) {\r\n    return {\r\n      nodeType: ASTNodeType.ERROR,\r\n      // reason: \"Parser Error: Unexpected end of input\",\r\n      reason: \"เกิดข้อผิดพลาด นิพจน์ไม่ถูกต้อง\",\r\n    };\r\n  }\r\n\r\n  switch (tok.tokenType) {\r\n    case TokenType.ERROR:\r\n      return {\r\n        nodeType: ASTNodeType.ERROR,\r\n        reason: tok.reason,\r\n      };\r\n    case TokenType.RIGHT_PARENTHESIS:\r\n    case TokenType.LEFT_PARENTHESIS:\r\n      return {\r\n        nodeType: ASTNodeType.ERROR,\r\n        reason: `เกิดข้อผิดพลาด`,\r\n      };\r\n    case TokenType.IDENTIFIER:\r\n      return {\r\n        nodeType: ASTNodeType.IDENTIFIER,\r\n        value: tok.value,\r\n      };\r\n  }\r\n\r\n  if (tok.value === Operator.NOT) {\r\n    const operand = polishToAST(tokens);\r\n    if (operand.nodeType === ASTNodeType.ERROR) {\r\n      return operand;\r\n    }\r\n    return {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: tok.value,\r\n      operand,\r\n    };\r\n  }\r\n\r\n  const right = polishToAST(tokens);\r\n  if (right.nodeType === ASTNodeType.ERROR) {\r\n    return right;\r\n  }\r\n\r\n  const left = polishToAST(tokens);\r\n  if (left.nodeType === ASTNodeType.ERROR) {\r\n    return left;\r\n  }\r\n\r\n  return {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: tok.value,\r\n    leftOperand: left,\r\n    rightOperand: right,\r\n  };\r\n};\r\n\r\nconst infixToPolish = (tokens: Token[]): Token[] => {\r\n  const outStack: Token[] = [];\r\n  const opStack: Token[] = [];\r\n\r\n  let pos = 0;\r\n\r\n  while (pos < tokens.length) {\r\n    const token = tokens[pos];\r\n    pos++;\r\n\r\n    switch (token.tokenType) {\r\n      case TokenType.ERROR:\r\n        tokens.push(token);\r\n        return tokens;\r\n\r\n      case TokenType.IDENTIFIER:\r\n        outStack.push(token);\r\n        break;\r\n\r\n      case TokenType.OPERATOR: {\r\n        const precedence = OPERATOR_PRECEDENCE[token.value];\r\n\r\n        while (opStack.length > 0) {\r\n          const lastOp = opStack[opStack.length - 1];\r\n          if (\r\n            lastOp.tokenType === TokenType.LEFT_PARENTHESIS\r\n          ) {\r\n            break;\r\n          }\r\n          if (\r\n            lastOp.tokenType === TokenType.OPERATOR &&\r\n            OPERATOR_PRECEDENCE[lastOp.value] < precedence\r\n          ) {\r\n            break;\r\n          }\r\n          opStack.pop();\r\n          outStack.push(lastOp);\r\n        }\r\n        opStack.push(token);\r\n        break;\r\n      }\r\n\r\n      case TokenType.LEFT_PARENTHESIS:\r\n        opStack.push(token);\r\n        break;\r\n\r\n      case TokenType.RIGHT_PARENTHESIS: {\r\n        while (opStack.length > 0) {\r\n          const lastOp = opStack.pop();\r\n          if (lastOp === undefined) {\r\n            break;\r\n          }\r\n\r\n          if (\r\n            lastOp.tokenType === TokenType.LEFT_PARENTHESIS\r\n          ) {\r\n            break;\r\n          }\r\n          outStack.push(lastOp);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  while (opStack.length > 0) {\r\n    const lastOp = opStack.pop();\r\n    if (lastOp === undefined) {\r\n      break;\r\n    }\r\n    outStack.push(lastOp);\r\n  }\r\n  return outStack;\r\n};\r\n\r\nexport const parser = (tokens: Token[]) => {\r\n  const polish = infixToPolish(tokens);\r\n\r\n  return polishToAST(polish);\r\n};\r\n","import { Operator } from \"$types/lexer\";\r\nimport { ASTNodeType, SyntaxTree } from \"$types/parser\";\r\n\r\nconst normalizeDisjunction = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n): SyntaxTree => {\r\n  return {\r\n    nodeType: ASTNodeType.UNARY_OPERATOR,\r\n    operator: Operator.NOT,\r\n    operand: {\r\n      nodeType: ASTNodeType.BINARY_OPERATOR,\r\n      operator: Operator.AND,\r\n      leftOperand: {\r\n        nodeType: ASTNodeType.UNARY_OPERATOR,\r\n        operator: Operator.NOT,\r\n        operand: left,\r\n      },\r\n      rightOperand: {\r\n        nodeType: ASTNodeType.UNARY_OPERATOR,\r\n        operator: Operator.NOT,\r\n        operand: right,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst normalizeImplication = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n): SyntaxTree => {\r\n  return {\r\n    nodeType: ASTNodeType.UNARY_OPERATOR,\r\n    operator: Operator.NOT,\r\n    operand: {\r\n      nodeType: ASTNodeType.BINARY_OPERATOR,\r\n      operator: Operator.AND,\r\n      leftOperand: left,\r\n      rightOperand: {\r\n        nodeType: ASTNodeType.UNARY_OPERATOR,\r\n        operator: Operator.NOT,\r\n        operand: right,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst normalizeEquivalence = (\r\n  left: SyntaxTree,\r\n  right: SyntaxTree\r\n): SyntaxTree => {\r\n  const branchLeft: SyntaxTree = {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: Operator.AND,\r\n    leftOperand: left,\r\n    rightOperand: {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: right,\r\n    },\r\n  };\r\n\r\n  const branchRight: SyntaxTree = {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: Operator.AND,\r\n    leftOperand: right,\r\n    rightOperand: {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: left,\r\n    },\r\n  };\r\n\r\n  return {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: Operator.AND,\r\n    leftOperand: {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: branchLeft,\r\n    },\r\n    rightOperand: {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: branchRight,\r\n    },\r\n  };\r\n};\r\n\r\nconst _normalizeTree = (tree: SyntaxTree): SyntaxTree => {\r\n  if (\r\n    tree.nodeType === ASTNodeType.ERROR ||\r\n    tree.nodeType === ASTNodeType.IDENTIFIER\r\n  ) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n    const operand = _normalizeTree(tree.operand);\r\n    return {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: tree.operator,\r\n      operand,\r\n    };\r\n  }\r\n\r\n  const left = _normalizeTree(tree.leftOperand);\r\n  const right = _normalizeTree(tree.rightOperand);\r\n\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      return {\r\n        nodeType: ASTNodeType.BINARY_OPERATOR,\r\n        operator: Operator.AND,\r\n        leftOperand: left,\r\n        rightOperand: right,\r\n      };\r\n    case Operator.OR:\r\n      return normalizeDisjunction(left, right);\r\n    case Operator.IMPLIES:\r\n      return normalizeImplication(left, right);\r\n    case Operator.IFF:\r\n      return normalizeEquivalence(left, right);\r\n  }\r\n};\r\n\r\nexport const normalizeSyntaxTree = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  return _normalizeTree(tree);\r\n};\r\n","import { ASTNodeType, SyntaxTree } from \"$types/parser\";\r\n\r\nconst _compareSyntaxTree = (\r\n  a: SyntaxTree,\r\n  b: SyntaxTree\r\n): boolean => {\r\n  if (\r\n    a.nodeType === ASTNodeType.ERROR ||\r\n    b.nodeType === ASTNodeType.ERROR\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (a.nodeType !== b.nodeType) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    a.nodeType === ASTNodeType.IDENTIFIER &&\r\n    b.nodeType === ASTNodeType.IDENTIFIER\r\n  ) {\r\n    return a.value === b.value;\r\n  }\r\n\r\n  if (\r\n    a.nodeType === ASTNodeType.UNARY_OPERATOR &&\r\n    b.nodeType === ASTNodeType.UNARY_OPERATOR\r\n  ) {\r\n    return _compareSyntaxTree(a.operand, b.operand);\r\n  }\r\n\r\n  if (\r\n    a.nodeType === ASTNodeType.BINARY_OPERATOR &&\r\n    b.nodeType === ASTNodeType.BINARY_OPERATOR\r\n  ) {\r\n    if (a.operator !== b.operator) {\r\n      return false;\r\n    }\r\n\r\n    return (\r\n      _compareSyntaxTree(a.leftOperand, b.leftOperand) &&\r\n      _compareSyntaxTree(a.rightOperand, b.rightOperand)\r\n    );\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const compareSyntaxTree = (\r\n  a: SyntaxTree,\r\n  b: SyntaxTree\r\n) => {\r\n  return _compareSyntaxTree(a, b);\r\n};\r\n","import { Operator } from \"$types/lexer\";\r\nimport {\r\n  ASTNodeType,\r\n  BinaryOperatorNode,\r\n  SyntaxTree,\r\n  UnaryOperatorNode,\r\n} from \"$types/parser\";\r\nimport { compareSyntaxTree } from \"./compare\";\r\n\r\nconst collapseToDisjunction = (\r\n  normalizedTree: UnaryOperatorNode\r\n): BinaryOperatorNode | null => {\r\n  const root = normalizedTree;\r\n  const c = root.operand;\r\n  if (c.nodeType !== ASTNodeType.BINARY_OPERATOR) {\r\n    return null;\r\n  }\r\n\r\n  const lc = c.leftOperand;\r\n  if (lc.nodeType !== ASTNodeType.UNARY_OPERATOR) {\r\n    return null;\r\n  }\r\n  const rc = c.rightOperand;\r\n  if (rc.nodeType !== ASTNodeType.UNARY_OPERATOR) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: Operator.OR,\r\n    leftOperand: lc.operand,\r\n    rightOperand: rc.operand,\r\n  };\r\n};\r\n\r\nconst collapseToImplication = (\r\n  normalizedTree: UnaryOperatorNode\r\n): BinaryOperatorNode | null => {\r\n  const root = normalizedTree;\r\n  const c = root.operand;\r\n  if (c.nodeType !== ASTNodeType.BINARY_OPERATOR) {\r\n    return null;\r\n  }\r\n\r\n  const rc = c.rightOperand;\r\n  if (rc.nodeType !== ASTNodeType.UNARY_OPERATOR) {\r\n    return null;\r\n  }\r\n  return {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: Operator.IMPLIES,\r\n    leftOperand: c.leftOperand,\r\n    rightOperand: rc.operand,\r\n  };\r\n};\r\n\r\nconst collapseToEquivalence = (\r\n  normalizedTree: BinaryOperatorNode\r\n): BinaryOperatorNode | null => {\r\n  const root = normalizedTree;\r\n  const l = root.leftOperand;\r\n  const r = root.rightOperand;\r\n\r\n  if (\r\n    l.nodeType !== ASTNodeType.UNARY_OPERATOR ||\r\n    r.nodeType !== ASTNodeType.UNARY_OPERATOR\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const cl = l.operand;\r\n  const cr = r.operand;\r\n  if (\r\n    cl.nodeType !== ASTNodeType.BINARY_OPERATOR ||\r\n    cr.nodeType !== ASTNodeType.BINARY_OPERATOR\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const lcl = cl.leftOperand;\r\n  const lcr = cr.leftOperand;\r\n  if (!compareSyntaxTree(lcl, lcr)) {\r\n    return null;\r\n  }\r\n\r\n  const rcl = cl.rightOperand;\r\n  const rcr = cr.rightOperand;\r\n  if (!compareSyntaxTree(rcl, rcr)) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: Operator.IFF,\r\n    leftOperand: lcl,\r\n    rightOperand: lcr,\r\n  };\r\n};\r\n\r\nconst _collapseNormalizedTree = (\r\n  tree: SyntaxTree,\r\n  target: Set<Operator>\r\n): SyntaxTree => {\r\n  if (\r\n    tree.nodeType === ASTNodeType.ERROR ||\r\n    tree.nodeType === ASTNodeType.IDENTIFIER\r\n  ) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n    let collapsed: BinaryOperatorNode | null = null;\r\n    if (target.has(Operator.OR)) {\r\n      collapsed = collapseToDisjunction(tree);\r\n    } else if (target.has(Operator.IMPLIES)) {\r\n      collapsed = collapseToImplication(tree);\r\n    }\r\n\r\n    if (collapsed === null) {\r\n      const child = _collapseNormalizedTree(\r\n        tree.operand,\r\n        target\r\n      );\r\n      return {\r\n        nodeType: ASTNodeType.UNARY_OPERATOR,\r\n        operator: Operator.NOT,\r\n        operand: child,\r\n      };\r\n    }\r\n\r\n    const left = _collapseNormalizedTree(\r\n      collapsed.leftOperand,\r\n      target\r\n    );\r\n    if (left.nodeType === ASTNodeType.ERROR) {\r\n      return left;\r\n    }\r\n    const right = _collapseNormalizedTree(\r\n      collapsed.rightOperand,\r\n      target\r\n    );\r\n    if (right.nodeType === ASTNodeType.ERROR) {\r\n      return right;\r\n    }\r\n\r\n    return {\r\n      nodeType: ASTNodeType.BINARY_OPERATOR,\r\n      operator: collapsed.operator,\r\n      leftOperand: left,\r\n      rightOperand: right,\r\n    };\r\n  }\r\n\r\n  let collapsed: BinaryOperatorNode | null = null;\r\n  if (target.has(Operator.AND)) {\r\n    collapsed = tree;\r\n  } else if (target.has(Operator.IFF)) {\r\n    collapsed = collapseToEquivalence(tree);\r\n  }\r\n\r\n  if (collapsed !== null) {\r\n    const left = _collapseNormalizedTree(\r\n      collapsed.leftOperand,\r\n      target\r\n    );\r\n    if (left.nodeType === ASTNodeType.ERROR) {\r\n      return left;\r\n    }\r\n\r\n    const right = _collapseNormalizedTree(\r\n      collapsed.rightOperand,\r\n      target\r\n    );\r\n    if (right.nodeType === ASTNodeType.ERROR) {\r\n      return right;\r\n    }\r\n\r\n    return {\r\n      nodeType: ASTNodeType.BINARY_OPERATOR,\r\n      operator: collapsed.operator,\r\n      leftOperand: left,\r\n      rightOperand: right,\r\n    };\r\n  }\r\n  if (target.has(Operator.OR)) {\r\n    const left: SyntaxTree = {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: _collapseNormalizedTree(\r\n        tree.leftOperand,\r\n        target\r\n      ),\r\n    };\r\n    const right: SyntaxTree = {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: _collapseNormalizedTree(\r\n        tree.rightOperand,\r\n        target\r\n      ),\r\n    };\r\n    return {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: {\r\n        nodeType: ASTNodeType.BINARY_OPERATOR,\r\n        operator: Operator.OR,\r\n        leftOperand: left,\r\n        rightOperand: right,\r\n      },\r\n    };\r\n  } else if (target.has(Operator.IMPLIES)) {\r\n    return {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator: Operator.NOT,\r\n      operand: {\r\n        nodeType: ASTNodeType.BINARY_OPERATOR,\r\n        operator: Operator.IMPLIES,\r\n        leftOperand: _collapseNormalizedTree(\r\n          tree.leftOperand,\r\n          target\r\n        ),\r\n        rightOperand: {\r\n          nodeType: ASTNodeType.UNARY_OPERATOR,\r\n          operator: Operator.NOT,\r\n          operand: _collapseNormalizedTree(\r\n            tree.rightOperand,\r\n            target\r\n          ),\r\n        },\r\n      },\r\n    };\r\n  }\r\n  return {\r\n    nodeType: ASTNodeType.ERROR,\r\n    reason:\r\n      \"ไม่สามารถแปลงนิพจน์ให้อยู่ในรูปแบบที่ต้องการได้\",\r\n    // reason: \"Cannot transform expression to desired form\",\r\n  };\r\n};\r\n\r\nexport const collapseSyntaxTree = (\r\n  normalizedTree: SyntaxTree | null,\r\n  target: Set<Operator>\r\n) => {\r\n  if (normalizedTree === null) {\r\n    return null;\r\n  }\r\n  return _collapseNormalizedTree(normalizedTree, target);\r\n};\r\n\r\nconst _simplifySyntaxTree = (\r\n  tree: SyntaxTree\r\n): SyntaxTree => {\r\n  if (tree.nodeType === ASTNodeType.ERROR) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.IDENTIFIER) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n    const { operand, operator } = tree;\r\n    // Skip double negation\r\n    if (operand.nodeType === ASTNodeType.UNARY_OPERATOR) {\r\n      return _simplifySyntaxTree(operand.operand);\r\n    }\r\n    const child = _simplifySyntaxTree(operand);\r\n    if (child.nodeType === ASTNodeType.ERROR) {\r\n      return child;\r\n    }\r\n    return {\r\n      nodeType: ASTNodeType.UNARY_OPERATOR,\r\n      operator,\r\n      operand: child,\r\n    };\r\n  }\r\n\r\n  const left = _simplifySyntaxTree(tree.leftOperand);\r\n  if (left.nodeType === ASTNodeType.ERROR) {\r\n    return left;\r\n  }\r\n\r\n  const right = _simplifySyntaxTree(tree.rightOperand);\r\n  if (right.nodeType === ASTNodeType.ERROR) {\r\n    return right;\r\n  }\r\n\r\n  return {\r\n    nodeType: ASTNodeType.BINARY_OPERATOR,\r\n    operator: tree.operator,\r\n    leftOperand: left,\r\n    rightOperand: right,\r\n  };\r\n};\r\n\r\nexport const simplifySyntaxTree = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  return _simplifySyntaxTree(tree);\r\n};\r\n","import { EditorExecuteButton } from \"$components/EditorExecuteButton\";\r\nimport { EditorExpressionTextField } from \"$components/EditorExpressionTextField\";\r\nimport { EditorLegalOperatorGroup } from \"$components/EditorLegalOperatorGroup\";\r\nimport { EditorOperatorGroup } from \"$components/EditorOperatorGroup\";\r\nimport { Playground } from \"$components/Playground\";\r\nimport { StyledAlert } from \"$components/StyledAlert\";\r\nimport { StyledTabs } from \"$components/StyledTabs\";\r\nimport { lexer } from \"$core/interpreter/lexer\";\r\nimport { parser } from \"$core/interpreter/parser\";\r\nimport { normalizeSyntaxTree } from \"$core/tree/syntax/normalize\";\r\nimport {\r\n  collapseSyntaxTree,\r\n  simplifySyntaxTree,\r\n} from \"$core/tree/syntax/simplify\";\r\nimport { Operator } from \"$types/lexer\";\r\nimport { SyntaxTree } from \"$types/parser\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Stack,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC, useMemo, useState } from \"react\";\r\n\r\nexport const EditorView: FC = () => {\r\n  const [inputValue, setInputValue] = useState(\r\n    \"not (p and q) iff (not p) or (not q)\"\r\n  );\r\n  const [tree, setTree] = useState<SyntaxTree | null>(null);\r\n\r\n  const [legalOp, setLegalOp] = useState(\r\n    new Map([\r\n      [Operator.AND, true],\r\n      [Operator.OR, true],\r\n      [Operator.IMPLIES, true],\r\n      [Operator.IFF, true],\r\n    ])\r\n  );\r\n\r\n  const normalTree = useMemo(() => {\r\n    return simplifySyntaxTree(normalizeSyntaxTree(tree));\r\n  }, [tree]);\r\n\r\n  const eliminatedTree = useMemo(() => {\r\n    const allowed = new Set<Operator>();\r\n    legalOp.forEach((v, k) => {\r\n      if (v) {\r\n        allowed.add(k);\r\n      }\r\n    });\r\n    if (allowed.size === 4) {\r\n      return tree;\r\n    }\r\n    return simplifySyntaxTree(\r\n      collapseSyntaxTree(normalTree, allowed)\r\n    );\r\n  }, [normalTree, tree, legalOp]);\r\n\r\n  const handleExecute = () => {\r\n    const tokens = lexer(inputValue);\r\n    if (tokens.length === 0) {\r\n      setTree(null);\r\n      return;\r\n    }\r\n    setTree(parser(tokens));\r\n  };\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    setInputValue((prev) => `${prev} ${char}`);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && e.ctrlKey) {\r\n      handleExecute();\r\n    }\r\n  };\r\n\r\n  const handleLegalOpChange = (k: Operator, v: boolean) => {\r\n    setLegalOp((prev) => {\r\n      const next = new Map(prev);\r\n      next.set(k, v);\r\n\r\n      const legal = new Set();\r\n      next.forEach((v, k) => {\r\n        if (v) {\r\n          legal.add(k);\r\n        }\r\n      });\r\n      if (legal.size >= 0) {\r\n        return next;\r\n      }\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Stack\r\n        useFlexGap\r\n        spacing={1}\r\n        padding={2}\r\n      >\r\n        <Toolbar\r\n          variant=\"dense\"\r\n          disableGutters\r\n          sx={{\r\n            gap: 1,\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <EditorOperatorGroup\r\n            onInsertChar={handleInsertChar}\r\n          />\r\n          <EditorExecuteButton\r\n            onExecute={handleExecute}\r\n            keyCombinationHint={[\"CTRL\", \"ENTER\"]}\r\n          />\r\n        </Toolbar>\r\n        <EditorExpressionTextField\r\n          value={inputValue}\r\n          onChange={setInputValue}\r\n          onKeyDown={handleKeyDown}\r\n          rows={5}\r\n        />\r\n        <StyledAlert>\r\n          <Typography component=\"p\">\r\n            แตะที่โหนดของต้นไม้เพื่อแก้ไขค่าความจริง\r\n          </Typography>\r\n        </StyledAlert>\r\n        <StyledTabs\r\n          tabLabels={[\r\n            \"รูปรับเข้า\",\r\n            \"รูปนิเสธ-และ\",\r\n            \"รูปอย่างง่าย\",\r\n          ]}\r\n          panels={[\r\n            <Playground\r\n              tree={tree}\r\n              key=\"panel-1\"\r\n            />,\r\n            <Playground\r\n              tree={normalTree}\r\n              key=\"panel-2\"\r\n            />,\r\n            <Stack\r\n              key=\"panel-3\"\r\n              spacing={1}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  padding: 2,\r\n                  borderStyle: \"solid\",\r\n                  borderRadius: (t) => t.shape.borderRadius,\r\n                  borderWidth: 4,\r\n                  borderColor: (t) =>\r\n                    t.palette.primary.light,\r\n                }}\r\n              >\r\n                <EditorLegalOperatorGroup\r\n                  onChange={handleLegalOpChange}\r\n                  values={legalOp}\r\n                />\r\n              </Box>\r\n              <Playground tree={eliminatedTree} />\r\n            </Stack>,\r\n          ]}\r\n        />\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n","import { EditorView } from \"$views/EditorView\";\r\nimport {\r\n  alpha,\r\n  createTheme,\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  responsiveFontSizes,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { brown, green } from \"@mui/material/colors\";\r\nimport { FC } from \"react\";\r\n\r\nlet theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: brown[\"600\"],\r\n    },\r\n    secondary: {\r\n      light: \"#abcbad\",\r\n      main: green[\"800\"],\r\n    },\r\n  },\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: alpha(t.palette.primary.dark, 0.87),\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: alpha(\r\n            t.palette.primary.dark,\r\n            0.87\r\n          ),\r\n        }),\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n    }}\r\n  />\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <EditorView />\r\n      {/* <BlogView /> */}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\nimport \"katex/dist/katex.min.css\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["EditorExecuteButton","props","onExecute","keyCombinationHint","keyCombination","key","index","plusElem","jsx","Typography","Fragment","Tooltip","Stack","Button","PlayArrowRounded","EditorExpressionTextField","rows","value","onChange","onKeyDown","TextField","e","TokenType","TokenType2","Operator","LIST","SYMBOL_LABEL","EditorLegalOperatorGroup","values","jsxs","FormGroup","FormLabel","FormControlLabel","Checkbox","op","_","v","StyledLatex","tex","options","ref","useRef","useEffect","katex","OPERATOR","EditorOperatorGroup","onInsertChar","ButtonGroup","btn","btnIndex","ASTNodeType","ASTNodeType2","_syntaxTreeToLatex","tree","nodeType","left","right","labelLeft","labelRight","label","syntaxTreeToLatex","_syntaxTreeToSymbolTable","table","syntaxTreeToSymbolTable","_exprTreeToSymbolTable","children","child","exprTreeToSymbolTable","_syntaxTreetoExprTree","symTable","syntaxTreetoExprTree","ast","idenTable","DisplayInputFeedback","emptyMessage","texContent","Box","t","alpha","_augmentExprTree","name","augmentedChildren","augmentExprTree","exptTree","EditorBooleanSwitcher","onSymChange","switchers","k","FormControl","RadioGroup","Radio","Divider","TreeGraphClusterNode","node","onClick","theme","useTheme","handleClick","Group","TreeGraphCluster","exprTree","height","width","onNodeClick","data","hierarchy","nodeSizeY","nodeSizeX","Zoom","zoom","Tree","treeHeir","link","i","LinkVertical","Fab","ControlCameraRounded","TreeGraph","emptyText","dialogOpen","setDialogOpen","useState","setSymTable","visibleSymbols","setVisibleSymbols","container","toggleDialogVisible","prev","handleNodeClick","selectedBranch","next","handleSymChange","Dialog","DialogTitle","DialogContent","DialogActions","Playground","StyledAlert","dismissed","setDismissed","Collapse","Alert","QuestionMarkRounded","IconButton","CloseRounded","StyledTabs","panels","tabLabels","active","setActive","TabContext","TabList","Tab","panel","TabPanel","OPERATOR_TABLE","IS_WHITESPACE_MANY","IS_IDENTIFIER","TOKEN_LEFT_PARENTHESIS","TOKEN_RIGHT_PARENTHESIS","collapseWhitespace","source","collectIdentifier","match","lex","tokens","sourceLength","pos","char","opSign","iden","opName","lexer","sourceCollapsed","OPERATOR_PRECEDENCE","polishToAST","tok","operand","infixToPolish","outStack","opStack","token","precedence","lastOp","parser","polish","normalizeDisjunction","normalizeImplication","normalizeEquivalence","branchLeft","branchRight","_normalizeTree","normalizeSyntaxTree","_compareSyntaxTree","a","b","compareSyntaxTree","collapseToDisjunction","normalizedTree","c","lc","rc","collapseToImplication","collapseToEquivalence","root","l","cl","cr","lcl","lcr","rcl","rcr","_collapseNormalizedTree","target","collapsed","collapseSyntaxTree","_simplifySyntaxTree","operator","simplifySyntaxTree","EditorView","inputValue","setInputValue","setTree","legalOp","setLegalOp","normalTree","useMemo","eliminatedTree","allowed","handleExecute","handleInsertChar","handleKeyDown","handleLegalOpChange","legal","Container","Toolbar","createTheme","brown","green","responsiveFontSizes","globalStyles","GlobalStyles","App","ThemeProvider","CssBaseline","createRoot","StrictMode"],"mappings":"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"}