{"version":3,"file":"index-DXNPkt_-.js","sources":["../../src/components/StyledLatex.tsx","../../src/components/EditorRibbonInsert.tsx","../../src/components/StyledTooltipButton.tsx","../../src/components/EditorRibbon.tsx","../../src/types/lexer.ts","../../src/components/EditorSimplConfigGroup.tsx","../../src/components/EditorTextField.tsx","../../src/components/Editor.tsx","../../src/components/LatexDisplay.tsx","../../src/types/parser.ts","../../src/core/tree/conversion.ts","../../src/core/tree/expr/augment.ts","../../src/core/tree/expr/evaluate.ts","../../src/core/tree/expr/latex.ts","../../src/components/PlaygroundBooleanSwitcherGroup.tsx","../../src/components/StyledIconButton.tsx","../../src/components/PlaygroundPlaybackControl.tsx","../../src/components/StyledFAB.tsx","../../src/components/TreeGraphLink.tsx","../../src/components/TreeGraphNode.tsx","../../src/components/TreeGraph.tsx","../../src/components/Playground.tsx","../../src/components/StyledTabs.tsx","../../src/core/interpreter/lexer.ts","../../src/core/interpreter/parser.ts","../../src/views/EditorView.tsx","../../src/assets/blogs/BooleanAlgebraSummary/en.txt","../../src/assets/blogs/UserManual/en.txt","../../src/components/StyledMarkdown.tsx","../../src/hooks/useFetchMarkdown.ts","../../src/views/TheoremBlogView.tsx","../../src/App/theme.ts","../../src/App/App.tsx","../../src/locales/en/translation.ts","../../src/locales/th/translation.ts","../../src/locales/config.ts","../../src/main.tsx"],"sourcesContent":["import { Typography } from \"@mui/material\";\r\nimport katex, { KatexOptions } from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype StyledLatexProps = {\r\n  tex: string;\r\n  options?: KatexOptions;\r\n};\r\nexport const StyledLatex: FC<StyledLatexProps> = (\r\n  props\r\n) => {\r\n  const { tex, options } = props;\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      katex.render(tex, ref.current, options);\r\n    }\r\n  }, [ref, tex, options]);\r\n\r\n  return (\r\n    <Typography\r\n      ref={ref}\r\n      component=\"span\"\r\n      overflow=\"auto\"\r\n    />\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\nconst OPERATOR = [\r\n  {\r\n    name: \"negation\",\r\n    label: \"\\\\lnot\",\r\n    insertChar: \"\\u{00AC}\",\r\n  },\r\n  {\r\n    name: \"conjunction\",\r\n    label: \"\\\\land\",\r\n    insertChar: \"\\u{2227}\",\r\n  },\r\n  {\r\n    name: \"disjunction\",\r\n    label: \"\\\\lor\",\r\n    insertChar: \"\\u{2228}\",\r\n  },\r\n  {\r\n    name: \"implication\",\r\n    label: \"\\\\implies\",\r\n    insertChar: \"\\u{21D2}\",\r\n  },\r\n  {\r\n    name: \"equivalence\",\r\n    label: \"\\\\iff\",\r\n    insertChar: \"\\u{21D4}\",\r\n  },\r\n];\r\n\r\ntype EditorRibbonInsertProps = {\r\n  onInsertChar: (char: string) => void;\r\n};\r\nexport const EditorRibbonInsert: FC<\r\n  EditorRibbonInsertProps\r\n> = (props) => {\r\n  const { onInsertChar } = props;\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common.connectives\",\r\n  });\r\n\r\n  return (\r\n    <ButtonGroup\r\n      disableElevation\r\n      variant=\"outlined\"\r\n    >\r\n      {OPERATOR.map((btn, btnIndex) => (\r\n        <Tooltip\r\n          key={`btn` + btnIndex}\r\n          arrow\r\n          title={<Typography>{t(btn.name)}</Typography>}\r\n        >\r\n          <Button\r\n            onClick={() => onInsertChar(btn.insertChar)}\r\n          >\r\n            <StyledLatex tex={btn.label} />\r\n          </Button>\r\n        </Tooltip>\r\n      ))}\r\n    </ButtonGroup>\r\n  );\r\n};\r\n","import { PlayArrowRounded } from \"@mui/icons-material\";\r\nimport { Button, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactNode } from \"react\";\r\n\r\ntype StyledTooltipButtonProps = {\r\n  onExecute: () => void;\r\n  shortcutHint: string;\r\n  children: ReactNode;\r\n};\r\nexport const StyledTooltipButton: FC<\r\n  StyledTooltipButtonProps\r\n> = (props) => {\r\n  const { children, onExecute, shortcutHint } = props;\r\n\r\n  return (\r\n    <Tooltip\r\n      arrow\r\n      title={<Typography>{shortcutHint}</Typography>}\r\n    >\r\n      <Button\r\n        disableElevation\r\n        variant=\"contained\"\r\n        startIcon={<PlayArrowRounded />}\r\n        onClick={onExecute}\r\n      >\r\n        {children}\r\n      </Button>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import { Stack, Toolbar, Typography } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { EditorRibbonInsert } from \"./EditorRibbonInsert\";\r\nimport { StyledTooltipButton } from \"./StyledTooltipButton\";\r\n\r\ntype EditorRibbonProps = {\r\n  onExecute: () => void;\r\n  onInsertChar: (value: string) => void;\r\n};\r\nexport const EditorRibbon: FC<EditorRibbonProps> = (\r\n  props\r\n) => {\r\n  const { onExecute, onInsertChar } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Toolbar\r\n      variant=\"dense\"\r\n      disableGutters\r\n      sx={{\r\n        gap: 1,\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Stack\r\n        sx={{ width: \"100%\" }}\r\n        gap={1}\r\n        useFlexGap\r\n        flexWrap=\"wrap\"\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n      >\r\n        <EditorRibbonInsert onInsertChar={onInsertChar} />\r\n        <StyledTooltipButton\r\n          onExecute={onExecute}\r\n          shortcutHint={\"CTRL + ENTER\"}\r\n        >\r\n          {t(\"editor.run\")}\r\n        </StyledTooltipButton>\r\n      </Stack>\r\n      <Typography\r\n        color=\"primary\"\r\n        component=\"a\"\r\n        href=\"#user-manual\"\r\n        sx={{\r\n          textDecorationLine: \"underline\",\r\n        }}\r\n      >\r\n        {t(\"editor.howToUse\")}\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\n","export enum TokenType {\r\n  IDENTIFIER,\r\n  OPERATOR,\r\n  LEFT_PARENTHESIS,\r\n  RIGHT_PARENTHESIS,\r\n  ERROR,\r\n}\r\n\r\nexport enum Operator {\r\n  AND = \"AND\",\r\n  OR = \"OR\",\r\n  IMPLIES = \"IMPLIES\",\r\n  IFF = \"IFF\",\r\n  NOT = \"NOT\",\r\n}\r\n\r\nexport type TokenError = {\r\n  tokenType: TokenType.ERROR;\r\n  pos: number;\r\n  source: string;\r\n};\r\n\r\nexport type TokenIdentifier = {\r\n  tokenType: TokenType.IDENTIFIER;\r\n  symbol: string;\r\n  pos: number;\r\n  length: number;\r\n};\r\n\r\nexport type TokenOperator = {\r\n  tokenType: TokenType.OPERATOR;\r\n  name: Operator;\r\n  pos: number;\r\n};\r\n\r\nexport type TokenLeftParen = {\r\n  tokenType: TokenType.LEFT_PARENTHESIS;\r\n  pos: number;\r\n};\r\n\r\nexport type TokenRightParen = {\r\n  tokenType: TokenType.RIGHT_PARENTHESIS;\r\n  pos: number;\r\n};\r\n\r\nexport type Token =\r\n  | TokenError\r\n  | TokenIdentifier\r\n  | TokenOperator\r\n  | TokenLeftParen\r\n  | TokenRightParen;\r\n","import { Operator } from \"$types/lexer\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SYMBOL_LABEL = new Map([\r\n  [Operator.AND, \"conjunction\"],\r\n  [Operator.OR, \"disjunction\"],\r\n  [Operator.IMPLIES, \"implication\"],\r\n  [Operator.IFF, \"equivalence\"],\r\n]);\r\n\r\ntype EditorSimplConfigGroupProps = {\r\n  values: Map<Operator, boolean>;\r\n  onChange: (k: Operator, v: boolean) => void;\r\n};\r\nexport const EditorSimplConfigGroup: FC<\r\n  EditorSimplConfigGroupProps\r\n> = (props) => {\r\n  const { onChange, values } = props;\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      flexWrap=\"wrap\"\r\n      alignItems=\"center\"\r\n    >\r\n      <FormLabel>\r\n        <Typography color=\"textPrimary\">\r\n          {t(\"editor.allowedOperatorLabel\")}:\r\n        </Typography>\r\n      </FormLabel>\r\n      <FormControlLabel\r\n        disabled\r\n        checked\r\n        control={<Checkbox />}\r\n        label={t(\"common.connectives.negation\")}\r\n      />\r\n      {[...SYMBOL_LABEL.entries()].map(([k, l], index) => {\r\n        const checked = values.get(k) ?? false;\r\n        const label = t(`common.connectives.${l}`);\r\n\r\n        return (\r\n          <FormControlLabel\r\n            key={\"include-op\" + index}\r\n            label={label}\r\n            control={<Checkbox />}\r\n            checked={checked}\r\n            onChange={(_, v) => onChange(k, v)}\r\n          />\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n","import { TextField } from \"@mui/material\";\r\nimport { FC } from \"react\";\r\n\r\ntype EditorTextFieldProps = {\r\n  value: string;\r\n  rows: number;\r\n  onChange: (value: string) => void;\r\n  onKeyDown: (e: React.KeyboardEvent) => void;\r\n};\r\nexport const EditorTextField: FC<EditorTextFieldProps> = (\r\n  props\r\n) => {\r\n  const { rows, value, onChange, onKeyDown } = props;\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      multiline\r\n      rows={rows}\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      onKeyDown={onKeyDown}\r\n      slotProps={{\r\n        input: {\r\n          autoComplete: \"off\",\r\n          autoCorrect: \"off\",\r\n          autoCapitalize: \"none\",\r\n          spellCheck: false,\r\n          sx: {\r\n            fontFamily: \"monospace\",\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { Operator } from \"$types/lexer\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { EditorRibbon } from \"./EditorRibbon\";\r\nimport { EditorSimplConfigGroup } from \"./EditorSimplConfigGroup\";\r\nimport { EditorTextField } from \"./EditorTextField\";\r\n\r\ntype EditorProps = {\r\n  onExecute: (value: string) => void;\r\n};\r\nexport const Editor: FC<EditorProps> = (props) => {\r\n  const { onExecute } = props;\r\n\r\n  const [operators, setOperators] = useState(\r\n    new Map<Operator, boolean>()\r\n  );\r\n  const [value, setValue] = useState(\r\n    \"not (p and q) iff (not p) or (not q)\"\r\n  );\r\n\r\n  const handleExecute = () => {\r\n    onExecute(value);\r\n  };\r\n\r\n  const handleOperatorChange = (\r\n    k: Operator,\r\n    v: boolean\r\n  ) => {\r\n    setOperators((p) => {\r\n      const next = new Map(p);\r\n      next.set(k, v);\r\n      return next;\r\n    });\r\n  };\r\n\r\n  const handleInsertChar = (char: string) => {\r\n    setValue((prev) => `${prev} ${char}`);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && e.ctrlKey) {\r\n      handleExecute();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={1}>\r\n      <EditorRibbon\r\n        onExecute={handleExecute}\r\n        onInsertChar={handleInsertChar}\r\n      />\r\n      <EditorTextField\r\n        value={value}\r\n        onChange={setValue}\r\n        onKeyDown={handleKeyDown}\r\n        rows={5}\r\n      />\r\n      <EditorSimplConfigGroup\r\n        values={operators}\r\n        onChange={handleOperatorChange}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  alpha,\r\n  Box,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype LatexDisplayProps = {\r\n  tex: string | null;\r\n  emptyText: string;\r\n};\r\nexport const LatexDisplay: FC<LatexDisplayProps> = (\r\n  props\r\n) => {\r\n  const { tex, emptyText } = props;\r\n  const { palette, shape } = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      paddingX={2}\r\n      paddingY={0.5}\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      minHeight={100} // Otherwise the size of the box will be smaller in its empty state\r\n      sx={{\r\n        borderRadius: shape.borderRadius,\r\n        backgroundColor: alpha(\r\n          palette.secondary.light,\r\n          0.4\r\n        ),\r\n      }}\r\n    >\r\n      {tex === null ? (\r\n        <Typography>{emptyText}</Typography>\r\n      ) : (\r\n        <StyledLatex tex={tex} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import { Operator } from \"./lexer\";\r\n\r\nexport enum ErrorType {\r\n  LEXICAL_ERROR,\r\n  PARSER_ERROR,\r\n}\r\n\r\nexport enum SyntaxTreeNodeType {\r\n  BINARY_OPERATOR,\r\n  UNARY_OPERATOR,\r\n  ERROR,\r\n  IDENTIFIER,\r\n  CONSTANT,\r\n}\r\n\r\nexport type BinaryOperatorNode = {\r\n  nodeType: SyntaxTreeNodeType.BINARY_OPERATOR;\r\n  operator:\r\n    | Operator.AND\r\n    | Operator.OR\r\n    | Operator.IMPLIES\r\n    | Operator.IFF;\r\n  leftOperand: SyntaxTree;\r\n  rightOperand: SyntaxTree;\r\n};\r\n\r\nexport type UnaryOperatorNode = {\r\n  nodeType: SyntaxTreeNodeType.UNARY_OPERATOR;\r\n  operator: Operator.NOT;\r\n  operand: SyntaxTree;\r\n};\r\n\r\nexport type LexicalErrorNode = {\r\n  nodeType: SyntaxTreeNodeType.ERROR;\r\n  source: string;\r\n  pos: number;\r\n  errorType: ErrorType.LEXICAL_ERROR;\r\n};\r\n\r\nexport type ParserErrorNode = {\r\n  nodeType: SyntaxTreeNodeType.ERROR;\r\n  reason: string;\r\n  errorType: ErrorType.PARSER_ERROR;\r\n};\r\n\r\nexport type IdentifierNode = {\r\n  nodeType: SyntaxTreeNodeType.IDENTIFIER;\r\n  value: string;\r\n};\r\n\r\nexport type ErrorNode = LexicalErrorNode | ParserErrorNode;\r\n\r\nexport type SyntaxTree =\r\n  | BinaryOperatorNode\r\n  | UnaryOperatorNode\r\n  | ErrorNode\r\n  | IdentifierNode;\r\n\r\nexport type SymbolTable = Map<string, boolean>;\r\n\r\nexport type NormalizedAST =\r\n  | IdentifierNode\r\n  | ErrorNode\r\n  | {\r\n      nodeType: SyntaxTreeNodeType.UNARY_OPERATOR;\r\n      operator: Operator.NOT;\r\n      operand: NormalizedAST;\r\n    }\r\n  | {\r\n      nodeType: SyntaxTreeNodeType.BINARY_OPERATOR;\r\n      operator: Operator.AND;\r\n      leftOperand: NormalizedAST;\r\n      rightOperand: NormalizedAST;\r\n    };\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { Operator } from \"$types/lexer\";\r\nimport {\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/parser\";\r\n\r\nconst _syntaxTreeToLatex = (\r\n  tree: SyntaxTree\r\n): string | null => {\r\n  const { nodeType } = tree;\r\n\r\n  if (nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n  if (nodeType === SyntaxTreeNodeType.IDENTIFIER) {\r\n    return tree.value;\r\n  }\r\n\r\n  if (nodeType === SyntaxTreeNodeType.UNARY_OPERATOR) {\r\n    if (\r\n      tree.operand.nodeType === SyntaxTreeNodeType.ERROR\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const value = _syntaxTreeToLatex(tree.operand);\r\n    if (\r\n      tree.operand.nodeType ===\r\n      SyntaxTreeNodeType.IDENTIFIER\r\n    ) {\r\n      return `\\\\lnot ${value}`;\r\n    }\r\n    return `\\\\lnot (${value})`;\r\n  }\r\n\r\n  const left = tree.leftOperand;\r\n  if (left.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n  const right = tree.rightOperand;\r\n  if (right.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n\r\n  let labelLeft = _syntaxTreeToLatex(left);\r\n  if (\r\n    left.nodeType === SyntaxTreeNodeType.BINARY_OPERATOR\r\n  ) {\r\n    labelLeft = `(${labelLeft})`;\r\n  }\r\n  let labelRight = _syntaxTreeToLatex(right);\r\n  if (\r\n    right.nodeType === SyntaxTreeNodeType.BINARY_OPERATOR\r\n  ) {\r\n    labelRight = `(${labelRight})`;\r\n  }\r\n\r\n  let label = \"\";\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      break;\r\n    case Operator.IMPLIES:\r\n      label = \"\\\\implies\";\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      break;\r\n  }\r\n  return `${labelLeft} ${label} ${labelRight}`;\r\n};\r\n\r\nexport const syntaxTreeToLatex = (\r\n  tree: SyntaxTree | null\r\n) => {\r\n  if (tree === null) {\r\n    return null;\r\n  }\r\n  return _syntaxTreeToLatex(tree);\r\n};\r\n\r\nconst _syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  symbolTable: Map<string, boolean>,\r\n  orderStart: number\r\n): ExprTree | null => {\r\n  if (tree.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return null;\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeType.IDENTIFIER) {\r\n    return {\r\n      label: tree.value,\r\n      value: symbolTable.get(tree.value) ?? false,\r\n      children: [],\r\n      order: orderStart + 1,\r\n    };\r\n  }\r\n\r\n  if (tree.nodeType === SyntaxTreeNodeType.UNARY_OPERATOR) {\r\n    const child = _syntaxTreetoExprTree(\r\n      tree.operand,\r\n      symbolTable,\r\n      orderStart\r\n    );\r\n    if (child === null) {\r\n      return null;\r\n    }\r\n    return {\r\n      label: \"\\\\lnot\",\r\n      children: [child],\r\n      value: !child.value,\r\n      order: child.order + 1,\r\n    };\r\n  }\r\n\r\n  const left = _syntaxTreetoExprTree(\r\n    tree.leftOperand,\r\n    symbolTable,\r\n    orderStart\r\n  );\r\n  if (left === null) {\r\n    return null;\r\n  }\r\n  const right = _syntaxTreetoExprTree(\r\n    tree.rightOperand,\r\n    symbolTable,\r\n    left.order\r\n  );\r\n  if (right === null) {\r\n    return null;\r\n  }\r\n\r\n  let label;\r\n  let value;\r\n  switch (tree.operator) {\r\n    case Operator.AND:\r\n      label = \"\\\\land\";\r\n      value = left.value && right.value;\r\n      break;\r\n    case Operator.OR:\r\n      label = \"\\\\lor\";\r\n      value = left.value || right.value;\r\n      break;\r\n    case Operator.IMPLIES:\r\n      label = \"\\\\implies\";\r\n      value = !left.value || right.value;\r\n      break;\r\n    case Operator.IFF:\r\n      label = \"\\\\iff\";\r\n      value = left.value === right.value;\r\n      break;\r\n  }\r\n\r\n  return {\r\n    label: label,\r\n    children: [left, right],\r\n    value,\r\n    order: right.order + 1,\r\n  };\r\n};\r\n\r\nexport const syntaxTreetoExprTree = (\r\n  tree: SyntaxTree,\r\n  symbolTable: Map<string, boolean>\r\n) => {\r\n  return _syntaxTreetoExprTree(tree, symbolTable, 1);\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _augmentExprTree = (tree: ExprTree) => {\r\n  if (tree.isError) {\r\n    return tree;\r\n  }\r\n\r\n  if (tree.children.length === 0) {\r\n    const augmented: ExprTree = {\r\n      label: tree.value ? \"\\\\text{T}\" : \"\\\\text{F}\",\r\n      value: tree.value,\r\n      children: [tree],\r\n      order: tree.order,\r\n    };\r\n    return augmented;\r\n  }\r\n\r\n  const augmented: ExprTree = {\r\n    label: tree.label,\r\n    value: tree.value,\r\n    children: tree.children.map((child) =>\r\n      _augmentExprTree(child)\r\n    ),\r\n    order: tree.order,\r\n  };\r\n  return augmented;\r\n};\r\n\r\nexport const augmentExprTree = (\r\n  tree: ExprTree\r\n): ExprTree => {\r\n  if (tree.isError) {\r\n    return tree;\r\n  }\r\n\r\n  const augmented: ExprTree = {\r\n    children: tree.children.map((child) =>\r\n      _augmentExprTree(child)\r\n    ),\r\n    order: tree.order,\r\n    value: tree.value,\r\n    label: tree.label,\r\n  };\r\n\r\n  return {\r\n    order: tree.order,\r\n    label: tree.value ? \"\\\\S\\\\text{T}\" : \"\\\\S\\\\texttt{F}\",\r\n    value: tree.value,\r\n    children: [augmented],\r\n  };\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _collectSymbols = (\r\n  exprTree: ExprTree,\r\n  symbols: Set<string>\r\n): void => {\r\n  if (exprTree.isError) {\r\n    return symbols.clear();\r\n  }\r\n  if (exprTree.children.length === 0) {\r\n    symbols.add(exprTree.label);\r\n    return;\r\n  }\r\n  for (const child of exprTree.children) {\r\n    _collectSymbols(child, symbols);\r\n  }\r\n};\r\n\r\nexport const collectSymbols = (\r\n  exprTree: ExprTree | null\r\n): Set<string> => {\r\n  const symbols = new Set<string>();\r\n  if (exprTree === null) {\r\n    return symbols;\r\n  }\r\n  _collectSymbols(exprTree, symbols);\r\n  return symbols;\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\n\r\nconst _exprTreeToLatex = (exprTree: ExprTree): string => {\r\n  if (exprTree.isError) {\r\n    return exprTree.label;\r\n  }\r\n  if (exprTree.children.length === 0) {\r\n    return exprTree.label;\r\n  }\r\n\r\n  if (exprTree.children.length === 1) {\r\n    if (exprTree.label !== \"\\\\lnot\") {\r\n      return _exprTreeToLatex(exprTree.children[0]);\r\n    }\r\n    const child = exprTree.children[0];\r\n    let childLatex = _exprTreeToLatex(child);\r\n    if (child.children.length > 1) {\r\n      childLatex = `(${childLatex})`;\r\n    }\r\n    return `${exprTree.label} ${childLatex}`;\r\n  }\r\n  const left = exprTree.children[0];\r\n  const right = exprTree.children[1];\r\n  let leftLatex = _exprTreeToLatex(left);\r\n  if (left.children.length > 1) {\r\n    leftLatex = `(${leftLatex})`;\r\n  }\r\n  let rightLatex = _exprTreeToLatex(right);\r\n  if (right.children.length > 1) {\r\n    rightLatex = `(${rightLatex})`;\r\n  }\r\n  return `${leftLatex} ${exprTree.label} ${rightLatex}`;\r\n};\r\nexport const exprTreeToLatex = (\r\n  exprTree: ExprTree | null\r\n) => {\r\n  if (exprTree === null) {\r\n    return \"\";\r\n  }\r\n  return _exprTreeToLatex(exprTree);\r\n};\r\n","import {\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\n\r\ntype EditorBooleanSwitcherProps = {\r\n  table: Map<string, boolean>;\r\n  selected: Set<string>;\r\n  onChange: (k: string, v: boolean) => void;\r\n};\r\nexport const EditorBooleanSwitcher: FC<\r\n  EditorBooleanSwitcherProps\r\n> = (props) => {\r\n  const { table, selected, onChange } = props;\r\n\r\n  const { t } = useTranslation(\"translation\", {\r\n    keyPrefix: \"common\",\r\n  });\r\n\r\n  return (\r\n    <Stack\r\n      useFlexGap\r\n      spacing={1}\r\n      width=\"100%\"\r\n      divider={\r\n        <Divider\r\n          flexItem\r\n          variant=\"middle\"\r\n        />\r\n      }\r\n    >\r\n      {[...selected].map((k) => (\r\n        <FormControl\r\n          key={\"synbol-\" + k}\r\n          fullWidth\r\n        >\r\n          <FormLabel\r\n            sx={{\r\n              width: \"100%\",\r\n              overflow: \"auto\",\r\n            }}\r\n          >\r\n            <StyledLatex tex={k} />\r\n          </FormLabel>\r\n          <RadioGroup\r\n            row\r\n            value={table.get(k) ? \"T\" : \"F\"}\r\n            onChange={(e) =>\r\n              onChange(k, e.target.value === \"T\")\r\n            }\r\n          >\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"T\"\r\n              label={t(\"true\")}\r\n            />\r\n            <FormControlLabel\r\n              control={<Radio disableRipple />}\r\n              value=\"F\"\r\n              label={t(\"false\")}\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n","import { IconButton, Tooltip } from \"@mui/material\";\r\nimport { FC, KeyboardEvent, ReactNode } from \"react\";\r\n\r\ntype StyledIconButtonProps = {\r\n  title: ReactNode;\r\n  children: ReactNode;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n  onKeyPress: (e: KeyboardEvent<HTMLButtonElement>) => void;\r\n};\r\nexport const StyledIconButton: FC<StyledIconButtonProps> = (\r\n  props\r\n) => {\r\n  const { children, onKeyPress, onClick, title, disabled } =\r\n    props;\r\n  return (\r\n    <Tooltip\r\n      arrow\r\n      title={title}\r\n    >\r\n      <span>\r\n        <IconButton\r\n          color=\"primary\"\r\n          onClick={onClick}\r\n          disabled={disabled}\r\n          onKeyDown={onKeyPress}\r\n        >\r\n          {children}\r\n        </IconButton>\r\n      </span>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import {\r\n  KeyboardArrowLeftRounded,\r\n  KeyboardArrowRightRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Slider, Stack, Typography } from \"@mui/material\";\r\nimport { FC, KeyboardEvent } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledIconButton } from \"./StyledIconButton\";\r\n\r\ntype PlaygroundPlaybackControlProps = {\r\n  maxValue: number;\r\n  minValue: number;\r\n  disabled: boolean;\r\n  value: number;\r\n  onChange: (v: number) => void;\r\n};\r\nexport const PlaygroundPlaybackControl: FC<\r\n  PlaygroundPlaybackControlProps\r\n> = (props) => {\r\n  const { disabled, maxValue, minValue, onChange, value } =\r\n    props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const handleForwardOrder = () => {\r\n    if (value >= maxValue) {\r\n      return;\r\n    }\r\n    onChange(value + 1);\r\n  };\r\n\r\n  const handleRewindOrder = () => {\r\n    if (value <= minValue) {\r\n      return;\r\n    }\r\n    onChange(value - 1);\r\n  };\r\n\r\n  const handleKeyPress = (\r\n    e: KeyboardEvent<HTMLButtonElement>\r\n  ) => {\r\n    const { key } = e;\r\n    if (key === \"ArrowUp\" || key === \"ArrowRight\") {\r\n      e.preventDefault();\r\n      handleForwardOrder();\r\n    } else if (key === \"ArrowLeft\" || key === \"ArrowDown\") {\r\n      e.preventDefault();\r\n      handleRewindOrder();\r\n    }\r\n  };\r\n\r\n  const maxLabel = disabled ? \"0\" : maxValue.toString();\r\n  const valueLabel = disabled\r\n    ? \"0\"\r\n    : value.toString().padStart(maxLabel.length, \"0\");\r\n  const label = `${valueLabel}/${maxLabel}`;\r\n\r\n  return (\r\n    <Stack\r\n      spacing={1.5}\r\n      useFlexGap\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      paddingX={2}\r\n      paddingY={1}\r\n    >\r\n      <StyledIconButton\r\n        disabled={disabled}\r\n        title={t(\"playground.rewind\")}\r\n        onClick={handleRewindOrder}\r\n        onKeyPress={handleKeyPress}\r\n      >\r\n        <KeyboardArrowLeftRounded />\r\n      </StyledIconButton>\r\n      <Typography fontFamily=\"monospace\">\r\n        {label}\r\n      </Typography>\r\n      <StyledIconButton\r\n        disabled={disabled}\r\n        title={t(\"playground.forward\")}\r\n        onKeyPress={handleKeyPress}\r\n        onClick={handleForwardOrder}\r\n      >\r\n        <KeyboardArrowRightRounded />\r\n      </StyledIconButton>\r\n\r\n      <Slider\r\n        disabled={disabled}\r\n        valueLabelDisplay=\"auto\"\r\n        onChange={(_, v) => onChange(v as number)}\r\n        value={value}\r\n        max={maxValue}\r\n        min={minValue}\r\n        step={1}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n","import { Fab, Tooltip, Typography } from \"@mui/material\";\r\nimport { FC, ReactElement } from \"react\";\r\n\r\ntype StyledFABProps = {\r\n  title: string;\r\n  onClick: () => void;\r\n  children: ReactElement;\r\n};\r\nexport const StyledFAB: FC<StyledFABProps> = (props) => {\r\n  const { children, onClick, title } = props;\r\n  return (\r\n    <Fab\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: 16,\r\n        bottom: 16,\r\n      }}\r\n    >\r\n      <Tooltip\r\n        placement=\"right\"\r\n        title={<Typography>{title}</Typography>}\r\n      >\r\n        {children}\r\n      </Tooltip>\r\n    </Fab>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport {\r\n  HierarchyPointLink,\r\n  HierarchyPointNode,\r\n} from \"@visx/hierarchy/lib/types\";\r\nimport { LinkVertical } from \"@visx/shape\";\r\nimport { FC } from \"react\";\r\n\r\ntype TreeGraphLinkProps = {\r\n  link: HierarchyPointLink<ExprTree>;\r\n  order: number;\r\n};\r\nexport const TreeGraphLink: FC<TreeGraphLinkProps> = (\r\n  props\r\n) => {\r\n  const { link, order } = props;\r\n  const { palette } = useTheme();\r\n  const { source, target } = link;\r\n  const isSourceVisible = source.data.order <= order;\r\n\r\n  const isTargetVisibleNow = target.data.order <= order;\r\n  const isTargetVisibleSoon =\r\n    target.data.order <= order + 1;\r\n  const isTargetVisible =\r\n    isTargetVisibleNow || isTargetVisibleSoon;\r\n\r\n  const isLinkVisible = isSourceVisible && isTargetVisible;\r\n\r\n  return (\r\n    <LinkVertical<\r\n      HierarchyPointLink<ExprTree>,\r\n      HierarchyPointNode<ExprTree>\r\n    >\r\n      data={link}\r\n      stroke={palette.primary.light}\r\n      visibility={isLinkVisible ? \"visible\" : \"hidden\"}\r\n      strokeOpacity={isTargetVisible ? \"0.6\" : \"0.3\"}\r\n      strokeWidth=\"5\"\r\n      fill=\"none\"\r\n    />\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { HierarchyPointNode } from \"@visx/hierarchy/lib/types\";\r\nimport katex from \"katex\";\r\nimport { FC, useEffect, useRef } from \"react\";\r\n\r\ntype TreeGraphNodeProps = {\r\n  node: HierarchyPointNode<ExprTree>;\r\n  onClick: (node: ExprTree) => void;\r\n  order: number;\r\n};\r\nexport const TreeGraphNode: FC<TreeGraphNodeProps> = (\r\n  props\r\n) => {\r\n  const { order, node, onClick } = props;\r\n  const { x, y, data } = node;\r\n  const { palette, typography } = useTheme();\r\n  const ref = useRef<SVGTextElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (ref.current !== null) {\r\n      ref.current.innerHTML = katex\r\n        .renderToString(data.label)\r\n        .replaceAll(\"span\", \"tspan\");\r\n    }\r\n  }, [ref, data.label]);\r\n\r\n  const isNodeHighlighted = data.order === order;\r\n\r\n  const isNodeVisibleNow = data.order <= order;\r\n  const isNodeVisibleSoon = data.order <= order + 1;\r\n  const isNodeVisible =\r\n    isNodeVisibleNow || isNodeVisibleSoon;\r\n\r\n  return (\r\n    <Group\r\n      top={y}\r\n      left={x}\r\n      onClick={() => onClick(data)}\r\n      visibility={isNodeVisible ? \"visible\" : \"hidden\"}\r\n    >\r\n      <circle\r\n        strokeWidth={isNodeHighlighted ? 5 : 0}\r\n        opacity={isNodeVisibleNow ? 1 : 0.5}\r\n        r={30}\r\n        fill={palette.secondary.light}\r\n        stroke={palette.primary.light}\r\n        strokeOpacity={0.8}\r\n      />\r\n      <text\r\n        ref={ref}\r\n        fontSize={typography.body1.fontSize}\r\n        dy=\"0.33rem\"\r\n        textAnchor=\"middle\"\r\n        pointerEvents=\"none\"\r\n        color={palette.secondary.contrastText}\r\n        style={{ userSelect: \"none\" }}\r\n      />\r\n    </Group>\r\n  );\r\n};\r\n","import { ExprTree } from \"$types/ast\";\r\nimport { ControlCameraRounded } from \"@mui/icons-material\";\r\nimport { Group } from \"@visx/group\";\r\nimport { hierarchy, Tree } from \"@visx/hierarchy\";\r\nimport { Zoom } from \"@visx/zoom\";\r\nimport { t } from \"i18next\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { StyledFAB } from \"./StyledFAB\";\r\nimport { TreeGraphLink } from \"./TreeGraphLink\";\r\nimport { TreeGraphNode } from \"./TreeGraphNode\";\r\n\r\ntype TreeGraphProps = {\r\n  tree: ExprTree;\r\n  order: number;\r\n  onNodeClick: (node: ExprTree) => void;\r\n};\r\nexport const TreeGraph: FC<TreeGraphProps> = (props) => {\r\n  const { tree, order, onNodeClick } = props;\r\n\r\n  const data = hierarchy(tree);\r\n  const height = (data.height + 1) * 75;\r\n  const width = (data.leaves().length + 1) * 100;\r\n\r\n  return (\r\n    <Zoom<SVGSVGElement>\r\n      width={width}\r\n      height={height}\r\n      scaleXMin={1 / 3}\r\n      scaleXMax={4}\r\n      scaleYMin={1 / 3}\r\n      scaleYMax={4}\r\n    >\r\n      {(zoom) => (\r\n        <Fragment>\r\n          <svg\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            ref={zoom.containerRef}\r\n            style={{ touchAction: \"none\" }}\r\n          >\r\n            <g\r\n              onTouchStart={zoom.dragStart}\r\n              onTouchMove={zoom.dragMove}\r\n              onMouseDown={zoom.dragStart}\r\n              onTouchEnd={zoom.dragEnd}\r\n              onMouseMove={zoom.dragMove}\r\n              onMouseUp={zoom.dragEnd}\r\n              transform={zoom.toString()}\r\n              onMouseLeave={() => {\r\n                if (zoom.isDragging) zoom.dragEnd();\r\n              }}\r\n            >\r\n              <Tree\r\n                root={data}\r\n                size={[width, height]}\r\n              >\r\n                {(treeHeir) => (\r\n                  <Group>\r\n                    {treeHeir.links().map((link, i) => (\r\n                      <TreeGraphLink\r\n                        key={`link-${i}`}\r\n                        order={order}\r\n                        link={link}\r\n                      />\r\n                    ))}\r\n                    {treeHeir\r\n                      .descendants()\r\n                      .map((node, i) => (\r\n                        <TreeGraphNode\r\n                          key={`node-${i}`}\r\n                          order={order}\r\n                          node={node}\r\n                          onClick={onNodeClick}\r\n                        />\r\n                      ))}\r\n                  </Group>\r\n                )}\r\n              </Tree>\r\n            </g>\r\n          </svg>\r\n          <StyledFAB\r\n            onClick={zoom.center}\r\n            title={t(\"playground.graph.center\")}\r\n          >\r\n            <ControlCameraRounded />\r\n          </StyledFAB>\r\n        </Fragment>\r\n      )}\r\n    </Zoom>\r\n  );\r\n};\r\n","import { syntaxTreetoExprTree } from \"$core/tree/conversion\";\r\nimport { augmentExprTree } from \"$core/tree/expr/augment\";\r\nimport { collectSymbols } from \"$core/tree/expr/evaluate\";\r\nimport { exprTreeToLatex } from \"$core/tree/expr/latex\";\r\nimport { ExprTree } from \"$types/ast\";\r\nimport { SyntaxTree } from \"$types/parser\";\r\nimport {\r\n  Box,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  alpha,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  FC,\r\n  Fragment,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { EditorBooleanSwitcher } from \"./PlaygroundBooleanSwitcherGroup\";\r\nimport { PlaygroundPlaybackControl } from \"./PlaygroundPlaybackControl\";\r\nimport { StyledLatex } from \"./StyledLatex\";\r\nimport { TreeGraph } from \"./TreeGraph\";\r\n\r\ntype PlaygroundProps = {\r\n  tree: SyntaxTree | null;\r\n};\r\nexport const Playground: FC<PlaygroundProps> = (props) => {\r\n  const { tree } = props;\r\n\r\n  const { palette, shape } = useTheme();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [truthTable, setTruthTable] = useState(\r\n    new Map<string, boolean>()\r\n  );\r\n\r\n  const [order, setOrder] = useState(0);\r\n  const [maxOrder, setMaxOrder] = useState(0);\r\n\r\n  const [selectedNode, setSelectedNode] =\r\n    useState<ExprTree | null>(null);\r\n  const [selected, setSelected] = useState(\r\n    new Set<string>()\r\n  );\r\n\r\n  const exprTree = useMemo(() => {\r\n    return tree === null\r\n      ? null\r\n      : syntaxTreetoExprTree(tree, truthTable);\r\n  }, [tree, truthTable]);\r\n\r\n  useEffect(() => {\r\n    if (exprTree === null) {\r\n      setOrder(0);\r\n      setMaxOrder(0);\r\n      return;\r\n    }\r\n    setOrder(1);\r\n    setMaxOrder(exprTree.order + 1);\r\n  }, [exprTree]);\r\n\r\n  const handleNodeClick = (node: ExprTree) => {\r\n    setDialogOpen(true);\r\n    setSelectedNode(node);\r\n    const symbols = collectSymbols(node);\r\n    setSelected(symbols);\r\n  };\r\n\r\n  const handleOrderChange = (v: number) => {\r\n    setOrder(v);\r\n    if (containerRef.current !== null) {\r\n      containerRef.current.scrollIntoView({\r\n        block: \"end\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        ref={containerRef}\r\n        sx={{\r\n          borderWidth: 4,\r\n          borderStyle: \"solid\",\r\n          borderRadius: shape.borderRadius,\r\n          borderColor: alpha(palette.secondary.main, 0.4),\r\n        }}\r\n      >\r\n        <Box\r\n          position=\"relative\"\r\n          height=\"75vh\"\r\n          width=\"100%\"\r\n        >\r\n          {exprTree !== null && (\r\n            <TreeGraph\r\n              order={order}\r\n              tree={augmentExprTree(exprTree)}\r\n              onNodeClick={handleNodeClick}\r\n            />\r\n          )}\r\n        </Box>\r\n        <Divider flexItem />\r\n        <PlaygroundPlaybackControl\r\n          disabled={exprTree === null}\r\n          maxValue={maxOrder}\r\n          minValue={1}\r\n          value={order}\r\n          onChange={handleOrderChange}\r\n        />\r\n      </Box>\r\n      <Dialog\r\n        PaperProps={{ elevation: 0 }}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        open={dialogOpen}\r\n        onClose={() => setDialogOpen(false)}\r\n      >\r\n        <DialogTitle>\r\n          <StyledLatex\r\n            tex={exprTreeToLatex(selectedNode)}\r\n          />\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <EditorBooleanSwitcher\r\n            selected={selected}\r\n            table={truthTable}\r\n            onChange={(k, v) =>\r\n              setTruthTable((prev) => {\r\n                const next = new Map(prev);\r\n                next.set(k, v);\r\n                return next;\r\n              })\r\n            }\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport { Box, Tab } from \"@mui/material\";\r\nimport { FC, Fragment, ReactNode, useState } from \"react\";\r\n\r\ntype StyledTabsProps = {\r\n  tabLabels: string[];\r\n  panels: ReactNode[];\r\n};\r\nexport const StyledTabs: FC<StyledTabsProps> = (props) => {\r\n  const { panels, tabLabels } = props;\r\n\r\n  const [active, setActive] = useState(0);\r\n  if (\r\n    panels.length === 0 ||\r\n    panels.length !== tabLabels.length\r\n  ) {\r\n    return <Fragment />;\r\n  }\r\n\r\n  return (\r\n    <TabContext value={active}>\r\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n        <TabList\r\n          onChange={(_, v) => setActive(v)}\r\n          variant=\"scrollable\"\r\n        >\r\n          {tabLabels.map((label, index) => (\r\n            <Tab\r\n              key={\"tab-lable\" + index}\r\n              label={label}\r\n              value={index}\r\n            />\r\n          ))}\r\n        </TabList>\r\n      </Box>\r\n      {panels.map((panel, index) => (\r\n        <TabPanel\r\n          key={\"tab-pane\" + index}\r\n          keepMounted\r\n          sx={{ padding: 0 }}\r\n          value={index}\r\n        >\r\n          {panel}\r\n        </TabPanel>\r\n      ))}\r\n    </TabContext>\r\n  );\r\n};\r\n","import { Operator, Token, TokenType } from \"$types/lexer\";\r\n\r\nconst OPERATOR_TABLE: Record<string, Operator> = {\r\n  \"and\": Operator.AND,\r\n  \"or\": Operator.OR,\r\n  \"implies\": Operator.IMPLIES,\r\n  \"iff\": Operator.IFF,\r\n  \"not\": Operator.NOT,\r\n  \"\\u{2227}\": Operator.AND,\r\n  \"\\u{2228}\": Operator.OR,\r\n  \"\\u{21D2}\": Operator.IMPLIES,\r\n  \"\\u{21D4}\": Operator.IFF,\r\n  \"\\u{00AC}\": Operator.NOT,\r\n};\r\n\r\nconst IS_WHITESPACE_MANY = /\\s+/g;\r\nconst IS_SYMBOL = /^[a-zA-Z\\p{Script=Thai}]+/mu;\r\nconst collapseWhitespace = (source: string): string => {\r\n  return source.replaceAll(IS_WHITESPACE_MANY, \" \");\r\n};\r\n\r\nconst collectSymbol = (source: string): string => {\r\n  const match = IS_SYMBOL.exec(source);\r\n  if (match === null || match.length === 0) {\r\n    return \"\";\r\n  }\r\n  return match[0];\r\n};\r\n\r\nconst lex = (source: string): Token[] => {\r\n  const sourceLength = source.length;\r\n  let tokens: Token[] = [];\r\n  let pos = 0;\r\n  while (pos < sourceLength) {\r\n    const char = source[pos];\r\n\r\n    switch (char) {\r\n      case \" \":\r\n        pos++;\r\n        continue;\r\n      case \"(\":\r\n        tokens.push({\r\n          tokenType: TokenType.LEFT_PARENTHESIS,\r\n          pos,\r\n        });\r\n        pos++;\r\n        continue;\r\n      case \")\":\r\n        tokens.push({\r\n          tokenType: TokenType.RIGHT_PARENTHESIS,\r\n          pos,\r\n        });\r\n        pos++;\r\n        continue;\r\n    }\r\n\r\n    const opSign = OPERATOR_TABLE[char];\r\n    if (opSign !== undefined) {\r\n      tokens.push({\r\n        tokenType: TokenType.OPERATOR,\r\n        name: opSign,\r\n        pos,\r\n      });\r\n      pos++;\r\n    }\r\n\r\n    const symbol = collectSymbol(source.slice(pos));\r\n    if (symbol.length === 0) {\r\n      tokens = [];\r\n      tokens.push({\r\n        tokenType: TokenType.ERROR,\r\n        pos,\r\n        source,\r\n      });\r\n      break;\r\n    }\r\n\r\n    const opName = OPERATOR_TABLE[symbol];\r\n    if (opName !== undefined) {\r\n      tokens.push({\r\n        tokenType: TokenType.OPERATOR,\r\n        name: opName,\r\n        pos,\r\n      });\r\n      pos += symbol.length;\r\n      continue;\r\n    }\r\n\r\n    tokens.push({\r\n      tokenType: TokenType.IDENTIFIER,\r\n      symbol,\r\n      length: symbol.length,\r\n      pos,\r\n    });\r\n    pos += symbol.length;\r\n    continue;\r\n  }\r\n\r\n  return tokens;\r\n};\r\n\r\nexport const lexer = (source: string): Token[] => {\r\n  const sourceCollapsed = collapseWhitespace(\r\n    source.normalize()\r\n  );\r\n  return lex(sourceCollapsed);\r\n};\r\n","import { Operator, Token, TokenType } from \"$types/lexer\";\r\nimport {\r\n  ErrorType,\r\n  SyntaxTree,\r\n  SyntaxTreeNodeType,\r\n} from \"$types/parser\";\r\n\r\nconst OPERATOR_PRECEDENCE = {\r\n  [Operator.NOT]: 6,\r\n  [Operator.AND]: 5,\r\n  [Operator.OR]: 4,\r\n  [Operator.IMPLIES]: 3,\r\n  [Operator.IFF]: 2,\r\n};\r\n\r\nconst polishToAST = (tokens: Token[]): SyntaxTree => {\r\n  const tok = tokens.pop();\r\n  if (tok === undefined) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.ERROR,\r\n      errorType: ErrorType.PARSER_ERROR,\r\n      reason: \"Expression ended unexpectedly\",\r\n    };\r\n  }\r\n\r\n  switch (tok.tokenType) {\r\n    case TokenType.ERROR:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.ERROR,\r\n        errorType: ErrorType.LEXICAL_ERROR,\r\n        pos: tok.pos,\r\n        source: tok.source,\r\n      };\r\n    case TokenType.RIGHT_PARENTHESIS:\r\n    case TokenType.LEFT_PARENTHESIS:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.ERROR,\r\n        errorType: ErrorType.PARSER_ERROR,\r\n        reason: `Found unexpected parenthesis at position ${tok.pos}`,\r\n      };\r\n    case TokenType.IDENTIFIER:\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.IDENTIFIER,\r\n        value: tok.symbol,\r\n      };\r\n  }\r\n\r\n  if (tok.name === Operator.NOT) {\r\n    const operand = polishToAST(tokens);\r\n    if (operand.nodeType === SyntaxTreeNodeType.ERROR) {\r\n      return operand;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.UNARY_OPERATOR,\r\n      operator: tok.name,\r\n      operand,\r\n    };\r\n  }\r\n\r\n  const right = polishToAST(tokens);\r\n  if (right.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return right;\r\n  }\r\n\r\n  const left = polishToAST(tokens);\r\n  if (left.nodeType === SyntaxTreeNodeType.ERROR) {\r\n    return left;\r\n  }\r\n  return {\r\n    nodeType: SyntaxTreeNodeType.BINARY_OPERATOR,\r\n    operator: tok.name,\r\n    leftOperand: left,\r\n    rightOperand: right,\r\n  };\r\n};\r\n\r\n// https://en.wikipedia.org/wiki/Shunting_yard_algorithm\r\nconst infixToPolish = (tokens: Token[]): Token[] => {\r\n  const outStack: Token[] = [];\r\n  const opStack: Token[] = [];\r\n\r\n  let pos = 0;\r\n\r\n  while (pos < tokens.length) {\r\n    const token = tokens[pos];\r\n    pos++;\r\n\r\n    switch (token.tokenType) {\r\n      case TokenType.ERROR:\r\n        outStack.push(token);\r\n        return outStack;\r\n      case TokenType.IDENTIFIER:\r\n        outStack.push(token);\r\n        break;\r\n      case TokenType.LEFT_PARENTHESIS:\r\n        opStack.push(token);\r\n        break;\r\n    }\r\n\r\n    if (token.tokenType === TokenType.OPERATOR) {\r\n      const precedence = OPERATOR_PRECEDENCE[token.name];\r\n\r\n      while (opStack.length > 0) {\r\n        const last = opStack[opStack.length - 1];\r\n        if (last.tokenType === TokenType.LEFT_PARENTHESIS) {\r\n          break;\r\n        }\r\n        if (\r\n          last.tokenType === TokenType.OPERATOR &&\r\n          OPERATOR_PRECEDENCE[last.name] < precedence\r\n        ) {\r\n          break;\r\n        }\r\n        opStack.pop();\r\n        outStack.push(last);\r\n      }\r\n\r\n      opStack.push(token);\r\n    }\r\n\r\n    if (token.tokenType === TokenType.RIGHT_PARENTHESIS) {\r\n      while (opStack.length > 0) {\r\n        const last = opStack[opStack.length - 1];\r\n        if (last.tokenType === TokenType.LEFT_PARENTHESIS) {\r\n          break;\r\n        }\r\n        if (opStack.length === 1) {\r\n          throw Error(\r\n            `Found unpaired right parenthesis at position ${token.pos}`\r\n          );\r\n        }\r\n        opStack.pop();\r\n        outStack.push(last);\r\n      }\r\n      if (\r\n        opStack.length === 0 ||\r\n        opStack[opStack.length - 1].tokenType !==\r\n          TokenType.LEFT_PARENTHESIS\r\n      ) {\r\n        throw Error(\r\n          `Found unpaired right at position ${token.pos}`\r\n        );\r\n      }\r\n      opStack.pop(); // pop left parenthesis\r\n    }\r\n  }\r\n\r\n  while (opStack.length > 0) {\r\n    const last = opStack[opStack.length - 1];\r\n    if (last.tokenType === TokenType.LEFT_PARENTHESIS) {\r\n      throw Error(\r\n        `Found unclosed left parenthesis at position ${last.pos}`\r\n      );\r\n    }\r\n    opStack.pop();\r\n    outStack.push(last);\r\n  }\r\n  return outStack;\r\n};\r\n\r\nexport const parser = (tokens: Token[]): SyntaxTree => {\r\n  try {\r\n    const polish = infixToPolish(tokens);\r\n\r\n    if (\r\n      polish.length === 1 &&\r\n      polish[0].tokenType === TokenType.ERROR\r\n    ) {\r\n      return {\r\n        nodeType: SyntaxTreeNodeType.ERROR,\r\n        errorType: ErrorType.LEXICAL_ERROR,\r\n        pos: polish[0].pos,\r\n        source: polish[0].source,\r\n      };\r\n    }\r\n    const tree = polishToAST(polish);\r\n    if (polish.length === 0) {\r\n      return tree;\r\n    }\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.ERROR,\r\n      errorType: ErrorType.PARSER_ERROR,\r\n      reason: \"Invalid Boolean expression\",\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      nodeType: SyntaxTreeNodeType.ERROR,\r\n      errorType: ErrorType.PARSER_ERROR,\r\n      reason: (e as Error).message,\r\n    };\r\n  }\r\n};\r\n","import { Editor } from \"$components/Editor\";\r\nimport { LatexDisplay } from \"$components/LatexDisplay\";\r\nimport { Playground } from \"$components/Playground\";\r\nimport { StyledTabs } from \"$components/StyledTabs\";\r\nimport { lexer } from \"$core/interpreter/lexer\";\r\nimport { parser } from \"$core/interpreter/parser\";\r\nimport { syntaxTreeToLatex } from \"$core/tree/conversion\";\r\nimport { SyntaxTree } from \"$types/parser\";\r\nimport { Container, Stack } from \"@mui/material\";\r\nimport { FC, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const EditorView: FC = () => {\r\n  const { t } = useTranslation();\r\n  const [tree, setTree] = useState<SyntaxTree | null>(null);\r\n\r\n  const handleExecute = (value: string) => {\r\n    const tokens = lexer(value);\r\n    if (tokens.length === 0) {\r\n      setTree(null);\r\n      return;\r\n    }\r\n    const _tree = parser(tokens);\r\n    setTree(_tree);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Stack\r\n        useFlexGap\r\n        spacing={1}\r\n        padding={2}\r\n      >\r\n        <Editor onExecute={handleExecute} />\r\n        <StyledTabs\r\n          tabLabels={[\"Original\", \"Simplified\"]}\r\n          panels={[\r\n            <Stack spacing={1}>\r\n              <LatexDisplay\r\n                tex={syntaxTreeToLatex(tree)}\r\n                emptyText={t(\"common.emptyText\")}\r\n              />\r\n              <Playground tree={tree} />\r\n            </Stack>,\r\n            <Stack spacing={1}>\r\n              <LatexDisplay\r\n                tex={syntaxTreeToLatex(tree)}\r\n                emptyText={t(\"common.emptyText\")}\r\n              />\r\n              <Playground tree={tree} />\r\n            </Stack>,\r\n          ]}\r\n        />\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n","export default \"data:text/plain;base64,IyMgVXNlZnVsIFRoZW9yZW1z8J+agA0KDQojIyMgRGUgTW9yZ2FuJ3MgTGF3DQoNCioqVGhlb3JlbSoqOiBOZWdhdGlvbiBpcyBkaXN0cmlidXRpdmUgb3ZlciBjb25qdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChQIFxsYW5kIFEpIFxlcXVpdiBcbG5vdCBQIFxsb3IgXGxub3QgUS4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IE5lZ2F0aW9uIGlzIGRpc3RyaWJ1dGl2ZSBvdmVyIGRpc2p1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KXGxub3QgKFAgXGxvciBRKSBcZXF1aXYgXGxub3QgUCBcbGFuZCBcbG5vdCBRLg0KXGVuZHthbGlnbip9DQokJA0KDQpSZWxhdGVkIHJlc291cmNlczoNCi0gW0RlIE1vcmdhbidzIGxhdyAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvRGVfTW9yZ2FuJTI3c19MYXdzXyhMb2dpYykpDQoNCiMjIyBSdWxlIG9mIERvdWJsZSBOZWdhdGlvbg0KDQoqKlRoZW9yZW0qKjogVGhlIHRydXRoIHZhbHVlIG9mIHRoZSBkb3VibGUgbmVnYXRpb24gb2YgYSBwcm9wb3NpdGlvbiBpcyBlcXVpdmFsZW50IHRvIGl0c2VsZg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChcbG5vdCBQKSBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtEb3VibGUgbmVnYXRpb24gKFByb29md2lraSldKGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL0RvdWJsZV9OZWdhdGlvbikNCg0KIyMjIFJ1bGUgb2YgSWRlbXBvdGVuY2UNCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGlkZW1wb3RlbnQNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsb3IgUCBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IENvbmp1bmN0aW9uIGlzIGlkZW1wb3RlbnQNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsYW5kIFAgXGVxdWl2IFAuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBJZGVtcG90ZW5jZSAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvUnVsZV9vZl9JZGVtcG90ZW5jZSkNCi0gW0lkZW1wb3RlbmNlIChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JZGVtcG90ZW5jZSkNCg0KIyMjIFJ1bGUgb2YgQ29tbXV0YXRpb24NCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGNvbW11dGF0aXZlDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIFEgXGVxdWl2IFEgXGxvciBQLg0KXGVuZHthbGlnbip9DQokJA0KDQoqKlRoZW9yZW0qKjogQ29uanVuY3Rpb24gaXMgY29tbXV0YXRpdmUNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsYW5kIFEgXGVxdWl2IFEgXGxhbmQgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtSdWxlIG9mIENvbW11dGF0aW9uIChQcm9vZndpa2kpXShodHRwczovL3Byb29md2lraS5vcmcvd2lraS9SdWxlX29mX0NvbW11dGF0aW9uKQ0KLSBbQ29tbXV0YXRpdmUgcHJvcGVydHkgKFdpa2lwZWRpYSldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbW11dGF0aXZlX3Byb3BlcnR5KQ0KDQojIyMgUnVsZSBvZiBBc3NvY2lhdGlvbg0KDQoqKlRoZW9yZW0qKjogRGlzanVuY3Rpb24gaXMgYXNzb2NpYXRpdmUNCg0KJCQNClxiZWdpbnthbGlnbip9DQpQIFxsb3IgKFEgXGxvciBSKSBcZXF1aXYgKFAgXGxvciBRKSBcbG9yIFIuDQpcZW5ke2FsaWduKn0NCiQkDQoNCioqVGhlb3JlbSoqOiBDb25qdW5jdGlvbiBpcyBhc3NvY2lhdGl2ZQ0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFEgXGxhbmQgUikgXGVxdWl2IChQIFxsYW5kIFEpIFxsYW5kIFIuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBBc3NvY2lhdGlvbiAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvUnVsZV9vZl9Bc3NvY2lhdGlvbikNCi0gW0Fzc29jaWF0aXZlIHByb3BlcnR5IChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Bc3NvY2lhdGl2ZV9wcm9wZXJ0eSkNCg0KIyMjIFJ1bGUgb2YgRGlzdHJpYnV0aW9uDQoNCioqVGhlb3JlbSoqOiBDb25qdW5jdGlvbiBpcyBkaXN0cmlidXRpdmUgb3ZlciBkaXNqdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFEgXGxvciBSKSBcZXF1aXYgKFAgXGxhbmQgUSkgXGxvciAoUCBcbGFuZCBSKS4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KKipUaGVvcmVtKio6IERpc2p1bmN0aW9uIGlzIGRpc3RyaWJ1dGl2ZSBvdmVyIGNvbmp1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIChRIFxsYW5kIFIpIFxlcXVpdiAoUCBcbG9yIFEpIFxsYW5kIChQIFxsb3IgUikuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbUnVsZSBvZiBkaXN0cmlidXRpb24gKFByb29md2lraSldKGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1J1bGVfb2ZfRGlzdHJpYnV0aW9uKQ0KLSBbRGlzdHJpYnV0aXZlIHByb3BlcnR5IChXaWtpcGVkaWEpXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaXN0cmlidXRpdmVfcHJvcGVydHkpDQoNCiMjIyBBYnNvcnB0aW9uIExhd3MgDQoNCioqVGhlb3JlbSoqOiBEaXNqdW5jdGlvbiBhYnNvcmJzIGNvbmp1bmN0aW9uDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIChQIFxsYW5kIFEpIFxlcXVpdiBQLg0KXGVuZHthbGlnbip9DQokJA0KDQoqKlRoZW9yZW0qKjogQ29uanVuY3Rpb24gYWJzb3JicyBkaXNqdW5jdGlvbg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClAgXGxhbmQgKFAgXGxvciBRKSBcZXF1aXYgUC4NClxlbmR7YWxpZ24qfQ0KJCQNCg0KUmVsYXRlZCByZXNvdXJjZXM6DQotIFtBYnNvcnB0aW9uIExhd3MgIChQcm9vZndpa2kpXShodHRwczovL3Byb29md2lraS5vcmcvd2lraS9BYnNvcnB0aW9uX0xhd3NfKEJvb2xlYW5fQWxnZWJyYXMpKQ0KDQojIyMgTGF3IG9mIEV4Y2x1ZGVkIE1pZGRsZQ0KDQoqKlRoZW9yZW0qKjogRXZlcnkgcHJvcG9zaXRpb24gaXMgZWl0aGVyIHRydWUgb3IgZmFsc2UuDQoNCiQkDQpcYmVnaW57YWxpZ24qfQ0KUCBcbG9yIFxsbm90IFAgXGVxdWl2IFx0b3AuDQpcZW5ke2FsaWduKn0NCiQkDQoNClJlbGF0ZWQgcmVzb3VyY2VzOg0KLSBbTGF3IG9mIEV4Y2x1ZGVkIE1pZGRsZSAoUHJvb2Z3aWtpKV0oaHR0cHM6Ly9wcm9vZndpa2kub3JnL3dpa2kvTGF3X29mX0V4Y2x1ZGVkX01pZGRsZSkNCg0KIyMjIFByaW5jaXBsZSBvZiBOb24tQ29udHJhZGljdGlvbg0KDQoqKlRoZW9yZW0qKjogQSBwcm9wb3NpdGlvbiBjYW5ub3QgYmUgYm90aCB0cnVlIGFuZCBmYWxzZSBhdCB0aGUgc2FtZSB0aW1lLg0KDQokJA0KXGJlZ2lue2FsaWduKn0NClxsbm90IChQIFxsYW5kIFxsbm90IFApIFxlcXVpdiBcdG9wLg0KXGVuZHthbGlnbip9DQokJA0KDQpSZWxhdGVkIHJlc291cmNlczoNCi0gW1ByaW5jaXBsZSBvZiBOb24tQ29udHJhZGljdGlvbiAoUHJvb2Z3aWtpKV0oIGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1ByaW5jaXBsZV9vZl9Ob24tQ29udHJhZGljdGlvbikNCg0K\"","export default \"data:text/plain;base64,IyMg8J+TmlVzZXIgTWFudWFsDQoNClRvIHVzZSB0aGUgaW50ZXJwcmV0ZXIsIHNpbXBseSB0eXBlIGluIGEgQm9vbGVhbiBleHByZXNpb24gaW50byB0aGUgaW5wdXQgZmllbGQgYW5kIHByZXNzIHJ1biEgSWYgeW91IGV4cHJlc3Npb24gaXMgd2VsbC1mb3JtZWQsIHlvdSBzaG91bGQgc2VlIGEgdmVyc2lvbiBvZiB5b3VyIGV4cHJlc3Npb24gdGhlIGludGVycHJldGVyIHNlZXMsIGJ1dCBpZiB5b3Ugc2VlIG5vdGhpbmcsIHlvdSBtaWdodCB3YW50IHRvIGRvdWJsZSBjaGVjayB5b3VyIGV4cHJlc3Npb24uDQoNCllvdSBjYW4gYWxzbyBwbGF5IGFyb3VuZCB3aXRoIHRoZSB0cnV0aCB2YWx1ZSBvZiB5b3VyIGV4cHJlc3Npb24gYnkgY2hhbmdpbmcgdGhlIHRydXRoIHZhbHVlcyBvZiB5b3VyIHByb3Bvc2l0aW9ucy4NCg0KV2hpbGUgeW91IGFyZSBoZXJlLCBsZXQgbWUgdGVsbCB5b3UgYSBmZXcgdGlwcy4gWW91IGNhbiBwcmVzcyBgQ1RSTGAgKyBgRU5URVJgIHRvIHRyaWdnZXIgdGhlIHJ1biBidXR0b24uIFRoZSBtYXRoIHN5bWJvbHMgY2FuIGJlIHRyaWNreSB0byB3cml0ZSwgc28geW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZzsgDQoNCg0KDQotICphbmQqIGlzIGFuIGFsaWFzIGZvciAmYW5kOywgDQotICpvciogaXMgYW4gYWxpYXMgZm9yICZvcjssIA0KLSAqaW1wbGllcyogaXMgYW4gYWxpYXMgZm9yICZyYXJyOywgDQotICppZmYqIGlzIGFuIGFsaWFzIGZvciAmaEFycjssIGFuZCANCi0gKm5vdCogaXMgYW4gYWxpYXMgZm9yICZub3Q7LiANCg0KQmV3YXJlIHNpbmNlIHRoZXNlIGFyZSBjYXNlLXNlbnNpdGl2ZS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4gd3JpdGUgYW4gZXhwcmVzaW9uIGxpa2UgdGhpczsgYG5vdCAocCBhbmQgcSkgaWZmIG5vdCBwIG9yIG5vdCBxYC4NCg0KDQo=\"","import { Divider, Typography } from \"@mui/material\";\r\nimport { JsxRuntimeComponents } from \"node_modules/react-markdown/lib\";\r\nimport { FC } from \"react\";\r\nimport Markdown from \"react-markdown\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkMath from \"remark-math\";\r\n\r\nconst COMPONENTS_OVERRIDE: Partial<JsxRuntimeComponents> = {\r\n  h2: ({ children, id }) => (\r\n    <Typography\r\n      variant=\"h2\"\r\n      id={id}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h3: ({ children, id }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h3\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  h4: ({ id, children }) => (\r\n    <Typography\r\n      id={id}\r\n      variant=\"h4\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  p: ({ children }) => (\r\n    <Typography\r\n      component=\"p\"\r\n      gutterBottom\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  // code: ({ children }) => <StyledKBD>{children}</StyledKBD>,\r\n  em: ({ children }) => (\r\n    <Typography\r\n      fontWeight=\"bold\"\r\n      component=\"em\"\r\n      fontStyle=\"normal\"\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n  hr: () => (\r\n    <Divider\r\n      flexItem\r\n      sx={{ marginY: 4 }}\r\n      variant=\"middle\"\r\n    />\r\n  ),\r\n  a: ({ href, hrefLang, referrerPolicy, children }) => (\r\n    <Typography\r\n      component=\"a\"\r\n      target=\"_blank\"\r\n      href={href}\r\n      hrefLang={hrefLang}\r\n      referrerPolicy={referrerPolicy}\r\n    >\r\n      {children}\r\n    </Typography>\r\n  ),\r\n};\r\n\r\ntype StyledMarkdownProps = {\r\n  children: string;\r\n};\r\nexport const StyledMarkdown: FC<StyledMarkdownProps> = (\r\n  props\r\n) => {\r\n  const { children } = props;\r\n  return (\r\n    <Markdown\r\n      components={COMPONENTS_OVERRIDE}\r\n      rehypePlugins={[rehypeKatex, rehypeSlug]}\r\n      remarkPlugins={[remarkMath]}\r\n    >\r\n      {children}\r\n    </Markdown>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetchMarkdown = (path: string) => {\r\n  const [content, setContent] = useState<string | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    let isWorking = true;\r\n    fetch(path)\r\n      .then((res) => res.text())\r\n      .then((text) => {\r\n        if (!isWorking) {\r\n          return;\r\n        }\r\n        setContent(text);\r\n      });\r\n    return () => {\r\n      isWorking = false;\r\n    };\r\n  }, [path]);\r\n\r\n  return content;\r\n};\r\n","import AboutBlog from \"$assets/blogs/BooleanAlgebraSummary/en.txt\";\r\nimport UserManualBlog from \"$assets/blogs/UserManual/en.txt\";\r\nimport { StyledMarkdown } from \"$components/StyledMarkdown\";\r\nimport { useFetchMarkdown } from \"$hooks/useFetchMarkdown\";\r\nimport { Box, Container, Typography } from \"@mui/material\";\r\nimport { FC, Fragment } from \"react\";\r\nexport const BlogView: FC = () => {\r\n  const userManualContent =\r\n    useFetchMarkdown(UserManualBlog);\r\n  const content = useFetchMarkdown(AboutBlog);\r\n  return (\r\n    <Fragment>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          backgroundColor: (t) => t.palette.secondary.light,\r\n          paddingY: 2,\r\n          marginY: 8,\r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <Typography\r\n            variant=\"h1\"\r\n            component=\"h1\"\r\n          >\r\n            Hi there! 👋\r\n          </Typography>\r\n          <StyledMarkdown>\r\n            {userManualContent ?? \"\"}\r\n          </StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n      <Box marginBottom={4}>\r\n        <Container maxWidth=\"md\">\r\n          <StyledMarkdown>{content ?? \"\"}</StyledMarkdown>\r\n        </Container>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  createTheme,\r\n  responsiveFontSizes,\r\n} from \"@mui/material\";\r\nimport { brown, green } from \"@mui/material/colors\";\r\n\r\nexport let theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: brown[\"600\"],\r\n    },\r\n    secondary: {\r\n      light: \"#abcbad\",\r\n      main: green[\"800\"],\r\n    },\r\n  },\r\n  components: {\r\n    MuiList: {\r\n      defaultProps: {\r\n        disablePadding: true,\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiListItem: {\r\n      defaultProps: {\r\n        dense: true,\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      styleOverrides: {\r\n        arrow: ({ theme: t }) => ({\r\n          color: t.palette.primary.dark,\r\n        }),\r\n        tooltip: ({ theme: t }) => ({\r\n          backgroundColor: t.palette.primary.dark,\r\n        }),\r\n      },\r\n    },\r\n    MuiTypography: {\r\n      defaultProps: {\r\n        sx: {\r\n          userSelect: \"none\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n","import { EditorView } from \"$views/EditorView\";\r\nimport { BlogView } from \"$views/TheoremBlogView\";\r\nimport {\r\n  CssBaseline,\r\n  GlobalStyles,\r\n  ThemeProvider,\r\n} from \"@mui/material\";\r\nimport { FC } from \"react\";\r\nimport { theme } from \"./theme\";\r\nconsole.log(\"App\");\r\n\r\nconst globalStyles = (\r\n  <GlobalStyles\r\n    styles={{\r\n      tableLayout: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n      html: {\r\n        scrollBehavior: \"smooth\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {globalStyles}\r\n      <EditorView />\r\n      <BlogView />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","export const en = {\r\n  translation: {\r\n    common: {\r\n      true: \"True\",\r\n      false: \"False\",\r\n      connectives: {\r\n        negation: \"Negation\",\r\n        conjunction: \"Conjunction\",\r\n        disjunction: \"Disjunction\",\r\n        implication: \"Implication\",\r\n        equivalence: \"Equivalence\",\r\n      },\r\n    },\r\n    editor: {\r\n      howToUse: \"How to use?\",\r\n      run: \" Run\",\r\n      allowedOperatorLabel: \"Connectives to keep\",\r\n    },\r\n  },\r\n} as const;\r\n","export const th = {\r\n  translation: {\r\n    common: {\r\n      true: \"จริง\",\r\n      false: \"เท็จ\",\r\n    },\r\n    editor: {\r\n      toolbar: {\r\n        connectives: {\r\n          negation: \"นิเสธ\",\r\n          conjunction: \"และ\",\r\n          disjunction: \"หรือ\",\r\n          implication: \"ถ้า แล้ว\",\r\n          equivalence: \"ก็ต่อเมื่อ\",\r\n        },\r\n        howToUse: \"คู่มือการใช้งาน\",\r\n        run: \"คำนวณ\",\r\n      },\r\n    },\r\n  },\r\n} as const;\r\n","import i18next from \"i18next\";\r\nimport {\r\n  default as Backend,\r\n  default as LangDectector,\r\n} from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { en } from \"./en/translation\";\r\nimport { th } from \"./th/translation\";\r\n\r\ni18next\r\n  .use(Backend)\r\n  .use(LangDectector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    detection: {\r\n      lookupLocalStorage: \"language\",\r\n    },\r\n    fallbackLng: \"en\",\r\n    debug: true,\r\n    resources: {\r\n      en,\r\n      th,\r\n    },\r\n  });\r\n","import { App } from \"$App/App\";\nimport \"$locales/config\";\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n"],"names":["StyledLatex","props","tex","options","ref","useRef","useEffect","katex","jsx","Typography","OPERATOR","EditorRibbonInsert","onInsertChar","t","useTranslation","ButtonGroup","btn","btnIndex","Tooltip","Button","StyledTooltipButton","children","onExecute","shortcutHint","PlayArrowRounded","EditorRibbon","jsxs","Toolbar","Stack","TokenType","TokenType2","Operator","SYMBOL_LABEL","EditorSimplConfigGroup","onChange","values","FormLabel","FormControlLabel","Checkbox","k","l","index","checked","label","_","v","EditorTextField","rows","value","onKeyDown","TextField","e","Editor","operators","setOperators","useState","setValue","handleExecute","handleOperatorChange","p","next","handleInsertChar","char","prev","handleKeyDown","LatexDisplay","emptyText","palette","shape","useTheme","Box","alpha","ErrorType","ErrorType2","SyntaxTreeNodeType","SyntaxTreeNodeType2","_syntaxTreeToLatex","tree","nodeType","left","right","labelLeft","labelRight","syntaxTreeToLatex","_syntaxTreetoExprTree","symbolTable","orderStart","child","syntaxTreetoExprTree","_augmentExprTree","augmentExprTree","augmented","_collectSymbols","exprTree","symbols","collectSymbols","_exprTreeToLatex","childLatex","leftLatex","rightLatex","exprTreeToLatex","EditorBooleanSwitcher","table","selected","Divider","FormControl","RadioGroup","Radio","StyledIconButton","onKeyPress","onClick","title","disabled","IconButton","PlaygroundPlaybackControl","maxValue","minValue","handleForwardOrder","handleRewindOrder","handleKeyPress","key","maxLabel","KeyboardArrowLeftRounded","KeyboardArrowRightRounded","Slider","StyledFAB","Fab","TreeGraphLink","link","order","source","target","isSourceVisible","isTargetVisibleNow","isTargetVisibleSoon","isTargetVisible","isLinkVisible","LinkVertical","TreeGraphNode","node","x","y","data","typography","isNodeHighlighted","isNodeVisibleNow","isNodeVisibleSoon","isNodeVisible","Group","TreeGraph","onNodeClick","hierarchy","height","width","Zoom","zoom","Fragment","Tree","treeHeir","i","ControlCameraRounded","Playground","containerRef","dialogOpen","setDialogOpen","truthTable","setTruthTable","setOrder","maxOrder","setMaxOrder","selectedNode","setSelectedNode","setSelected","useMemo","handleNodeClick","handleOrderChange","Dialog","DialogTitle","DialogContent","StyledTabs","panels","tabLabels","active","setActive","TabContext","TabList","Tab","panel","TabPanel","OPERATOR_TABLE","IS_WHITESPACE_MANY","IS_SYMBOL","collapseWhitespace","collectSymbol","match","lex","sourceLength","tokens","pos","opSign","symbol","opName","lexer","sourceCollapsed","OPERATOR_PRECEDENCE","polishToAST","tok","operand","infixToPolish","outStack","opStack","token","precedence","last","parser","polish","EditorView","setTree","_tree","Container","AboutBlog","COMPONENTS_OVERRIDE","id","href","hrefLang","referrerPolicy","StyledMarkdown","Markdown","rehypeKatex","rehypeSlug","remarkMath","useFetchMarkdown","path","content","setContent","isWorking","res","text","BlogView","userManualContent","UserManualBlog","theme","createTheme","brown","green","responsiveFontSizes","globalStyles","GlobalStyles","App","ThemeProvider","CssBaseline","en","th","i18next","Backend","LangDectector","initReactI18next","createRoot","StrictMode"],"mappings":"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"}